<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog</title><link href="http://blog.jasonantman.com/" rel="alternate"></link><link href="http://blog.jasonantman.com/feeds/tags/syslog.atom.xml" rel="self"></link><id>http://blog.jasonantman.com/</id><updated>2012-08-25T11:33:00-04:00</updated><entry><title>Puppet facter facts for syslog daemon type and version, symantec netbackup</title><link href="http://blog.jasonantman.com/2012/08/puppet-facter-facts-for-syslog-daemon-type-and-version-symantec-netbackup/" rel="alternate"></link><updated>2012-08-25T11:33:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2012-08-25:2012/08/puppet-facter-facts-for-syslog-daemon-type-and-version-symantec-netbackup/</id><summary type="html">&lt;p&gt;I have a few more custom facts that I&amp;#8217;ve added to my
&lt;a href="https://github.com/jantman/puppet-facter-facts"&gt;puppet-facter-facts&lt;/a&gt;
github&amp;nbsp;repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/puppet-facter-facts/blob/master/syslog_bin.rb"&gt;syslog_bin&lt;/a&gt;,
    &lt;a href="https://github.com/jantman/puppet-facter-facts/blob/master/syslog_type.rb"&gt;syslog_type&lt;/a&gt;,
    and
    &lt;a href="https://github.com/jantman/puppet-facter-facts/blob/master/syslog_version.rb"&gt;syslog_version&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;tell the absolute path to the &lt;em&gt;running&lt;/em&gt; syslog binary, its short
name (basename), and its version as a string. Currently only know
about &lt;code&gt;/sbin/syslogd&lt;/code&gt; and &lt;code&gt;/sbin/rsyslogd&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/puppet-facter-facts/blob/master/has_netbackup.rb"&gt;has_netbackup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;tests for presence of the &lt;code&gt;/usr/openv/netbackup/bin&lt;/code&gt; directory,
created by installation of &lt;a href="http://www.symantec.com/netbackup"&gt;Symantec
Netbackup&lt;/a&gt;. Useful for making
generation of include/exclude files conditional on having NetBackup&amp;nbsp;installed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully some of these will be of use to someone else as&amp;nbsp;well.&lt;/p&gt;</summary><category term="facter"></category><category term="nbu"></category><category term="netbackup"></category><category term="puppet"></category><category term="rsyslog"></category><category term="syslog"></category></entry><entry><title>Petit for Log Analysis</title><link href="http://blog.jasonantman.com/2012/02/petit-for-log-analysis/" rel="alternate"></link><updated>2012-02-21T11:57:00-05:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2012-02-21:2012/02/petit-for-log-analysis/</id><summary type="html">&lt;p&gt;I recently discovered the
&lt;a href="http://crunchtools.com/software/petit/"&gt;petit&lt;/a&gt; program for log
analysis. It&amp;#8217;s a simple tool to pull out useful information from syslog
logs in a variety of ways. I&amp;#8217;ve only used it a few times so far, mainly
on logs from problems I&amp;#8217;ve already solved but didn&amp;#8217;t know the cause of
at first. So far, it&amp;#8217;s proven quite useful. Here are a few&amp;nbsp;examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;petit --wordcount /var/log/messages&lt;/code&gt; - displays ordered count of
    words appearing in the log. My first step, especially if &amp;#8220;warning&amp;#8221;,
    &amp;#8220;error&amp;#8221; or &amp;#8220;fatal&amp;#8221; shows up near the&amp;nbsp;top&amp;#8230;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;petit --hash --fingerprint /var/log/messages&lt;/code&gt; - hashes the log,
    removes filters (such as numerics, datestamp), and displays count of
    matching lines. Absolutely wonderful for web error logs, as it
    removes client &lt;span class="caps"&gt;IP&lt;/span&gt; addresses, line numbers,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;petit --mgraph /var/log/messages&lt;/code&gt; - graph messages per minute for
    the first hour of the log (&lt;span class="caps"&gt;ASCII&lt;/span&gt; of&amp;nbsp;course)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;petit --hgraph /var/log/messages&lt;/code&gt; - same as above, but messages per
    hour for the first&amp;nbsp;day&lt;/li&gt;
&lt;li&gt;Petit will also read from stdin with the &amp;#8212;Xgraph options, so you
    can &lt;code&gt;cat logfile | grep word | petit --mgraph&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Just one note - this tool appears to work only on standard syslog
formatted logs. If some non-datestamped lines managed to work their way
into the log (i.e. someone used echo &gt;&gt; logfile instead of &lt;code&gt;logger&lt;/code&gt;),
it will&amp;nbsp;choke.&lt;/p&gt;
&lt;p&gt;Many thanks to Scott McCarty for this wonderful&amp;nbsp;tool!&lt;/a&gt;&lt;/p&gt;</summary><category term="analysis"></category><category term="log"></category><category term="logging"></category><category term="petit"></category><category term="syslog"></category></entry><entry><title>php-suhosin syslog issues</title><link href="http://blog.jasonantman.com/2011/10/php-suhosin-syslog-issues/" rel="alternate"></link><updated>2011-10-21T10:24:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2011-10-21:2011/10/php-suhosin-syslog-issues/</id><summary type="html">&lt;p&gt;I just installed php-&lt;a href="http://www.hardened-php.net/suhosin/"&gt;suhosin&lt;/a&gt;
0.9.29 from &lt;span class="caps"&gt;EPEL&lt;/span&gt; on a CentOS 5.6 box. I&amp;#8217;m running a whole bunch of
name-based vhosts in Apache, and have a bunch of web apps, so I opted to
run suhosin in simulation mode (don&amp;#8217;t actually block anything, but log
errors) and have it log via syslog to a single file. Unfortunately, when
I configured this, the syslog messages started showing up in the wrong
place, apparently with the wrong facility &lt;em&gt;and&lt;/em&gt; priority. After some
roundabout debugging (at first assuming syslogd to be the problem), I
determined that, for whatever really strange reason (perhaps an
incorrect syslog.h on the &lt;span class="caps"&gt;EPEL&lt;/span&gt; box that built the suhosin package?) the
LOG_* constants were incorrect. I looked up the correct integer values
in &lt;code&gt;/usr/include/sys/syslog.h&lt;/code&gt; and the following configuration
directives accomplished the task&amp;nbsp;correctly:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="na"&gt;suhosin.log.syslog.facility&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;128&lt;/span&gt;
&lt;span class="c1"&gt;; 128 = LOG_LOCAL0&lt;/span&gt;

&lt;span class="na"&gt;suhosin.log.syslog.priority&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;5&lt;/span&gt;
&lt;span class="c1"&gt;; 5 = LOG_NOTICE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This one line puts suhosin into simulation mode, where it only logs
errors instead of enforcing on&amp;nbsp;them:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="na"&gt;suhosin.simulation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;On&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="centos"></category><category term="logging"></category><category term="PHP"></category><category term="security"></category><category term="suhosin"></category><category term="syslog"></category></entry><entry><title>Linux Memory Usage and Disk Caching</title><link href="http://blog.jasonantman.com/2011/08/linux-memory-usage-and-disk-caching/" rel="alternate"></link><updated>2011-08-23T08:17:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2011-08-23:2011/08/linux-memory-usage-and-disk-caching/</id><summary type="html">&lt;p&gt;I recently added some &lt;a href="http://www.cacti.net"&gt;Cacti&lt;/a&gt;-based graphing to a
number of Linux-based servers prior to rolling out a new service. When I
was looking over the performance graphs of the initial testing, I
noticed that memory usage on our &lt;a href="http://www.rsyslog.com"&gt;rsyslog&lt;/a&gt;
server was near 98%. Looking at &lt;code&gt;top(1)&lt;/code&gt;, I saw numbers that agreed,
though processor usage was around 99% idle, and no process appeared to
be using more than 1% of memory. It took me a minute or two to open my
eyes and see past the panic of memory usage, and finally look at the
complete output from &lt;code&gt;free(1)&lt;/code&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;             total       used       free     shared    buffers     cached
Mem:       8171508    8032632     138876          0     162084    7253716
-/+ buffers/cache:     616832    7554676
Swap:      4192956        152    4192804
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The pertinent part is the last column: &amp;#8220;cached&amp;#8221;. It slipped my mind that
while rsyslog is writing vast amounts of data to disk, which may or may
not ever be read back, the kernel is using free memory to cache as much
of that as it reliably can. Hence the difference between what the kernel
and userland tools call &amp;#8220;free&amp;#8221;, and what most human beings (or at least
sysadmins) would consider &amp;#8220;free&amp;#8221; - or, more correctly, &amp;#8220;available for&amp;nbsp;use&amp;#8221;.&lt;/p&gt;
&lt;p&gt;When I get a chance, maybe I&amp;#8217;ll submit patches to the Cacti Memory Usage
Percent (&lt;span class="caps"&gt;SNMP&lt;/span&gt;) template to either graph cache separately, or remove it
from the&amp;nbsp;total.&lt;/p&gt;
&lt;p&gt;Interestingly, I also found a somewhat cute page entitled &amp;#8220;Help! Linux
ate my &lt;span class="caps"&gt;RAM&lt;/span&gt;!&amp;#8221; at
&lt;a href="http://www.linuxatemyram.com/"&gt;http://www.linuxatemyram.com/&lt;/a&gt;.&lt;/p&gt;</summary><category term="linux"></category><category term="memory"></category><category term="rsyslog"></category><category term="syslog"></category></entry><entry><title>Vyatta VC5 - Snort alerts to syslog</title><link href="http://blog.jasonantman.com/2011/01/vyatta-vc5-snort-alerts-to-syslog/" rel="alternate"></link><updated>2011-01-30T19:54:00-05:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2011-01-30:2011/01/vyatta-vc5-snort-alerts-to-syslog/</id><summary type="html">&lt;p&gt;I&amp;#8217;m running a &lt;a href="http://www.vyatta.org"&gt;Vyatta&lt;/a&gt; vyatta router at home - in
my opinion it&amp;#8217;s pretty near &amp;#8220;enterprise grade&amp;#8221;, and I&amp;#8217;m running the
Community/Core (read: no-cost and almost all Free) on commodity hardware
with great performance. Granted, I&amp;#8217;m still on the older version (5 as
opposed to the current 6) since an upgrade will require total downtime
and a spare set of &lt;span class="caps"&gt;SCSI&lt;/span&gt; disks for the machine it&amp;#8217;s on, but it still
works quite well. Today I decided to enable the
&lt;a href="http://www.snort.org"&gt;Snort&lt;/a&gt; &lt;span class="caps"&gt;IDS&lt;/span&gt; on the box. It actually worked quite
well (albeit stuck at older rules until I upgrade to Vyatta &lt;span class="caps"&gt;VC6&lt;/span&gt;) and
didn&amp;#8217;t put much more load on the box. For the time being I decided to
just have it alert on problems and not drop anything, as I&amp;#8217;m getting
pretty high false positives and the older Vyatta version doesn&amp;#8217;t seem to
have a way to disregard&amp;nbsp;rules.&lt;/p&gt;
&lt;p&gt;My biggest complaint was that Vyatta didn&amp;#8217;t see fit to allow alerts by
syslog. I&amp;#8217;m not a big fan of keeping information like &lt;span class="caps"&gt;IDS&lt;/span&gt; logs stuck on
the router - I don&amp;#8217;t like logging in to it any more than I have to, it
doesn&amp;#8217;t have much storage, and I&amp;#8217;d also like to keep stuff like this in
a more secure location. Through a bit of digging, I found the
&lt;code&gt;/opt/vyatta/share/perl5/VyattaSnortConfig.pm&lt;/code&gt; Perl module which
generates the Snort config file from Vyatta&amp;#8217;s &lt;span class="caps"&gt;CLI&lt;/span&gt; stuff. Looking through
the Perl code, I found the definition of the snort.conf output&amp;nbsp;statements:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$output_def&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;span class="caps"&gt;EOD&lt;/span&gt;;&lt;/span&gt;
&lt;span class="s"&gt;  output alert_unified: alert, limit $log_limit&lt;/span&gt;
&lt;span class="s"&gt;  output log_null&lt;/span&gt;
&lt;span class="s"&gt;&lt;span class="caps"&gt;EOD&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I simply added a line &lt;code&gt;output alert_syslog: log_local3 log_notice&lt;/code&gt; after the &lt;code&gt;output alert_unified&lt;/code&gt; line.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$output_def&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;lt;&amp;lt;&lt;span class="caps"&gt;EOD&lt;/span&gt;;&lt;/span&gt;
&lt;span class="s"&gt;  output alert_unified: alert, limit $log_limit&lt;/span&gt;
&lt;span class="s"&gt;  output alert_syslog: log_local3 log_notice&lt;/span&gt;
&lt;span class="s"&gt;  output log_null&lt;/span&gt;
&lt;span class="s"&gt;&lt;span class="caps"&gt;EOD&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I then went into Vyatta configuration and changed a rule from alert to pass, committed,
changed back, committed, and &lt;code&gt;/etc/snort/snort.conf&lt;/code&gt; now had my syslog lines. I&amp;#8217;m now 
getting snort alerts to local3 in syslog, which is fed to my centralized log server. My
next project is to find or write something which will parse these logs, generate a daily
summary email, and maybe check them hourly and alert on any big changes. I also might just
cron an emailing of the output from Vyatta&amp;#8217;s show ips summary command. So far I have over 11,000 events logged in about 12&amp;nbsp;hours.&lt;/p&gt;</summary><category term="security"></category><category term="snort"></category><category term="syslog"></category><category term="vyatta"></category></entry><entry><title>Nagios check scripts</title><link href="http://blog.jasonantman.com/2010/03/nagios-check-scripts/" rel="alternate"></link><updated>2010-03-16T22:33:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2010-03-16:2010/03/nagios-check-scripts/</id><summary type="html">&lt;p&gt;Last week I added some of my Nagios check scripts to my &lt;a href="https://github.com/jantman/nagios-scripts"&gt;nagios-scripts
GitHub repository&lt;/a&gt;. Perhaps
they&amp;#8217;ll be of some use to some other&amp;nbsp;people&amp;#8230;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/nagios-scripts/blob/master/check_1wire_temps.php"&gt;check_1wire_temps.php&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;quick and dirty, built for one specific application, but a good
starting place for checking Dallas 1-wire temperatures via&amp;nbsp;&lt;span class="caps"&gt;OWFS&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/nagios-scripts/blob/master/check_802dot11.php"&gt;check_802dot11.php&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A script to check various things in the &lt;span class="caps"&gt;IEEE&lt;/span&gt;-&lt;span class="caps"&gt;802DOT11&lt;/span&gt; &lt;span class="caps"&gt;MIB&lt;/span&gt;, written
for Ubiquiti APs&amp;nbsp;(&lt;span class="caps"&gt;SNMP&lt;/span&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/nagios-scripts/blob/master/check_frogfoot.php"&gt;check_frogfoot.php&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A script to check some stuff from &lt;span class="caps"&gt;FROGFOOT&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;, also written for
Ubiquiti APs&amp;nbsp;(&lt;span class="caps"&gt;SNMP&lt;/span&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/nagios-scripts/blob/master/check_asterisk_iaxpeers"&gt;check_asterisk_iaxpeers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;a Python check script to parse the output of rasterisk for &lt;span class="caps"&gt;IAX&lt;/span&gt;
peer status and latency (includes perf data&amp;nbsp;output).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/nagios-scripts/blob/master/check_bacula_job.php"&gt;check_bacula_job.php&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A script to connect to the Bacula database and make sure a
specified job terminated &lt;span class="caps"&gt;OK&lt;/span&gt; and was run on&amp;nbsp;schedule.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/nagios-scripts/blob/master/check_docsis"&gt;check_docsis&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A script to check status and various metrics for cable modems
implementing the &lt;span class="caps"&gt;DOCSIS&lt;/span&gt; &lt;span class="caps"&gt;MIB&lt;/span&gt; (&lt;span class="caps"&gt;SNMP&lt;/span&gt;). Works with (at least) the
Motorola SurfBoard modems used by Cablevision (which use
192.168.100.1 on the &lt;span class="caps"&gt;LAN&lt;/span&gt;&amp;nbsp;side).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/nagios-scripts/blob/master/check_syslog_age.php"&gt;check_syslog_age.php&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A &lt;span class="caps"&gt;PHP&lt;/span&gt; script which checks (recursively) that the newest file under
a directory is no more than X seconds old. I use this for checking
my centralized syslog server, which has logs separated out in
&lt;code&gt;/var/log/HOSTS/hostname&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update 2011-01-31&lt;/strong&gt; - the
&lt;a href="https://github.com/jantman/nagios-scripts/blob/master/check_syslog_age.php"&gt;check_syslog_age.php&lt;/a&gt;
script was updated today to handle an error condition where stat() calls
in &lt;span class="caps"&gt;PHP&lt;/span&gt; fail on files larger than &lt;span class="caps"&gt;2GB&lt;/span&gt; on 32-bit&amp;nbsp;systems.&lt;/p&gt;</summary><category term="1-wire"></category><category term="asterisk"></category><category term="bacula"></category><category term="DOCSIS"></category><category term="Nagios"></category><category term="snmp"></category><category term="syslog"></category><category term="ubiquiti"></category></entry><entry><title>Project Announcement - PHPsa</title><link href="http://blog.jasonantman.com/2009/09/project-announcement-phpsa/" rel="alternate"></link><updated>2009-09-29T15:36:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2009-09-29:2009/09/project-announcement-phpsa/</id><summary type="html">&lt;p&gt;So, here&amp;#8217;s the &amp;#8220;official&amp;#8221; scoop on the new project that I&amp;#8217;m
planning/starting to work on. I&amp;#8217;m calling it PHPsa for now, and it&amp;#8217;s
going to (hopefully) be an integrated dashboard/portal for SysAdmins.
While there are a number of tools that fit into this general category
(perhaps with &lt;a href="http://www.alienvault.com/home.php?section=News"&gt;&lt;span class="caps"&gt;OSSIM&lt;/span&gt;&lt;/a&gt;
being the closest, though it&amp;#8217;s security-minded), I feel that there&amp;#8217;s a
real gap in terms of tool integration. My daily workflow, which includes
multiple trips to and correlation among Nagios, Cacti, &lt;span class="caps"&gt;DNS&lt;/span&gt;, &lt;span class="caps"&gt;DHCP&lt;/span&gt;,
Puppet, logs, and other tools really leaves something to be desired. So,
I&amp;#8217;m setting out to create a modular SysAdmin dashboard that unifies many
of the common SysAdmin-related tools into a modular&amp;nbsp;dashboard.&lt;/p&gt;
&lt;p&gt;The first overall design goals that I&amp;#8217;ve set&amp;nbsp;are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A modular, plugin-based architecture that allows admins to select
    which features/tools they want, and allows easy development of new&amp;nbsp;modules.&lt;/li&gt;
&lt;li&gt;Design with legacy tools in mind - easy ways to tie in to tools that
    weren&amp;#8217;t written with PHPsa in mind, both in terms of linking to
    information and gathering/unifying&amp;nbsp;information.&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;RBAC&lt;/span&gt;, including per-module rules and the possibility for a limited
    read-only view (client/user&amp;nbsp;mode).&lt;/li&gt;
&lt;li&gt;Use of data sources, specifically web-based/&lt;span class="caps"&gt;REST&lt;/span&gt; APIs where
    available, and databases otherwise, from existing tools with as
    little modification as&amp;nbsp;possible.&lt;/li&gt;
&lt;li&gt;Support for database abstraction, though I&amp;#8217;ll be using&amp;nbsp;MySQL.&lt;/li&gt;
&lt;li&gt;Eventually, implement &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds of pertinent&amp;nbsp;information.&lt;/li&gt;
&lt;li&gt;Balance Ajax/&lt;span class="caps"&gt;DHTML&lt;/span&gt; with the desire for important things to have
    canonical, static, bookmark-able&amp;nbsp;URLs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, here are some of the things that I&amp;#8217;m planning on integrating, with
obvious bias towards getting my own projects done before I integrate
pre-existing&amp;nbsp;tools:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://multibindadmin.jasonantman.com"&gt;MultiBindAdmin&lt;/a&gt;, my &lt;span class="caps"&gt;DNS&lt;/span&gt; and
    &lt;span class="caps"&gt;DHCP&lt;/span&gt; administration tool (specifically geared towards split-view &lt;span class="caps"&gt;DNS&lt;/span&gt;
    with the inside view behind&amp;nbsp;&lt;span class="caps"&gt;NAT&lt;/span&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rackman.jasonantman.com/"&gt;RackMan&lt;/a&gt;, my tool for mapping
    devices&amp;#8217; physical locations in racks (and tacking&amp;nbsp;patching).&lt;/li&gt;
&lt;li&gt;My simple config tool for
    &lt;a href="http://www.puppetlabs.com"&gt;Puppet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nagios.org/"&gt;Nagios&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.cacti.net/"&gt;Cacti&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Nathan Hubbard&amp;#8217;s &lt;a href="http://www.machdb.org/"&gt;MachDB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.bacula.org/en/"&gt;Bacula&lt;/a&gt; (monitoring/status&amp;nbsp;only).&lt;/li&gt;
&lt;li&gt;Syslog via &lt;a href="http://www.rsyslog.com/"&gt;rsyslog&lt;/a&gt; (or any other
    syslog-to-&lt;span class="caps"&gt;SQL&lt;/span&gt;&amp;nbsp;solution).&lt;/li&gt;
&lt;li&gt;Possibly a front-end to &lt;a href="http://www.google.com/analytics/"&gt;Google
    Analytics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Some of my custom scripts for graphing SpamAssassin, &lt;span class="caps"&gt;DNS&lt;/span&gt; queries,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;Some sort of Apache log analysis, like
    &lt;a href="http://www.mrunix.net/webalizer/"&gt;Webalizer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Mail log analysis, possibly
    &lt;a href="http://awstats.sourceforge.net/"&gt;AWstats&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the first big issues that I&amp;#8217;m going to&amp;nbsp;tackle:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;General layout. Specifically, how to handle a more-or-less
    consistent layout while integrating tools that weren&amp;#8217;t designed for
    PHPsa. I&amp;#8217;ll probably end up using iFrames (or even a frameset) for
    tools that don&amp;#8217;t integrate&amp;nbsp;well.&lt;/li&gt;
&lt;li&gt;How to correlate data/objects between different tools (i.e. how to
    display information from Nagios, Cacti, MultiBindAdmin and MachDB
    for a given&amp;nbsp;host?).&lt;/li&gt;
&lt;li&gt;Do I want to use a templating engine like
    &lt;a href="http://www.smarty.net/"&gt;Smarty&lt;/a&gt; or hand-code all of the&amp;nbsp;&lt;span class="caps"&gt;HTML&lt;/span&gt;?&lt;/li&gt;
&lt;li&gt;How will I handle&amp;nbsp;plugins?&lt;/li&gt;
&lt;li&gt;How much code do I want to re-write and how much can I use as-is
    from other tools? And, on a related note, how much existing data can
    I access easily from other tools, vs having to use grabber scripts
    that dump data in&amp;nbsp;MySQL?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Update 2010-02-03&lt;/strong&gt;: I think this may become a semi-official project
for me at $work, which means that I&amp;#8217;ll be able to dedicate quite a bit
more time to it. Unfortunately, it also means that I will, most likely,
have to give up Nathan Hubbard&amp;#8217;s &lt;a href="http://www.machdb.org/"&gt;MachDB&lt;/a&gt; in
favor of &lt;a href="http://www.ocsinventory-ng.org/"&gt;&lt;span class="caps"&gt;OCS&lt;/span&gt; Inventory &lt;span class="caps"&gt;NG&lt;/span&gt;&lt;/a&gt;, a more
mature project that already includes inventory support for Linux,
Windows and&amp;nbsp;Mac.&lt;/p&gt;</summary><category term="bind"></category><category term="cacti"></category><category term="dns"></category><category term="Nagios"></category><category term="PHPsa"></category><category term="Projects"></category><category term="puppet"></category><category term="rsyslog"></category><category term="sysadmin"></category><category term="syslog"></category></entry><entry><title>rsyslog on CentOS5</title><link href="http://blog.jasonantman.com/2009/09/rsyslog-on-centos5/" rel="alternate"></link><updated>2009-09-17T15:45:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2009-09-17:2009/09/rsyslog-on-centos5/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update July 2011&lt;/strong&gt; - We&amp;#8217;ve been using rsyslog for our centralized
syslog infrastructure at &lt;a href="http://services.rutgers.edu/"&gt;work&lt;/a&gt; (site
being redesigned at the moment) for about a year now. As a result, our
colleagues at &lt;a href="http://oss.rutgers.edu"&gt;Rutgers University Open System
Solutions&lt;/a&gt; have been nice enough to include
rsyslog in their &lt;a href="http://koji.rutgers.edu"&gt;koji&lt;/a&gt; build system. Updated
packages of rsyslog for CentOS 5 x86 and x86_64 are available
&lt;a href="http://koji.rutgers.edu/koji/buildinfo?buildID=2140"&gt;here&lt;/a&gt;. Please be
aware that they have some dependencies of specific &lt;span class="caps"&gt;RU&lt;/span&gt; versions. It&amp;#8217;s
probably best if you download the source &lt;span class="caps"&gt;RPM&lt;/span&gt; and build it yourself using
rpmbuild. The current &lt;a href="http://koji.rutgers.edu/koji/rpminfo?rpmID=14051"&gt;5.6.2 source
package&lt;/a&gt; includes a
CentOS 5 spec file and other related scripts. This &lt;span class="caps"&gt;RPM&lt;/span&gt; repository is
only open to the public as a courtesy, so please download once at most
and distribute it to your servers&amp;nbsp;yourself.&lt;/p&gt;
&lt;p&gt;Having finally setup my storage server (I know it&amp;#8217;s not much, but for me
starting with &lt;span class="caps"&gt;1TB&lt;/span&gt; is wonderful), I actually got around to redoing my
centralized logging infrastructure. Here&amp;#8217;s a small summary of what I
have to&amp;nbsp;handle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;logs from 15 hosts at 2 locations, including Cisco devices and a mix
    of syslog and syslog-ng Linux&amp;nbsp;boxen.&lt;/li&gt;
&lt;li&gt;Remote location logs forwarded to one server at remote location,
    then to centralized log server via &lt;span class="caps"&gt;SSH&lt;/span&gt; port&amp;nbsp;forwarding.&lt;/li&gt;
&lt;li&gt;48-hour retention of full iptables border firewall logs (\~&amp;nbsp;&lt;span class="caps"&gt;3GB&lt;/span&gt;/day).&lt;/li&gt;
&lt;li&gt;Future plans to have all logs stored in&amp;nbsp;MySQL.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;d previously had most of the boxes logging to an older host with low
disk space, but had to discontinue this due to lack of storage. Having
assessed the options, and with definite plans to log to a database, I
decided to go with &lt;a href="http://www.rsyslog.com"&gt;rsyslog&lt;/a&gt; for the centralized&amp;nbsp;host.&lt;/p&gt;
&lt;p&gt;Unfortunately, stable rsyslog is up to 4.4.x, with 5.x in development,
and the newest package I could find for CentOS was 2.something. So, I
set about building it from source. It was a *very* difficult build on
my machine (CentOS 5.3, 2.6.18-128.el5 #1 &lt;span class="caps"&gt;SMP&lt;/span&gt; i686). Unfortunately, I
don&amp;#8217;t have an &lt;span class="caps"&gt;RPM&lt;/span&gt; build environment setup, but here&amp;#8217;s how I accomplished&amp;nbsp;it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If not already done, &lt;code&gt;yum install rpmforge-release&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;yum install gnutls-devel gnutls libatomic\_ops-devel gcc43 java-1.6.0-openjdk-devel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download
    &lt;a href="http://rsyslog.com/Downloads-index-req-viewdownload-cid-1-orderby-dateD.phtml"&gt;rsyslog-4.5.2&lt;/a&gt;
    (currently Beta). Extract, &lt;code&gt;cd&lt;/code&gt; into the&amp;nbsp;directory.&lt;/li&gt;
&lt;li&gt;To test the performance difference from MySQL,
    &lt;code&gt;yum install php-pgsql postgresql postgresql-devel postgresql-libs postgresql-server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit the &lt;code&gt;configure&lt;/code&gt; script, add &lt;code&gt;-DHAVE\_ATOMIC\_BUILTINS&lt;/code&gt;
    to the &lt;code&gt;DEFS&lt;/code&gt; line (28936 in this&amp;nbsp;version).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export CC=/usr/bin/gcc43&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export CCDEPMODE="depmode=gcc4"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export CFLAGS="-O3 -march=i686"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;./configure --enable-mysql --enable-omtemplate --enable-gnutls --enable-pgsql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make &amp;amp;&amp;amp; make install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For my system, I used the &lt;code&gt;/etc/sysconfig/rsyslog&lt;/code&gt; and &lt;code&gt;/etc/init.d/rsyslog&lt;/code&gt;
from the 2.x rsyslog RPMs, with some modifications as&amp;nbsp;follows:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/etc/sysconfig/rsyslog&lt;/code&gt; &lt;em&gt;(comments have been removed to save space)&lt;/em&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# -c4   version 4 compatibility mode
# -x     disable DNS for remote messages (don&amp;#39;t want it to hang if DNS is down
# -4     IPv4 only
SYSLOGD_OPTIONS=&amp;quot;-c4 -x -4&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;/etc/init.d/rsyslog&lt;/code&gt; &lt;em&gt;(comments have been removed to save space)&lt;/em&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# rsyslog        Starts rsyslogd.&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="c"&gt;# chkconfig: - 12 88&lt;/span&gt;
&lt;span class="c"&gt;# description: Syslog is the facility by which many daemons use to log   &lt;/span&gt;
&lt;span class="c"&gt;# messages to various system log files.  It is a good idea to always   &lt;/span&gt;
&lt;span class="c"&gt;# run rsyslog.&lt;/span&gt;
&lt;span class="c"&gt;### &lt;span class="caps"&gt;BEGIN&lt;/span&gt; &lt;span class="caps"&gt;INIT&lt;/span&gt; &lt;span class="caps"&gt;INFO&lt;/span&gt;&lt;/span&gt;
&lt;span class="c"&gt;# Provides: $syslog&lt;/span&gt;
&lt;span class="c"&gt;# Required-Start: $local_fs $network $remote_fs&lt;/span&gt;
&lt;span class="c"&gt;# Required-Stop: $local_fs $network $remote_fs&lt;/span&gt;
&lt;span class="c"&gt;# Default-Stop: 0 1 2 3 4 5 6&lt;/span&gt;
&lt;span class="c"&gt;# Short-Description: Enhanced system logging and kernel message trapping daemons&lt;/span&gt;
&lt;span class="c"&gt;# Description: Rsyslog is an enhanced multi-threaded syslogd supporting,&lt;/span&gt;
&lt;span class="c"&gt;#              among others, MySQL, syslog/tcp, &lt;span class="caps"&gt;RFC&lt;/span&gt; 3195, permitted&lt;/span&gt;
&lt;span class="c"&gt;#              sender lists, filtering on any message part, and fine&lt;/span&gt;
&lt;span class="c"&gt;#              grain output format control.&lt;/span&gt;
&lt;span class="c"&gt;### &lt;span class="caps"&gt;END&lt;/span&gt; &lt;span class="caps"&gt;INIT&lt;/span&gt; &lt;span class="caps"&gt;INFO&lt;/span&gt;&lt;/span&gt;

&lt;span class="c"&gt;# Source function library.&lt;/span&gt;
. /etc/init.d/functions

&lt;span class="nv"&gt;&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

start&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt; -x /sbin/rsyslogd &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;exit &lt;/span&gt;5

        &lt;span class="c"&gt;# Do not start rsyslog when sysklogd is running&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e /var/run/syslogd.pid &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;                &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;$&amp;quot;Shut down sysklogd before you run rsyslog&amp;quot;&lt;/span&gt;;
                &lt;span class="nb"&gt;exit &lt;/span&gt;1;
        &lt;span class="k"&gt;fi&lt;/span&gt;

        &lt;span class="c"&gt;# Source config&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -f /etc/sysconfig/rsyslog &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then&lt;/span&gt;
                . /etc/sysconfig/rsyslog
        &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;                &lt;/span&gt;&lt;span class="nv"&gt;SYSLOGD_OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-m 0&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="k"&gt;        if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;&amp;quot;$SYSLOG_UMASK&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; ; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;              &lt;/span&gt;&lt;span class="nv"&gt;SYSLOG_UMASK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;077;
        &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;umask&lt;/span&gt; &lt;span class="nv"&gt;$SYSLOG_UMASK&lt;/span&gt;

        &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;$&amp;quot;Starting system logger: &amp;quot;&lt;/span&gt;
        daemon rsyslogd &lt;span class="nv"&gt;$SYSLOGD_OPTIONS&lt;/span&gt;
        &lt;span class="nv"&gt;&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt; -eq 0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch /var/lock/subsys/rsyslog
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
stop&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;$&amp;quot;Shutting down system logger: &amp;quot;&lt;/span&gt;
        killproc rsyslogd
        &lt;span class="nv"&gt;&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt; -eq 0 &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -f /var/lock/subsys/rsyslog
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
reload&lt;span class="o"&gt;()&lt;/span&gt;  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1
    &lt;span class="nv"&gt;syslog&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat /var/run/rsyslogd.pid 2&amp;gt;/dev/null&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;Reloading system logger...&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -n &lt;span class="s2"&gt;&amp;quot;${syslog}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -e /proc/&lt;span class="s2"&gt;&amp;quot;${syslog}&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;kill&lt;/span&gt; -&lt;span class="caps"&gt;HUP&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$syslog&amp;quot;&lt;/span&gt;;
        &lt;span class="nv"&gt;&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;    if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt; -ne 0 &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;failure
    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;        &lt;/span&gt;success
    &lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;$&lt;span class="caps"&gt;RETVAL&lt;/span&gt;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
rhstatus&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        status rsyslogd
&lt;span class="o"&gt;}&lt;/span&gt;
restart&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        stop
        start
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;$1&amp;quot;&lt;/span&gt; in
  start&lt;span class="o"&gt;)&lt;/span&gt;
        start
        ;;
  stop&lt;span class="o"&gt;)&lt;/span&gt;
        stop
        ;;
  restart&lt;span class="o"&gt;)&lt;/span&gt;
        restart
        ;;
  reload|force-reload&lt;span class="o"&gt;)&lt;/span&gt;
        reload
        ;;
  status&lt;span class="o"&gt;)&lt;/span&gt;
        rhstatus
        ;;
  condrestart&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;[&lt;/span&gt; -f /var/lock/subsys/rsyslog &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; restart &lt;span class="o"&gt;||&lt;/span&gt; :
        ;;
  *&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;$&amp;quot;Usage: $0 {start|stop|restart|reload|force-reload|condrestart}&amp;quot;&lt;/span&gt;
        &lt;span class="nb"&gt;exit &lt;/span&gt;2
&lt;span class="k"&gt;esac&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="nv"&gt;$?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;My rsyslog.conf file&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;# uncomment next line for debugging, use graphvis to see the graph
#$GenerateConfigGraph /root/rsyslog-graph.dot
$ModLoad imklog
$ModLoad imtcp
$ModLoad imudp
$ModLoad imuxsock

# template
$template RemoteHost,&amp;quot;/var/log/HOSTS/%HOSTNAME%/%$YEAR%/%$MONTH%/%$DAY%/%syslogfacility-text%.log&amp;quot;
# used for Cisco, vanilla syslog when we can&amp;#39;t parse host name
$template RemoteFromHost,&amp;quot;/var/log/HOSTS/%FROMHOST%/%$YEAR%/%$MONTH%/%$DAY%/%syslogfacility-text%.log&amp;quot;

# NOTE - we can&amp;#39;t bind UDP to a ruleset, so it enters the local RuleSet
#   and has to be dealt with here

$RuleSet local

# for cisco, vyatta - doesn&amp;#39;t send hostname, need to use IP manually
:fromhost, isequal, &amp;quot;192.168.0.99&amp;quot; ?RemoteFromHost
:fromhost, isequal, &amp;quot;192.168.0.99&amp;quot; ~
:fromhost, isequal, &amp;quot;192.168.0.103&amp;quot; ?RemoteFromHost
:fromhost, isequal, &amp;quot;192.168.0.103&amp;quot; ~
:fromhost, isequal, &amp;quot;192.168.0.97&amp;quot; ?RemoteFromHost
:fromhost, isequal, &amp;quot;192.168.0.97&amp;quot; ~
:fromhost, isequal, &amp;quot;192.168.0.111&amp;quot; ?RemoteFromHost
:fromhost, isequal, &amp;quot;192.168.0.111&amp;quot; ~
# anything from a remote host gets logged as such
:source, isequal, &amp;quot;&amp;quot; ?RemoteHost
:source, isequal, &amp;quot;&amp;quot; ~

#
# LOCAL LOGGING
#

kern.*                                                 /var/log/messages
*.info;mail.none;authpriv.none;cron.none                /var/log/messages
authpriv.*                                              /var/log/secure
mail.*                                                  -/var/log/maillog
cron.*                                                  /var/log/cron
*.emerg                                                 *
uucp,news.crit                                          /var/log/spooler
local7.*                                                /var/log/boot.log

# use the local RuleSet as default
$DefaultRuleset local

#
# BEGIN centralized logging stuff added 2009-09-16 by jantman
#

# define ruleset for remote logging
$RuleSet remote

*.* ?RemoteHost

# bind ruleset to tcp listener
$InputTCPServerBindRuleset remote
# and activate it:
$InputTCPServerRun 5000

$UDPServerRun 514
$UDPServerRun 5000

#
# END remote logging
#
&lt;/pre&gt;&lt;/div&gt;</summary><category term="centos"></category><category term="logging"></category><category term="rsyslog"></category><category term="syslog"></category></entry></feed>