<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog - surveillance</title><link href="https://blog.jasonantman.com/" rel="alternate"></link><link href="https://blog.jasonantman.com/feeds/tags/surveillance.atom.xml" rel="self"></link><id>https://blog.jasonantman.com/</id><updated>2018-05-06T20:13:00-04:00</updated><entry><title>Amcrest IP Camera FirstÂ Impressions</title><link href="https://blog.jasonantman.com/2018/05/amcrest-ip-camera-first-impressions/" rel="alternate"></link><published>2018-05-06T20:13:00-04:00</published><updated>2018-05-06T20:13:00-04:00</updated><author><name>Jason Antman</name></author><id>tag:blog.jasonantman.com,2018-05-06:/2018/05/amcrest-ip-camera-first-impressions/</id><summary type="html">&lt;p&gt;My first impressions on interfacing with Amcrest &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;cameras&lt;/p&gt;</summary><content type="html">&lt;!--- remove this next line to disable Table of Contents --&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#devices-and-purchase"&gt;Devices and&amp;nbsp;Purchase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initial-setup"&gt;Initial&amp;nbsp;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chrome-app"&gt;Chrome&amp;nbsp;App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api-and-digest-auth"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; and Digest Auth&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-digest-auth-removing-proxy"&gt;Python Digest-Auth-Removing&amp;nbsp;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#json-configuration-backups"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; Configuration&amp;nbsp;Backups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alarms-events-initial-research"&gt;Alarms / Events - Initial Research&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#snmp"&gt;&lt;span class="caps"&gt;SNMP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smtp"&gt;&lt;span class="caps"&gt;SMTP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#system-logs"&gt;System&amp;nbsp;logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gpl-compliance"&gt;&lt;span class="caps"&gt;GPL&lt;/span&gt;&amp;nbsp;Compliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#auto-maintain"&gt;Auto&amp;nbsp;Maintain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#status-and-next-steps"&gt;Status and Next&amp;nbsp;Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;#8217;m going to be moving to a new area at the end of the month and will be leaving my dogs home alone during the days I work in the office - and my home unattended - on a regular basis for the first time. While the neighborhood I&amp;#8217;m moving to seems safe, I wanted some peace of mind about both the security of my new home and the well-being of my dogs when I&amp;#8217;m out. While I&amp;#8217;ve set up a &lt;a href="https://blog.jasonantman.com/2016/01/raspberry-pi-security-system/"&gt;&lt;span class="caps"&gt;DIY&lt;/span&gt; RaspberryPi-based security system&lt;/a&gt; in a past apartment, that won&amp;#8217;t help knowing that my dogs are doing &lt;span class="caps"&gt;OK&lt;/span&gt; (and the house I&amp;#8217;m moving to isn&amp;#8217;t wired for a security system). While I may look into setting up a security system in the future (likely based on &lt;a href="https://en.wikipedia.org/wiki/Z-Wave"&gt;Z-Wave&lt;/a&gt; wireless components), I decided that some &lt;span class="caps"&gt;IP&lt;/span&gt;-based surveillance cameras are the best way to achieve my short-term need. I recently bought some of them, and want to share my&amp;nbsp;experience.&lt;/p&gt;
&lt;h1 id="devices-and-purchase"&gt;&lt;a class="toclink" href="#devices-and-purchase"&gt;Devices and&amp;nbsp;Purchase&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I started my search with the hardware compatibility lists of &lt;a href="http://www.lavrsen.dk/foswiki/bin/view/Motion/WorkingDevices"&gt;Motion&lt;/a&gt; and &lt;a href="https://wiki.zoneminder.com/Hardware_Compatibility_List"&gt;ZoneMinder&lt;/a&gt;, the most well-known (albeit rather aged) open source video motion detection projects. I figured that most likely I&amp;#8217;d be using one of these to detect and alert on motion; I&amp;#8217;ve used Motion before quite successfully but it is a daemon only whereas ZoneMinder offers a full web interface. The outcome of my research was that most decent modern &lt;span class="caps"&gt;IP&lt;/span&gt;-based surveillance cameras support the &lt;a href="https://en.wikipedia.org/wiki/ONVIF"&gt;&lt;span class="caps"&gt;ONVIF&lt;/span&gt;&lt;/a&gt; interoperability standard, and almost any camera that supports &lt;span class="caps"&gt;ONVIF&lt;/span&gt; and third-party clients (i.e. unencrypted video streams) should&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I decided that I&amp;#8217;d get three initial cameras for some tests: an indoor camera with remote pan and tilt to keep an eye on the dogs and two outdoor fixed cameras, one wireless and one wired with Power over Ethernet (PoE) support. I currently have a very good 5GHz wireless access point (a &lt;a href="https://www.ubnt.com/airmax/nanostationm/"&gt;Uniquiti NanoStation M&lt;/a&gt;) and a serviceable but nine-year-old 2.4 GHz 802.11b/g Ubiquiti PicoStation 2. Unfortunately, I&amp;#8217;ve been unable to find &lt;em&gt;any&lt;/em&gt; reasonably-priced 5GHz &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;cameras.&lt;/p&gt;
&lt;p&gt;My initial desire was to get only 1080p cameras, but I decided to try a 960p wireless model given my aged access point. After a few hours of browsing on Amazon I settled on buying the following three cameras, all of which claimed &lt;span class="caps"&gt;ONVIF&lt;/span&gt; support and support for third-party video management&amp;nbsp;systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B01G1U4MVA/"&gt;&lt;span class="caps"&gt;SV3C&lt;/span&gt; V-B01-&lt;span class="caps"&gt;1080PL&lt;/span&gt;&lt;/a&gt; 1080P wired outdoor camera with PoE&amp;nbsp;support&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B01I00987C/"&gt;Amcrest &lt;span class="caps"&gt;IPM&lt;/span&gt;-723W&lt;/a&gt; 2.4GHz wireless 960P outdoor camera (shipped with latest firmware, &lt;code&gt;2.400.AC02.15.R,build:2017-07-31&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B0145OQTPG/"&gt;Amcrest &amp;#8220;ProHD&amp;#8221; &lt;span class="caps"&gt;IP2M&lt;/span&gt;-841B&lt;/a&gt; 2.4GHz (or wired) 1080p indoor pan/tilt camera (shipped with latest firmware, &lt;code&gt;2.520.AC00.18.R,build:2017-06-29&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of them support wired Ethernet in addition to WiFi. They&amp;#8217;re all highly reviewed on Amazon with a number of positive reviews mentioning Linux. My choice of the Amcrest cameras was based largely on a number of very positive reviews from other people using Linux and/or leveraging their APIs and on the availability of a detailed &lt;a href="https://support.amcrest.com/hc/en-us/articles/232310528-Amcrest-HTTP-API-SDK"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; document&lt;/a&gt; on Amcrest&amp;#8217;s site. The Amcrest &lt;span class="caps"&gt;API&lt;/span&gt; document specifically mentioned &lt;span class="caps"&gt;HTTP&lt;/span&gt; Basic authentication, which I considered a plus since I could easily add the required headers in an Nginx reverse proxy and use my own authentication methods for remote&amp;nbsp;access.&lt;/p&gt;
&lt;p&gt;After unboxing the Amcrest cameras and experimenting with them a bit, I decided to return the &lt;span class="caps"&gt;SV3C&lt;/span&gt; camera unopened. It was clear to me that if I wanted to use Amcrest&amp;#8217;s &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;, it would make sense to stick with the cameras from one manufacturer. Since &lt;span class="caps"&gt;SV3C&lt;/span&gt; didn&amp;#8217;t even have any &lt;span class="caps"&gt;API&lt;/span&gt; documentation that I could find, Amcrest won. The rest of this post will discuss my initial exploration of the Amcrest&amp;nbsp;cameras.&lt;/p&gt;
&lt;h1 id="initial-setup"&gt;&lt;a class="toclink" href="#initial-setup"&gt;Initial&amp;nbsp;Setup&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;While Amcrest seemed to be well-reviewed, I&amp;#8217;m always very hesitant to put new devices on my network, especially if they&amp;#8217;re running opaque proprietary firmware. And even more so if they have &amp;#8220;cloud&amp;#8221; features (as Amcrest does) that imply remote access which I&amp;#8217;d need to trust the manufacturer to properly secure and allow me to disable. &lt;a href="https://blog.jessfraz.com/post/home-lab-is-the-dopest-lab/"&gt;Jess Frazelle&amp;#8217;s Home Lab blog post&lt;/a&gt;, along with some great reviews from my colleague &lt;a href="https://github.com/jniesen"&gt;jniesen&lt;/a&gt;, spurred me to plan replacing my almost-decade-old Ubiquiti access points with some new ones that support BSSIDs and 802.1q VLANs, but until I do I&amp;#8217;m still stuck with a single &lt;span class="caps"&gt;SSID&lt;/span&gt; and flat&amp;nbsp;network.&lt;/p&gt;
&lt;p&gt;So, my initial unboxing process for each camera was as&amp;nbsp;follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Plug in to my MacBook with a crossover cable and Wireshark running; power on the camera and record the wired Ethernet &lt;span class="caps"&gt;MAC&lt;/span&gt; address for the camera. Then power off the&amp;nbsp;camera.&lt;/li&gt;
&lt;li&gt;On my &lt;a href="http://www.vyos.io/"&gt;VyOS&lt;/a&gt; router, assign the camera&amp;#8217;s wired &lt;span class="caps"&gt;MAC&lt;/span&gt; a static &lt;span class="caps"&gt;IP&lt;/span&gt; and local&amp;nbsp;&lt;span class="caps"&gt;DNS&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Alter my firewall rules to reject all traffic from the camera to the &lt;span class="caps"&gt;WAN&lt;/span&gt;, so it can&amp;#8217;t phone home or send anything directly to the external&amp;nbsp;world.&lt;/li&gt;
&lt;li&gt;Plug the camera in to my switch and power it on. Wait a few minutes and then access the builtin &lt;span class="caps"&gt;HTTP&lt;/span&gt; web interface at the &lt;span class="caps"&gt;IP&lt;/span&gt; I&amp;nbsp;assigned.&lt;/li&gt;
&lt;li&gt;Log in with the default username/password (admin/admin) and change the&amp;nbsp;password.&lt;/li&gt;
&lt;li&gt;Browse through the &amp;#8220;setup&amp;#8221; portion of the &lt;span class="caps"&gt;UI&lt;/span&gt; and record some of the current/default settings and&amp;nbsp;information:&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Information&amp;#8221; -&amp;gt; &amp;#8220;Version&amp;#8221; - record all&amp;nbsp;versions&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Camera&amp;#8221; -&amp;gt; &amp;#8220;Video&amp;#8221; - record streaming and snapshot settings; change Overlay to the camera&amp;#8217;s hostname and the Sub Stream to &lt;span class="caps"&gt;MJPEG&lt;/span&gt;, &lt;span class="caps"&gt;VGA&lt;/span&gt;, 5&amp;nbsp;&lt;span class="caps"&gt;FPS&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Camera&amp;#8221; -&amp;gt; &amp;#8220;Audio&amp;#8221; (on ProHD) - record stream&amp;nbsp;information&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; &amp;#8220;&lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;IP&lt;/span&gt;&amp;#8221; - change hostname; record wireless &lt;span class="caps"&gt;MAC&lt;/span&gt;; disable&amp;nbsp;&lt;span class="caps"&gt;P2P&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; &amp;#8220;Connection&amp;#8221; - record all ports; ensure &lt;span class="caps"&gt;ONVIF&lt;/span&gt; authentication is&amp;nbsp;enabled&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; (&amp;#8220;&lt;span class="caps"&gt;DDNS&lt;/span&gt;&amp;#8221;, &amp;#8220;&lt;span class="caps"&gt;IP&lt;/span&gt; Filter&amp;#8221;, &amp;#8220;&lt;span class="caps"&gt;SMTP&lt;/span&gt;&amp;#8221;, &amp;#8220;UPnP&amp;#8221;) - ensure all are&amp;nbsp;disabled&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; &amp;#8220;&lt;span class="caps"&gt;SNMP&lt;/span&gt;&amp;#8221; (if present) - enable&amp;nbsp;v1&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; (&amp;#8220;Bonjour&amp;#8221;, &amp;#8220;Multicast&amp;#8221;, &amp;#8220;802.1x&amp;#8221;, &amp;#8220;QoS&amp;#8221;, &amp;#8220;HTTPs&amp;#8221;) - ensure all are&amp;nbsp;disabled&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;System&amp;#8221; -&amp;gt; &amp;#8220;General&amp;#8221; -&amp;gt; &amp;#8220;Date &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Time&amp;#8221; - enable&amp;nbsp;&lt;span class="caps"&gt;NTP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;System&amp;#8221; -&amp;gt; &amp;#8220;Export&amp;#8221; - export a configuration file and save&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Event&amp;#8221; - disable all of them for&amp;nbsp;now&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that, I added the wireless &lt;span class="caps"&gt;MAC&lt;/span&gt; address for the camera to my access point&amp;#8217;s &lt;span class="caps"&gt;ACL&lt;/span&gt; and then set up a static &lt;span class="caps"&gt;IP&lt;/span&gt;, local &lt;span class="caps"&gt;DNS&lt;/span&gt;, and outbound traffic reject the same way I did for the wired &lt;span class="caps"&gt;MAC&lt;/span&gt;. I then configured the WiFi connection in the camera&amp;#8217;s Setup &lt;span class="caps"&gt;UI&lt;/span&gt;, ensured it connected to the network properly, and unplugged the wired&amp;nbsp;Ethernet.&lt;/p&gt;
&lt;h1 id="chrome-app"&gt;&lt;a class="toclink" href="#chrome-app"&gt;Chrome&amp;nbsp;App&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;One thing I noted in the web &lt;span class="caps"&gt;UI&lt;/span&gt; in Chrome is the high-res H.264 video stream was unavailable, displaying a &amp;#8220;Please click here to download and install the plug-in&amp;#8221; link. I was amazingly happy to find that this link brought me to the &lt;a href="https://chrome.google.com/webstore/detail/amcrest-web-view/oddndbjhpcpopbebhonolceinkbnheih?hl=en-US"&gt;Amcrest Web View&lt;/a&gt; Chrome App, which actually works with Linux. The Chrome App really just seems to wrap the existing web &lt;span class="caps"&gt;UI&lt;/span&gt; while providing the required plug-in, but it works fine in Chrome on Linux. I&amp;#8217;m vaguely concerned about the Chrome App being another data exfiltration or phone-home avenue, but for initial testing I was willing to take that risk. The App worked quite nicely, streaming near-realtime and very fluid, high-&lt;span class="caps"&gt;FPS&lt;/span&gt; images from both the 960P and 1080P cameras over WiFi, and gave me smooth, natural control of the pan and tilt for the ProHD&amp;nbsp;camera.&lt;/p&gt;
&lt;h1 id="api-and-digest-auth"&gt;&lt;a class="toclink" href="#api-and-digest-auth"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; and Digest&amp;nbsp;Auth&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Next I wanted to dive right into the documented &lt;span class="caps"&gt;CGI&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;, and had even prepared a few curl commands for the basics (according to the &lt;a href="https://support.amcrest.com/hc/en-us/articles/232310528-Amcrest-HTTP-API-SDK"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; document&lt;/a&gt; on Amcrest&amp;#8217;s site) before I even got the cameras. Unfortunately, they all failed with 401 Unauthorized errors. After some investigation and a trip to the &lt;a href="https://amcrest.com/forum/technical-discussion-f3/"&gt;Amcrest Technical Forums&lt;/a&gt;, I found that recent firmware versions dropped support for Basic authentication in favor of only Digest. This was confirmed by &lt;a href="https://amcrest.com/forum/technical-discussion-f3/cgi-sdk-no-longer-functioning-on-17r--t2401.html"&gt;multiple&lt;/a&gt; &lt;a href="https://amcrest.com/forum/technical-discussion-f3/basic-http-auth-not-working-after-firmware-update--t2771.html"&gt;threads&lt;/a&gt; &lt;a href="https://amcrest.com/forum/technical-discussion-f3/http-api-authentication-via-url-t3899.html"&gt;on&lt;/a&gt; &lt;a href="https://amcrest.com/forum/technical-discussion-f3/authentication-examples--t7128.html"&gt;the&lt;/a&gt; forum. This was quite problematic for my plans, since &lt;a href="https://en.wikipedia.org/wiki/Digest_access_authentication"&gt;Digest authentication&lt;/a&gt; is significantly more complicated than Basic and relies on &lt;span class="caps"&gt;MD5&lt;/span&gt; hashes generated on the client that include various fields sent in the headers of the server 401 response. In short, there doesn&amp;#8217;t seem to be any common reverse proxy (I checked Nginx, Apache, Lighttpd, and HAproxy) that supports Digest authentication to the backend/upstream. So my plans of wrapping the cameras in my own security (&lt;span class="caps"&gt;TLS&lt;/span&gt; and client certificate authentication in Nginx, with Nginx adding the appropriate Basic auth headers during the proxy process) weren&amp;#8217;t working out so well - the best I could get is a combination of the authentication I enabled in Nginx, plus Digest authentication to each&amp;nbsp;stream.&lt;/p&gt;
&lt;p&gt;I spent the better part of two afternoons and evenings looking into this and trying to develop a workaround. The &lt;a href="https://amcrest.com/forum/technical-discussion-f3/cgi-sdk-no-longer-functioning-on-17r--t2401.html"&gt;main Amcrest forum thread&lt;/a&gt; about this didn&amp;#8217;t have a whole lot of information other than many frustrated customers broken by the latest firmware upgrade (without even a corresponding &lt;span class="caps"&gt;API&lt;/span&gt; documentation update; the latest &lt;span class="caps"&gt;API&lt;/span&gt; docs still listed support for both Basic and Digest) and a few people who received unhelpful support responses. I opened my own support ticket about the problem, stating that I&amp;#8217;d purchased the cameras based on the &lt;span class="caps"&gt;API&lt;/span&gt; documentation and planned to integrate them with a system that only supports Basic authentication. I received a response the next day, stating in&amp;nbsp;part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am sorry for the bad information you got about our cameras. You are correct, Basic Authentication is no longer supported on our &lt;span class="caps"&gt;IP&lt;/span&gt; Cameras, &lt;span class="caps"&gt;NVR&lt;/span&gt;&amp;#8217;s and &lt;span class="caps"&gt;DVR&lt;/span&gt;&amp;#8217;s since latest firmware&amp;nbsp;updates.&lt;/p&gt;
&lt;p&gt;This was an intended decision as our developer decided to move away from Basic Authentication due to major security concern. Our devices will work only on Digest Authentication from now on. We did suggest our product management team and developers to re-enable Basic Authentication as some sort of &amp;#8220;optional&amp;#8221; feature able to be disabled by the user. However, this suggestion was&amp;nbsp;dismissed.&lt;/p&gt;
&lt;p&gt;The best situation for you at this point is to send back the cameras as, as stated, they won&amp;#8217;t work with Basic&amp;nbsp;Authentication.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s worth pointing out at this point that the recent firmware versions for these cameras include &lt;span class="caps"&gt;HTTPS&lt;/span&gt; support, and even include support for either uploading your own &lt;span class="caps"&gt;TLS&lt;/span&gt; cert and key or generating a &lt;span class="caps"&gt;CSR&lt;/span&gt; on the camera and then uploading the signed certificate. &lt;span class="caps"&gt;TLS&lt;/span&gt; with Basic auth (i.e. &lt;span class="caps"&gt;API&lt;/span&gt; keys/tokens) is a widely accepted method in the world of public APIs, and would surely be sufficient for devices such as these cameras. In fact, Amcrest runs their own dynamic &lt;span class="caps"&gt;DNS&lt;/span&gt; service for (optional) remote access to cameras, so it should be relatively simple to leverage that and LetsEncrypt for automated certs. Instead - probably spurred on by the archaic &lt;span class="caps"&gt;ONVIF&lt;/span&gt; standard that specifies Digest authentication - they seem to be going the route of alleviating their &amp;#8220;major security concern&amp;#8221; by means of a 25-year-old authentication system based on &lt;span class="caps"&gt;MD5&lt;/span&gt; hashes, and likely quite easy to break offline given access to a successful authentication exchange and a &lt;span class="caps"&gt;GPU&lt;/span&gt;-based &lt;span class="caps"&gt;EC2&lt;/span&gt; instance (not to mention simple to&amp;nbsp;man-in-the-middle).&lt;/p&gt;
&lt;p&gt;So, being the obsessive person that I am, I started thinking about how to fix this. I went through the usual suspects for reverse proxying - Nginx, Apache, HAproxy, Lighttpd, etc. - and couldn&amp;#8217;t find any examples of existing solutions to handle Digest authentication for the upstream. While it would probably be &lt;em&gt;possible&lt;/em&gt;, most of my recent programming experience is in Python and Ruby with a handful of Groovy and &lt;span class="caps"&gt;JS&lt;/span&gt;, and none of those seemed to fit the bill. I spent a bit of time looking at simple &lt;span class="caps"&gt;HTTP&lt;/span&gt; proxy solutions in languages that I know (or at least sort-of know) and found the &lt;a href="https://github.com/nodejitsu/node-http-proxy"&gt;nodejitsu/node-http-proxy&lt;/a&gt; project. With a bit of experimentation I was able to get that working for the simple text-based &lt;span class="caps"&gt;API&lt;/span&gt; URLs but (as expected, looking at the source) it failed completely for the secondary &lt;span class="caps"&gt;MJPEG&lt;/span&gt; streams. I found and tried &lt;a href="https://github.com/legege/node-mjpeg-proxy"&gt;node-mjpeg-proxy&lt;/a&gt; next, but was unable to get it working&amp;nbsp;satisfactorily.&lt;/p&gt;
&lt;p&gt;After all of those experiments and research I decided that I should stop looking for an exsiting solution or magic bullet and go back to what I know best: Python. After only a few minutes more on Google, I stumbled on a complete gem in the form of a Flask snippet, &lt;a href="http://flask.pocoo.org/snippets/118/"&gt;Stream Proxy with Requests&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stream_with_context&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;path:url&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream_with_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_content&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="python-digest-auth-removing-proxy"&gt;&lt;a class="toclink" href="#python-digest-auth-removing-proxy"&gt;Python Digest-Auth-Removing&amp;nbsp;Proxy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting with the above snippet using &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; and &lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt; - two Python packages that I&amp;#8217;m quite familiar with - I was able to quickly add the Digest authentication option to the requests call and achieve a working, auth-less &lt;span class="caps"&gt;MJPEG&lt;/span&gt; stream from the camera. With a bit of tuning, I came up with a rough proof-of-concept that provided unauthenticated access to the &lt;span class="caps"&gt;MJPEG&lt;/span&gt; stream and &lt;span class="caps"&gt;CGI&lt;/span&gt;-based &lt;span class="caps"&gt;API&lt;/span&gt; (including snapshots and &lt;span class="caps"&gt;PTZ&lt;/span&gt; control) simultaneously via multiple workers. It&amp;#8217;s not amazing; running on my desktop the &lt;span class="caps"&gt;MJPEG&lt;/span&gt; stream suffers some pretty bad latency that gets even worse when other &lt;span class="caps"&gt;CGI&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; endpoints are used simultaneously (I suspect this may be a problem on the camera&amp;nbsp;itself).&lt;/p&gt;
&lt;p&gt;Note that this does not proxy either non-&lt;span class="caps"&gt;MJPEG&lt;/span&gt; streams (i.e. the high-resolution &lt;span class="caps"&gt;RSTP&lt;/span&gt; stream) or the built-in web &lt;span class="caps"&gt;UI&lt;/span&gt; itself (which relies on client-side javascript XMLHttpRequest and cookies for&amp;nbsp;login).&lt;/p&gt;
&lt;p&gt;For the time being I&amp;#8217;m not sure if I&amp;#8217;m even going to use this proxy, but for anyone who&amp;#8217;s interested, the code is &lt;a href="https://github.com/jantman/python-amcrest-noauth-proxy"&gt;on GitHub&lt;/a&gt; along with a ready-to-run &lt;a href="https://hub.docker.com/r/jantman/python-amcrest-noauth-proxy/"&gt;Docker image&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="json-configuration-backups"&gt;&lt;a class="toclink" href="#json-configuration-backups"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; Configuration&amp;nbsp;Backups&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;While looking into the Digest authentication changes, I used the configuration export/backup functionality (Export via the Setup web &lt;span class="caps"&gt;UI&lt;/span&gt;, or &lt;code&gt;/cgi-bin/Config.backup?action=All&lt;/code&gt; via the &lt;span class="caps"&gt;API&lt;/span&gt; for a more detailed config) to see if there was a chance that Digest/Basic was hidden somewhere in the config. It&amp;#8217;s not, but I was pleasantly surprised to see that the exported configuration file was plain and cleanly-deserializable &lt;span class="caps"&gt;JSON&lt;/span&gt; (even pretty-printed). This definitely makes it easier to back up configuration to a git repository and track changes over time, or make sweeping changes to defaults for provisioning new&amp;nbsp;cameras.&lt;/p&gt;
&lt;h1 id="api"&gt;&lt;a class="toclink" href="#api"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For the majority of the last five-plus years of my career, I&amp;#8217;ve worked almost exclusively with software and generally with modern, well-known systems and services. Coming from a ReST-ful world, the Amcrest cameras&amp;#8217; &lt;span class="caps"&gt;API&lt;/span&gt; was a bit of a shock and trip back in time for me. While the current version (2.12) of the &lt;span class="caps"&gt;API&lt;/span&gt; documentation calls it a &amp;#8220;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;#8221;, the filename of the previous version that I found (1.51) is much more accurate: &lt;a href="https://s3.amazonaws.com/amcrest-files/AMCREST_CGI_SDK_API.pdf"&gt;AMCREST_CGI_SDK_API.pdf&lt;/a&gt;. While functional, the &lt;span class="caps"&gt;API&lt;/span&gt; appears to be a minimum-effort project to wrap (likely existing) system tooling on the camera in some sort of &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. Some pertinent pieces of the &lt;span class="caps"&gt;API&lt;/span&gt; specification&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aside from &lt;span class="caps"&gt;RSTP&lt;/span&gt; streams, all paths are to &lt;span class="caps"&gt;CGI&lt;/span&gt; scripts - i.e. &lt;code&gt;/cgi-bin/mjpg/video.cgi&lt;/code&gt;, &lt;code&gt;/cgi-bin/configManager.cgi&lt;/code&gt;,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;Many of the paths use query parameters that sound like they map to command-line arguments, i.e. &lt;code&gt;/cgi-bin/configManager.cgi?action=getConfig&amp;amp;name=Snap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;While the &lt;span class="caps"&gt;API&lt;/span&gt; specification defines &lt;span class="caps"&gt;HTTP&lt;/span&gt; status codes including 200, 400, 404, and 500, it also &lt;em&gt;clearly&lt;/em&gt; states (with examples) that &amp;#8220;fits with syntax but an error occurs while the server handles it&amp;#8221; will result in a &lt;span class="caps"&gt;HTTP&lt;/span&gt; 200 with a body containing a plain text error&amp;nbsp;message.&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;API&lt;/span&gt; appears to use the &lt;span class="caps"&gt;POST&lt;/span&gt; verb for anything that uploads a file, and &lt;span class="caps"&gt;GET&lt;/span&gt; for everything else. URLs that result in configuration changes or pan/tilt/zoom commands are still &lt;span class="caps"&gt;GET&lt;/span&gt;&amp;nbsp;requests.&lt;/li&gt;
&lt;li&gt;For query parameters (which drive the majority of the &lt;span class="caps"&gt;API&lt;/span&gt;), various &lt;span class="caps"&gt;CGI&lt;/span&gt; paths use either logically-named parameters (e.g. &amp;#8220;channel&amp;#8221;, &amp;#8220;action&amp;#8221;, etc.) or generic ones (&amp;#8220;arg1&amp;#8221;, &amp;#8220;arg2&amp;#8221;, &amp;#8220;arg3&amp;#8221;,&amp;nbsp;etc.).&lt;/li&gt;
&lt;li&gt;While the &lt;span class="caps"&gt;JSON&lt;/span&gt; configuration file format was a welcome surprise, &lt;span class="caps"&gt;API&lt;/span&gt; endpoints that return textual responses (as opposed to image/video/audio) respond with line-based key/value pairs separated by equal&amp;nbsp;signs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I imagine that much of this is dictated by needing to support Amcrest&amp;#8217;s network video recorder products, and perhaps some of it is also dictated by their manufacturer Dahua (Amcrest&amp;#8217;s products seem to be running customized and branded Dahua software, and likely hardware too). While much of this &lt;span class="caps"&gt;API&lt;/span&gt; is simpler for me to work with than the &lt;span class="caps"&gt;SOAP&lt;/span&gt;- and &lt;span class="caps"&gt;WSDL&lt;/span&gt;-based &lt;span class="caps"&gt;ONVIF&lt;/span&gt; standard, I&amp;#8217;d still be much happier if the devices exposed a modern ReST/&lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;&lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;There &lt;em&gt;is&lt;/em&gt; a Python package, &lt;a href="http://python-amcrest.readthedocs.io/"&gt;python-amcrest&lt;/a&gt;, that claims to provide a native Python client for this &lt;span class="caps"&gt;CGI&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; but I haven&amp;#8217;t tried it&amp;nbsp;yet.&lt;/p&gt;
&lt;h1 id="alarms-events-initial-research"&gt;&lt;a class="toclink" href="#alarms-events-initial-research"&gt;Alarms / Events - Initial&amp;nbsp;Research&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;These cameras support a number of internal &amp;#8220;alarms&amp;#8221; for events such as motion detection (likely nowhere near as good as Motion or ZoneMinder), video loss, audio detection, failed logins, disk (optional &lt;span class="caps"&gt;SD&lt;/span&gt; card) missing, error or full, network disconnect or &lt;span class="caps"&gt;IP&lt;/span&gt; conflict, or external alarms (the ProHD has four analog relay input/output connections on the back that can be used for either external trigger inputs or outputs). I&amp;#8217;m not concerned with most of them and currently don&amp;#8217;t have &lt;span class="caps"&gt;SD&lt;/span&gt; cards in the cameras, but I am interested in the &amp;#8220;Video Tamper&amp;#8221; alarm that detects loss of picture such as when the lens is obstructed. So, I began a bit of research into what options were available for receiving these alarms. Of course I wasn&amp;#8217;t lucky enough to see a webhook or &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt;/&lt;span class="caps"&gt;POST&lt;/span&gt; delivery method, let alone &lt;span class="caps"&gt;SNS&lt;/span&gt; or &lt;span class="caps"&gt;SQS&lt;/span&gt;. The options for alarm handling are recording, triggering one of the relays (on the ProHD that supports them), taking a snapshot, sending email, or polling the &lt;span class="caps"&gt;API&lt;/span&gt; for alarm events. The ProHD also supposedly supports &lt;span class="caps"&gt;SNMP&lt;/span&gt; traps, though they&amp;#8217;re not explicitly listed as an event&amp;nbsp;action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Upon review of the &lt;span class="caps"&gt;API&lt;/span&gt; documentation, it appears that it&amp;#8217;s also possible to &amp;#8220;subscribe&amp;#8221; to events via &lt;span class="caps"&gt;HTTP&lt;/span&gt;/&lt;span class="caps"&gt;CGI&lt;/span&gt;. This &lt;span class="caps"&gt;API&lt;/span&gt; appears to be a &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; that responds with a &lt;code&gt;multipart/x-mixed-replace&lt;/code&gt; content-type and streams plaintext event descriptions to the client as they occur. The client must send keepalive data to the server every 1 to 60 seconds (helpfully, the doc states that the keepalive data can be the string &amp;#8220;keep&amp;nbsp;alive&amp;#8221;).&lt;/p&gt;
&lt;p&gt;Given those options, I decided that either &lt;span class="caps"&gt;SNMP&lt;/span&gt; or &amp;#8220;email&amp;#8221; (&lt;span class="caps"&gt;SMTP&lt;/span&gt;) would be the best bet for programmatically receiving the events and acting on&amp;nbsp;them.&lt;/p&gt;
&lt;h2 id="snmp"&gt;&lt;a class="toclink" href="#snmp"&gt;&lt;span class="caps"&gt;SNMP&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The latest firmware for the &lt;span class="caps"&gt;IPM&lt;/span&gt;-723W, &amp;#8220;15.R&amp;#8221;, doesn&amp;#8217;t appear to support &lt;span class="caps"&gt;SNMP&lt;/span&gt; at all; it&amp;#8217;s missing the &amp;#8220;Setup&amp;#8221; -&amp;gt; &amp;#8220;Network&amp;#8221; -&amp;gt; &amp;#8220;&lt;span class="caps"&gt;SNMP&lt;/span&gt;&amp;#8221; configuration that the ProHD running &amp;#8220;18.R&amp;#8221; software has. So it seems like &lt;span class="caps"&gt;SNMP&lt;/span&gt; isn&amp;#8217;t going to be a viable option for me but I wanted to explore it anyway. I enabled &lt;span class="caps"&gt;SNMP&lt;/span&gt; v1 with the default &amp;#8220;public&amp;#8221; read community and issued a quick &lt;code&gt;snmpwalk&lt;/code&gt;. There wasn&amp;#8217;t a whole lot aside from what I&amp;#8217;d expect to find on a typical Linux device (&lt;span class="caps"&gt;SNMP&lt;/span&gt;*-&lt;span class="caps"&gt;MIB&lt;/span&gt;, &lt;span class="caps"&gt;IF&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;, &lt;span class="caps"&gt;TCP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;, &lt;span class="caps"&gt;IP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;, etc.). The sum of the interesting parts&amp;nbsp;was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.10 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.1.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.11 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.1.2
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.12 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.13 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.2.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.14 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.2.2
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.15 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.16 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.17 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.18 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.19 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.20 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.21 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.22 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.23 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.24 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.25 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.10 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- System oidVersionInfo
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.11 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- System oidProductInfo
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.12 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- System oidSysetmInfo
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.13 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- network oidNetworkPort
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.14 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- network oidTcpIpInfo
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.15 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: RegularStreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.16 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: MDStreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.17 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: AlarmStreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.18 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Extra1StreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.19 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: VideoMotionInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.20 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: VideoLossInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.21 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: VideoBlindInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.22 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: LocalAlarmInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.23 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: NetworkAlarmTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.24 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: RecordMainStreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.25 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: PhysicalVolumeInfoTable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It appears that there are two sets of custom MIBs exposed, one from their manufacturer Dahua and another presumably from Amcrest and claiming to be exposed at &amp;#8220;.0.1&amp;#8221; (ccitt.1). I&amp;#8217;ve been completely unable to get anything out of the Amcrest MIBs (sysORID&amp;#8217;s 15 through 25; ccitt.1) and have presumed them to be broken; the &lt;a href="https://amcrest.com/forum/technical-discussion-f3/snmp-t1045.html"&gt;one thread on the Amcrest forums&lt;/a&gt; about this seems to concur. For the Dahua OIDs, neither Amcrest nor Dahua appear to publish the MIBs but thanks to a &lt;a href="https://github.com/librenms/librenms/issues/8126"&gt;LibreNMS issue&lt;/a&gt;, &lt;a href="https://ipcamtalk.com/threads/snmp-mib.25434/"&gt;IPcamTalk forum thread&lt;/a&gt; and &lt;a href="https://www.reddit.com/r/homedefense/comments/7n0bhj/dahua_nvr_looking_for_snmp_mib_files/"&gt;reddit post&lt;/a&gt; I was able to find them. The information I got from walking that &lt;span class="caps"&gt;OID&lt;/span&gt; tree with the appropriate &lt;span class="caps"&gt;MIB&lt;/span&gt; from those links didn&amp;#8217;t prove terribly&amp;nbsp;useful:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::softwareRevision.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 2.520.&lt;span class="caps"&gt;AC00&lt;/span&gt;.18.R
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::hardwareRevision.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 1.00
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::videoChannel.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::alarmInput.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::alarmOutput.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::serialNumber.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: &lt;span class="caps"&gt;AMC00056485D24AAF8&lt;/span&gt;
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::systemVersion.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 2.520.0000.18, Build Date:2017-06-29
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::deviceType.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: &lt;span class="caps"&gt;IP2M&lt;/span&gt;-841B
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::deviceClass.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: &lt;span class="caps"&gt;IPC&lt;/span&gt;
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::deviceStatus.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::machineName.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: AMC00056_24AAF8
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::cpuUsage.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 70
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::lastestEvent.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: videoBlindEvent
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::encodeNo.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::tcpPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 37777
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::udpPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 37778
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::httpPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 80
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::rtspPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 554
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::maxConnectNum.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 10
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::httpsPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 443
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::getIpmode.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::macAddr.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 9c:8e:cd:xx:xx:xx
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::ipVersion.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::subnetMast.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 255.255.255.0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::defaultGateway.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 192.168.0.1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::preferredDns.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 192.168.0.1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::alternateDns.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 1.0.0.1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::ipAddr.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 192.168.0.60
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::localAlarmIndex.1 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::networkAlarmIndex.1 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So&amp;#8230; nothing terribly interesting. I&amp;#8217;m planning on seeing what I can get from the &lt;span class="caps"&gt;SNMP&lt;/span&gt; traps, but since only one of my cameras supports them (and they&amp;#8217;re &lt;span class="caps"&gt;UDP&lt;/span&gt;) I&amp;#8217;m not planning on using them for actually receiving&amp;nbsp;events/alarms.&lt;/p&gt;
&lt;h2 id="smtp"&gt;&lt;a class="toclink" href="#smtp"&gt;&lt;span class="caps"&gt;SMTP&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With &lt;span class="caps"&gt;SNMP&lt;/span&gt; out of the running for receiving alarms, I turned to &lt;span class="caps"&gt;SMTP&lt;/span&gt;. The configuration page I was greeted with, as well as its pop-up help page, left me slightly confused and&amp;nbsp;unsettled:&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/amcrest_smtp_config.png"&gt;&lt;img alt="screenshot of Amcrest camera SMTP configuration page and help pop-up" src="/GFX/amcrest_smtp_config_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I finally muddled through the options and poor translation - checking the &amp;#8220;Login Anonymously&amp;#8221; checkbox directly above the &lt;span class="caps"&gt;SMTP&lt;/span&gt; username and password actually enables authentication, i.e. disables non-&lt;span class="caps"&gt;AUTH&lt;/span&gt;/anonymous &lt;span class="caps"&gt;SMTP&lt;/span&gt; - I found that support for anonymous &lt;span class="caps"&gt;SMTP&lt;/span&gt; (i.e. without &lt;span class="caps"&gt;AUTH&lt;/span&gt;) is completely broken. When setting unchecking the &amp;#8220;Login anonymously&amp;#8221; box (i.e. no &lt;span class="caps"&gt;AUTH&lt;/span&gt;), the &lt;span class="caps"&gt;UI&lt;/span&gt; displays the same &amp;#8220;Email test failed&amp;#8221; error message as with bad credentials, but (per Wireshark/tcpdump) it never actually sends &lt;em&gt;any&lt;/em&gt; traffic to the &lt;span class="caps"&gt;SMTP&lt;/span&gt; server at all. I found a &lt;a href="https://amcrest.com/forum/technical-discussion-f3/email-test-always-fails-brand-new-camera-t1104-s10.html"&gt;forum thread&lt;/a&gt; going back &lt;strong&gt;almost two years&lt;/strong&gt; confirming&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;I quickly hacked together a &lt;span class="caps"&gt;SMTP&lt;/span&gt; server that accepts any credentials and prints the message to &lt;span class="caps"&gt;STDOUT&lt;/span&gt; (based on &lt;a href="https://github.com/bcoe/secure-smtpd"&gt;secure-smtpd&lt;/a&gt;), pointed the camera&amp;#8217;s &lt;span class="caps"&gt;SMTP&lt;/span&gt; settings to it, and then threw a black shirt over the lens of the camera. Within a minute or so, I got the following message via my dummy &lt;span class="caps"&gt;SMTP&lt;/span&gt;&amp;nbsp;server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Date: Sun, 06 May 2018 15:28:45 -0600
From: &amp;lt;&amp;gt;
To: &amp;lt;jason@jasonantman.com&amp;gt;
Subject: =?&lt;span class="caps"&gt;UTF&lt;/span&gt;-8?B?SVBDIE1lc3NhZ2U=?=
&lt;span class="caps"&gt;MIME&lt;/span&gt;-Version: 1.0
Content-type: multipart/mixed;boundary=&amp;quot;======DAHUA_TECH======&amp;quot;

This is a multi-part message in &lt;span class="caps"&gt;MIME&lt;/span&gt; format.

--======DAHUA_TECH======
Content-Type: text/plain;
        charset=&lt;span class="caps"&gt;UTF&lt;/span&gt;-8
Content-Transfer-Encoding: base64

QWxhcm0gRXZlbnQ6IFRhbXBlciBEZXRlY3QNCkFsYXJtIElucHV0IENoYW5uZWw6IDENCkFsYXJt
IFN0YXJ0IFRpbWUoRC9NL1kgSDpNOlMpOiAwNi8wNS8yMDE4IDE1OjI4OjQwDQpBbGFybSBEZXZp
Y2UgTmFtZTogQU1DMDAwNTZfMjRBQUY4DQpBbGFybSBOYW1lOiANCklQIEFkZHJlc3M6IDE5Mi4x
NjguMC42MA0K



--======DAHUA_TECH======
Content-Type: application/octet-stream;
        name=&amp;quot;20180506152840423ch01.jpg&amp;quot;
Content-Disposition: attachment;
        filename=&amp;quot;20180506152840423ch01.jpg&amp;quot;
Content-Transfer-Encoding: base64
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second attachment is a full 1920x1080 snapshot of the video. I was a bit confused to see the &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 base64-encoded subject, but the base64-decoded Subject is &amp;#8220;&lt;span class="caps"&gt;IPC&lt;/span&gt; Message&amp;#8221; and body text&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Alarm Event: Tamper Detect
Alarm Input Channel: 1
Alarm Start Time(D/M/Y H:M:S): 06/05/2018 15:28:40
Alarm Device Name: AMC00056_24AAF8
Alarm Name:
&lt;span class="caps"&gt;IP&lt;/span&gt; Address: 192.168.0.60
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the only alarm/event I really care about is loss of picture, and motion detection software should be able to handle the same task, I&amp;#8217;m going to completely ignore the alarm/event features for now and focus on the camera solely as a video&amp;nbsp;source.&lt;/p&gt;
&lt;h1 id="system-logs"&gt;&lt;a class="toclink" href="#system-logs"&gt;System&amp;nbsp;logs&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The cameras keep rudimentary &amp;#8220;system logs&amp;#8221; which include events (e.g. video tamper/video loss) as well as login/logout from the web &lt;span class="caps"&gt;UI&lt;/span&gt; as well as &lt;span class="caps"&gt;API&lt;/span&gt;, configuration saves, and &amp;#8220;Set Time&amp;#8221; events which perplex me as they show web &lt;span class="caps"&gt;UI&lt;/span&gt; client IPs as the source. These logs are available via a searchable table in the web &lt;span class="caps"&gt;UI&lt;/span&gt;, as well as &lt;span class="caps"&gt;CGI&lt;/span&gt; access to either page through logs filtered by date/time or return a &amp;#8220;log backup&amp;#8221; file of all logs between a given start and end time. Unfortunately, they don&amp;#8217;t support syslog or any other remote log&amp;nbsp;aggregation.&lt;/p&gt;
&lt;h1 id="gpl-compliance"&gt;&lt;a class="toclink" href="#gpl-compliance"&gt;&lt;span class="caps"&gt;GPL&lt;/span&gt;&amp;nbsp;Compliance&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Between the &lt;span class="caps"&gt;SNMP&lt;/span&gt; output and nmap results, as well as some other information exposed in the documentation and user interface, I&amp;#8217;m certain that these devices are running Linux and &lt;a href="https://www.ffmpeg.org/"&gt;FFmpeg&lt;/a&gt; (LGPLv2). I&amp;#8217;ve also seen some things that make it highly likely that they&amp;#8217;re also running &lt;a href="https://busybox.net/"&gt;busybox&lt;/a&gt; (GPLv2) and the other common embedded Linux utilities. However, I was unable to find any open source license information or source code offer in the packaging and printed documentation that came with either camera, or on Amcrest&amp;#8217;s website or user documentation. I&amp;#8217;ve posted a &lt;a href="https://amcrest.com/forum/technical-discussion-f3/source-code-availability--t8163.html"&gt;thread&lt;/a&gt; in Amcrest&amp;#8217;s technical discussion forums inquiring about this but don&amp;#8217;t expect much response from them. If I have time, I may try downloading one of the firmware images and doing some simple tests like running it through &lt;code&gt;strings&lt;/code&gt; to see if I can spot any well-known copyright headers. But as far as I can&amp;nbsp;tell,&lt;/p&gt;
&lt;h1 id="auto-maintain"&gt;&lt;a class="toclink" href="#auto-maintain"&gt;Auto&amp;nbsp;Maintain&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The cameras both came out-of-the-box with the &amp;#8220;Auto maintain&amp;#8221; feature enabled, which&amp;#8230; reboots the cameras automatically once a week. By default, on Thursday mornings just after 3am&amp;nbsp;local.&lt;/p&gt;
&lt;p&gt;Having spent some time in the past developing embedded Linux network devices, this does &lt;em&gt;not&lt;/em&gt; give me a terribly confident feeling about the&amp;nbsp;software.&lt;/p&gt;
&lt;h1 id="status-and-next-steps"&gt;&lt;a class="toclink" href="#status-and-next-steps"&gt;Status and Next&amp;nbsp;Steps&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To wrap up, I currently have two Amcrest &lt;span class="caps"&gt;IP&lt;/span&gt; cameras running on my home network; one looking out the front window, and one (indoor pan/tilt) overlooking my dogs&amp;#8217; crates. Now that I have them configured for the basics, I&amp;#8217;m going to attempt to ignore Amcrest&amp;#8217;s irritating software and focus on the cameras solely as video sources. My next steps - hopefully in a follow-up post not too long from now - will&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evaluation of Linux-based video surveillance recording/streaming/motion detection software, and choosing one to use. This will likely come down to choosing between something with an existing multi-camera web interface (ZoneMinder, or perhaps one of the newer variants) or something to handle motion detection only (Motion, or a modern variant) and cobbling together a simple web &lt;span class="caps"&gt;UI&lt;/span&gt; for streaming and event&amp;nbsp;viewing.&lt;/li&gt;
&lt;li&gt;Experimenting with using &lt;span class="caps"&gt;ONVIF&lt;/span&gt; instead of the &lt;span class="caps"&gt;CGI&lt;/span&gt;&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;Expermenting with FFmpeg or something else to restream the video instead of trying to remove authentication in a&amp;nbsp;proxy.&lt;/li&gt;
&lt;li&gt;Possibly using &lt;a href="http://python-amcrest.readthedocs.io/"&gt;python-amcrest&lt;/a&gt; as a wrapper around the &lt;span class="caps"&gt;CGI&lt;/span&gt;&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;Figuring out a system to notify me of important events such as motion, video loss, or connectivity loss to a&amp;nbsp;camera.&lt;/li&gt;
&lt;li&gt;The cameras support &lt;span class="caps"&gt;SD&lt;/span&gt; cards and a built-in simple &lt;span class="caps"&gt;DVR&lt;/span&gt; feature. I may get cards for them and configure them to record on network connection loss, just as a&amp;nbsp;test.&lt;/li&gt;
&lt;/ul&gt;</content><category term="amcrest"></category><category term="camera"></category><category term="security"></category><category term="surveillance"></category><category term="video"></category></entry></feed>