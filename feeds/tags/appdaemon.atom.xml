<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog - AppDaemon</title><link href="https://blog.jasonantman.com/" rel="alternate"></link><link href="https://blog.jasonantman.com/feeds/tags/appdaemon.atom.xml" rel="self"></link><id>https://blog.jasonantman.com/</id><updated>2018-07-15T07:38:00-04:00</updated><entry><title>Better Logging for AppDaemonÂ Apps</title><link href="https://blog.jasonantman.com/2018/07/better-logging-for-appdaemon-apps/" rel="alternate"></link><published>2018-07-15T07:38:00-04:00</published><updated>2018-07-15T07:38:00-04:00</updated><author><name>Jason Antman</name></author><id>tag:blog.jasonantman.com,2018-07-15:/2018/07/better-logging-for-appdaemon-apps/</id><summary type="html">&lt;p&gt;A small Python class I wrote to give AppDaemon apps more Pythonic&amp;nbsp;logging.&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I briefly mentioned in my last post, &lt;a href="/2018/07/ip-camera-home-security-and-automation-update/"&gt;&lt;span class="caps"&gt;IP&lt;/span&gt; Camera, Home Security and Automation Update&lt;/a&gt;, I&amp;#8217;ve begun using the &lt;a href="https://www.home-assistant.io/"&gt;HomeAssistant&lt;/a&gt; project for home automation and also to act as the brain for my &lt;span class="caps"&gt;DIY&lt;/span&gt; alarm system. The logic behind some of this is somewhat complex, so rather than try to use HomeAssistant&amp;#8217;s &lt;span class="caps"&gt;YAML&lt;/span&gt;-based automation configuration for all of it, I&amp;#8217;ve implemented the alarm logic using AppDaemon. &lt;a href="http://appdaemon.readthedocs.io/en/latest/"&gt;AppDaemon&lt;/a&gt; is a Python daemon that integrates with HomeAssistant&amp;#8217;s &lt;span class="caps"&gt;API&lt;/span&gt; and message/event bus, and allows standalone Python classes (&amp;#8220;apps&amp;#8221;) to operate like HomeAssistant automations - be triggered by events or state change, access internal state and attributes, call services, and control anything that HomeAssistant can control. For someone with at least a basic working knowledge of Python, this makes it much easier to write complex conditional logic than attempting to use&amp;nbsp;&lt;span class="caps"&gt;YAML&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;However, when I wrote my first AppDaemon app, I was quite frustrated by the built-in logging system. The &lt;a href="http://appdaemon.readthedocs.io/en/latest/APPGUIDE.html#writing-to-logfiles"&gt;documentation&lt;/a&gt; explains that AppDaemon uses two log files by default, &amp;#8220;general&amp;#8221; and &amp;#8220;error&amp;#8221;, and that each AppDaemon app (subclass of &lt;code&gt;appdaemon.plugins.hass.hassapi.Hass&lt;/code&gt;) can log to them using &lt;code&gt;self.log()&lt;/code&gt; and &lt;code&gt;self.error()&lt;/code&gt; convenience methods. So far this sounds fine. However, looking at the &lt;span class="caps"&gt;API&lt;/span&gt; documentation for these &lt;a href="http://appdaemon.readthedocs.io/en/latest/APIREFERENCE.html#log"&gt;log()&lt;/a&gt; and &lt;a href="http://appdaemon.readthedocs.io/en/latest/APIREFERENCE.html#error"&gt;error()&lt;/a&gt; methods, it becomes apparent that the only arguments they take are a string &lt;code&gt;message&lt;/code&gt; and a log level that defaults to &lt;code&gt;INFO&lt;/code&gt;. Unlike the ubiquitous logging methods of the &lt;a href="https://docs.python.org/3/library/logging.html#logger-objects"&gt;Python standard library&lt;/a&gt;, they don&amp;#8217;t accept a message with percent-formatting placeholders and a list of arguments, meaning that the message string needs to be formatted in the logging call&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;Another annoyance is the fixed logging format that includes only the timestamp, log level, app name, and message; when I&amp;#8217;m developing and debugging code I often find it useful to include at least the source module and line number in the log message. At first I tried to alter the logging formatter in use by AppDaemon, but that gave some strange results because it turns out that AppDaemon doesn&amp;#8217;t actually use a logging format, but rather in the &lt;a href="https://github.com/home-assistant/appdaemon/blob/e04820aafafe840fb4be7a8bef1996b70e62506f/appdaemon/utils.py#L143-L160"&gt;appdaemon.utils.log()&lt;/a&gt; function interpolates the timestamp, level and app name directly into the message and passes that to&amp;nbsp;logging.&lt;/p&gt;
&lt;p&gt;Furthermore, and even more bothersome during development, there&amp;#8217;s no way to enable debug-level logging on a per-app basis. Logging level is controlled by a command line flag (&lt;code&gt;-D&lt;/code&gt;) to &lt;code&gt;appdaemon&lt;/code&gt; itself, which means that debug logging is all-or-nothing for both AppDaemon itself and all apps. I found a &lt;a href="https://community.home-assistant.io/t/appdaemon-debug-mode/9703"&gt;forum thread&lt;/a&gt; complaining about this and also a &lt;a href="https://github.com/home-assistant/appdaemon/issues/45"&gt;closed GitHub issue&lt;/a&gt; looking for a better&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;So, I came up with my own solution to this in the form of my &lt;a href="https://github.com/jantman/home-automation-configs/blob/9c196f1e552fc9fbdfe15f2e27a7275bca24f167/appdaemon/apps/sane_app_logging.py"&gt;sane_app_logging.py&lt;/a&gt; module and the &lt;a href="https://github.com/jantman/home-automation-configs/blob/9c196f1e552fc9fbdfe15f2e27a7275bca24f167/appdaemon/apps/sane_app_logging.py"&gt;SaneAppLogging&lt;/a&gt; mixin class in it. All I need to do is add &lt;code&gt;SaneAppLogging&lt;/code&gt; to the list of classes my app inherits from and add a call to &lt;code&gt;self._setup_logging(self.__class__.__name__, False)&lt;/code&gt; at the beginning of the &lt;code&gt;initialize()&lt;/code&gt; method. What this gets me&amp;nbsp;is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;self._log.(debug|info|warning|error|critical|log)&lt;/code&gt; methods that pass directly through to the standard library logging methods, including args and kwargs (and therefore support for log messages with percent-formatting of&amp;nbsp;args).&lt;/li&gt;
&lt;li&gt;Log message formatting for all of AppDaemon that includes the filename, line number and function name (&lt;code&gt;"[%(levelname)s %(filename)s:%(lineno)s - %(name)s.%(funcName)s() ] %(message)s"&lt;/code&gt;). A large portion of the code in my &lt;code&gt;sane_app_logging.py&lt;/code&gt; module is dedicated to finding the proper stack frame so that source location is correct even with the wrapper in&amp;nbsp;place.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Runtime&lt;/em&gt; toggling of &amp;#8220;debug-as-info&amp;#8221; logging. To get around AppDaemon&amp;#8217;s global log levels and the requirement of enabling debugging at AppDaemon start and for all running code, apps using &lt;code&gt;SaneAppLogging&lt;/code&gt; listen for a &lt;code&gt;LOGWRAPPER_SET_DEBUG&lt;/code&gt; event from HomeAssistant. When received this event toggles a specific app class to log all &lt;code&gt;.debug()&lt;/code&gt; messages at &lt;span class="caps"&gt;INFO&lt;/span&gt; level instead, allowing me to selectively turn on and off debug logging on a single app at&amp;nbsp;runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event payloads for debug-as-info toggling are quite simple, a dictionary with two keys: &lt;code&gt;app_class&lt;/code&gt; and &lt;code&gt;debug_value&lt;/code&gt;. &lt;code&gt;app_class&lt;/code&gt; should be set to the name of the class (App) we want to change, and &lt;code&gt;debug_value&lt;/code&gt; a boolean. When True, any messages logged via &lt;code&gt;self._log.debug()&lt;/code&gt; will &lt;a href="https://github.com/jantman/home-automation-configs/blob/9c196f1e552fc9fbdfe15f2e27a7275bca24f167/appdaemon/apps/sane_app_logging.py#L100-L102"&gt;actually be logged&lt;/a&gt; via &lt;code&gt;self._log.info()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So far this seems to be working quite well for me, and allowing me to have a much better experience with developing, debugging and testing AppDaemon apps. Perhaps it will be useful to someone else as&amp;nbsp;well.&lt;/p&gt;</content><category term="AppDaemon"></category><category term="HomeAssistant"></category><category term="automation"></category><category term="python"></category><category term="logging"></category></entry></feed>