<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Jason Antman's Blog - perl</title><link>https://blog.jasonantman.com/</link><description></description><lastBuildDate>Wed, 17 Oct 2012 05:00:00 -0400</lastBuildDate><item><title>Readable Nagios Log Timestamps</title><link>https://blog.jasonantman.com/2012/10/readable-nagios-log-timestamps/</link><description>&lt;p&gt;If you&amp;#8217;re like me and most humans, the Nagios logfile timestamp (a unix
timestamp) isn&amp;#8217;t terribly useful when trying to grep through the logs
and correlate&amp;nbsp;events:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;#&lt;/span&gt; head -2 nagios.log
&lt;span class="go"&gt;[1350360000] &lt;span class="caps"&gt;LOG&lt;/span&gt; &lt;span class="caps"&gt;ROTATION&lt;/span&gt;: &lt;span class="caps"&gt;DAILY&lt;/span&gt;&lt;/span&gt;
&lt;span class="go"&gt;[1350360000] &lt;span class="caps"&gt;LOG&lt;/span&gt; &lt;span class="caps"&gt;VERSION&lt;/span&gt;: 2.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;#8217;s a nifty Perl one-liner that you …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 17 Oct 2012 05:00:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-10-17:/2012/10/readable-nagios-log-timestamps/</guid><category>icinga</category><category>Nagios</category><category>perl</category><category>timestamp</category></item><item><title>Tools for watching apache httpd and memcached</title><link>https://blog.jasonantman.com/2012/06/tools-for-watching-apache-httpd-and-memcached/</link><description>&lt;p&gt;Recently I was working on a code release on a site running &lt;span class="caps"&gt;PHP&lt;/span&gt; on
&lt;a href="http://httpd.apache.org/"&gt;Apache httpd&lt;/a&gt;, and using
&lt;a href="http://memcached.org/"&gt;memcached&lt;/a&gt;. Without getting into specifics, we
had a number of issues that were both Apache and memcached problems, and
little visibility into them as it was running on an older server without …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 26 Jun 2012 13:46:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-06-26:/2012/06/tools-for-watching-apache-httpd-and-memcached/</guid><category>apache</category><category>memcached</category><category>perl</category><category>top</category><category>troubleshooting</category></item><item><title>Script to Chart Intervals Between Problem and Recovery from Nagios/Icinga Log Files</title><link>https://blog.jasonantman.com/2012/05/script-to-chart-intervals-between-problem-and-recovery-from-nagiosicinga-log-files/</link><description>&lt;p&gt;At work, we use &lt;a href="http://www.icinga.org"&gt;Icinga&lt;/a&gt; (a fork of
&lt;a href="http://nagios.org/"&gt;Nagios&lt;/a&gt;) for monitoring. We have a few services
which are restarted or otherwise poked by event handlers, but the
recovery takes a while - so we often get paged for problems which
recover in a few minutes. I wrote a small perl script …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Thu, 31 May 2012 13:54:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-05-31:/2012/05/script-to-chart-intervals-between-problem-and-recovery-from-nagiosicinga-log-files/</guid><category>chart</category><category>icinga</category><category>monitoring</category><category>Nagios</category><category>perl</category></item><item><title>Creating RPMs from Perl CPAN Modules</title><link>https://blog.jasonantman.com/2012/05/creating-rpms-from-perl-cpan-modules/</link><description>&lt;p&gt;I try my absolute best to always install software on my Linux boxes as
&lt;a href="http://en.wikipedia.org/wiki/RPM_Package_Manager"&gt;&lt;span class="caps"&gt;RPM&lt;/span&gt;&lt;/a&gt;s, installed
through &lt;a href="http://yum.baseurl.org/"&gt;Yum&lt;/a&gt; (yes, I use
&lt;a href="http://www.centos.org"&gt;CentOS&lt;/a&gt; on servers and
&lt;a href="http://fedoraproject.org/"&gt;Fedora&lt;/a&gt; on my desktops/laptops). Not only is
this more-or-less required to sanely manage configuration through
Puppet, but it also lets me recreate a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 15 May 2012 15:01:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-05-15:/2012/05/creating-rpms-from-perl-cpan-modules/</guid><category>cpan</category><category>cpan2rpm</category><category>perl</category><category>rpm</category><category>yum</category></item><item><title>Perl script to convert F5 BigIp VIP address to list of internal pool member addresses</title><link>https://blog.jasonantman.com/2012/04/perl-script-to-convert-f5-bigip-vip-address-to-list-of-internal-pool-member-addresses/</link><description>&lt;p&gt;I often find myself logging in to the web &lt;span class="caps"&gt;UI&lt;/span&gt; of &lt;a href="http://www.f5.com/products/big-ip/"&gt;F5
BigIp&lt;/a&gt; load balancers and tracing
down a &lt;span class="caps"&gt;VIP&lt;/span&gt; address to the servers that actually back it. This is an
arduous, repetitive task of tracing from the &lt;span class="caps"&gt;VIP&lt;/span&gt; list to the &lt;span class="caps"&gt;VIP&lt;/span&gt; details
page to find the default pool …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 24 Apr 2012 22:04:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-04-24:/2012/04/perl-script-to-convert-f5-bigip-vip-address-to-list-of-internal-pool-member-addresses/</guid><category>bigip</category><category>f5</category><category>load balancer</category><category>perl</category></item><item><title>VMWare vSphere CLI and Perl SDK as an RPM</title><link>https://blog.jasonantman.com/2012/02/vmware-vsphere-cli-and-perl-sdk-as-an-rpm/</link><description>&lt;p&gt;Lately I&amp;#8217;ve been playing around with the VMWare &lt;a href="http://www.vmware.com/support/developer/viperltoolkit/"&gt;vSphere &lt;span class="caps"&gt;SDK&lt;/span&gt; for
Perl&lt;/a&gt;, since the
new job uses a bunch of VMWare stuff (and I&amp;#8217;ve been starting my foray
into Perl as a new language, and am amazed by the &lt;a href="http://www.cpan.org/"&gt;massive
number&lt;/a&gt; of modules out there). As much as …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 28 Feb 2012 19:01:00 -0500</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-02-28:/2012/02/vmware-vsphere-cli-and-perl-sdk-as-an-rpm/</guid><category>perl</category><category>rpm</category><category>vcli</category><category>vmware</category><category>vsphere</category></item><item><title>Sending AOL Instant Messenger (AIM) Messages from a Perl Script</title><link>https://blog.jasonantman.com/2012/02/sending-aim-messages-from-a-perl-script/</link><description>&lt;p&gt;I&amp;#8217;ve been doing some work on &lt;a href="http://www.icinga.org"&gt;icinga&lt;/a&gt; (a Nagios
fork) and wanted to implement notification via &lt;span class="caps"&gt;AOL&lt;/span&gt; Instant Messenger
(&lt;span class="caps"&gt;AIM&lt;/span&gt;), since I&amp;#8217;m almost always signed on when I&amp;#8217;m at a computer.
Unfortunately, most of the
&lt;a href="http://vuksan.com/linux/nagios_scripts.html#send_aim_messages"&gt;scripts&lt;/a&gt;
that I could find use
&lt;a href="http://search.cpan.org/~friffin/Net-AIM-TOC-0.97/TOC.pm"&gt;Net::&lt;span class="caps"&gt;AIM&lt;/span&gt;::&lt;span class="caps"&gt;TOC&lt;/span&gt;&lt;/a&gt;
which implements a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 28 Feb 2012 18:33:00 -0500</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-02-28:/2012/02/sending-aim-messages-from-a-perl-script/</guid><category>aim</category><category>aol</category><category>icinga</category><category>instant messenger</category><category>Nagios</category><category>notifications</category><category>perl</category></item><item><title>F5 BigIp - Manually Changing Session Persistence Cookies on the Client Side</title><link>https://blog.jasonantman.com/2012/02/f5-bigip-manually-changing-session-persistence-cookies-on-the-client-side/</link><description>&lt;p&gt;Yesterday I was asked to help out a bit debugging issues with a site
that sits behind a &lt;a href="http://www.f5.com/products/big-ip/"&gt;F5 &lt;span class="caps"&gt;BIG&lt;/span&gt;-&lt;span class="caps"&gt;IP&lt;/span&gt;&lt;/a&gt; load
balancer (&lt;span class="caps"&gt;LB&lt;/span&gt;). It&amp;#8217;s a pretty simple site, load balanced between two web
servers. The developers were complaining about intermittent page load
issues, so I immediately considered a …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Fri, 03 Feb 2012 13:32:00 -0500</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-02-03:/2012/02/f5-bigip-manually-changing-session-persistence-cookies-on-the-client-side/</guid><category>bigip</category><category>cookies</category><category>debugging</category><category>f5</category><category>load balancer</category><category>perl</category><category>persistence</category><category>web app</category></item></channel></rss>