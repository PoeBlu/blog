<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog</title><link href="http://newblog.jasonantman.com/" rel="alternate"></link><link href="http://newblog.jasonantman.com/feeds/tags/foreman.atom.xml" rel="self"></link><id>http://newblog.jasonantman.com/</id><updated>2012-08-11T09:35:00-04:00</updated><entry><title>Workflow for contributing to GitHub projects</title><link href="http://newblog.jasonantman.com/2012/08/workflow-for-contributing-to-github-projects/" rel="alternate"></link><updated>2012-08-11T09:35:00-04:00</updated><author><name>admin</name></author><id>tag:newblog.jasonantman.com,2012-08-11:2012/08/workflow-for-contributing-to-github-projects/</id><summary type="html">&lt;p&gt;Lately I&amp;#8217;ve been contributing to some open source projects hosted on
&lt;a href="http://github.com"&gt;github&lt;/a&gt;. I&amp;#8217;m pretty new to git, and the process is a
bit confusing for beginners. So, here&amp;#8217;s a sample workflow, based on the
&lt;a href="http://theforeman.org"&gt;The Foreman&lt;/a&gt;&amp;#8216;s &lt;a href="https://github.com/theforeman/foreman"&gt;foreman github
repository&lt;/a&gt;. Note that I&amp;#8217;m
developing against the &amp;#8220;develop&amp;#8221; branch of that repository, not the
master, so that throws in a little difference that isn&amp;#8217;t documented in
most introductions. To throw in another wrench, I maintan a branch with
the code that I&amp;#8217;m currently actually using (i.e. the application code
that I have checked out on the production server), called &amp;#8220;jantman&amp;#8221;.
This is more or less composed of the upstream &amp;#8220;develop&amp;#8221; branch, with all
of my finished (but not yet merged in the upstream) topic branches. I&amp;#8217;m
pretty sure all this is correct, but honestly, I&amp;#8217;m still new enough at
git that I can&amp;#8217;t make any promises. Unfortunatelty, I haven&amp;#8217;t had the
time to &lt;em&gt;really&lt;/em&gt; learn git, and I also can&amp;#8217;t find a simple enough
tutorial that covers all&amp;nbsp;this&amp;#8230;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fork the original repository through the GitHub&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On your machine, clone your&amp;nbsp;fork:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git clone git@github.com:username/reponame.git &amp;amp;&amp;amp; cd reponame
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure you&amp;#8217;ve&amp;nbsp;setup&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git config --global branch.autosetupmerge true
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your upstream&amp;nbsp;repo:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git remote add upstream git://github.com/upstream_user/upstream_repo.git
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fetch it and initialize any&amp;nbsp;submodules:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git fetch upstream &amp;amp;&amp;amp; git submodule update --init
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the current branch (&lt;code&gt;git branch&lt;/code&gt;, let&amp;#8217;s assume it&amp;#8217;s called
    &amp;#8220;develop&amp;#8221;) and rebase to its&amp;nbsp;upstream:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git rebase upstream/develop develop
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create my &amp;#8220;jantman&amp;#8221; branch, which will be the upstream &amp;#8220;develop&amp;#8221;,
    plus my finished work merged into&amp;nbsp;it:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git checkout -b jantman origin/develop
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a topic branch to do some&amp;nbsp;work:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git checkout -b NewBranchName jantman
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Periodically, push the topic branch to&amp;nbsp;github:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git push origin NewBranchName
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you commit to this branch from another computer (or someone else
    commits to it), periodically update your local tracking&amp;nbsp;branch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git pull origin NewBranchName
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Periodically, you want to pull in the upstream&amp;nbsp;changes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;switch to the develop&amp;nbsp;branch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git checkout develop
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;grab the latest version of the upstream git&amp;nbsp;repo:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git fetch upstream
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rebase develop to mirror the upstream develop&amp;nbsp;branch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git rebase upstream/develop develop
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;switch to our personal&amp;nbsp;branch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git checkout jantman
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;rebase our personal branch onto develop (pull all the new
    commits from develop into our personal&amp;nbsp;branch):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git rebase develop jantman
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we want those new upstream changes to continue down to our
    topic&amp;nbsp;branches:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git rebase develop topicBranchName
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we&amp;#8217;re done with a topic branch, we want to merge it into our
    &amp;#8220;personal&amp;#8221;&amp;nbsp;branch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    git checkout jantman; git merge --squash node-table-facts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then&amp;nbsp;commit:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    git commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;--squash&lt;/code&gt; will squash all the history of that branch down to
one commit. This is generally easier for integration into upstream,
and assuming the topic branch was created for a single feature or
bug, should be&amp;nbsp;logical.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we&amp;#8217;re sure we don&amp;#8217;t need it anymore, delete the topic branch from
    our local&amp;nbsp;machine:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git branch -d topicBranchName
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and from&amp;nbsp;github:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git push origin --delete topicBranchName
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, make sure we push our &amp;#8220;personal&amp;#8221; branch back to&amp;nbsp;origin:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;git push origin jantman
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Assuming all went well, you&amp;#8217;ll see the new commit on github, and
    have a nice pull request&amp;nbsp;button.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.doctrine-project.org/contribute.html"&gt;Contribute -&amp;nbsp;Doctrine-Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qsapp.com/wiki/Github"&gt;Github - Quicksilver&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/carmaa/inception/wiki/Contributor-Workflow-with-Github"&gt;Contributor Workflow with Github · carmaa/inception&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://help.github.com/fork-a-repo/"&gt;Help.GitHub - Fork A&amp;nbsp;Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="foreman"></category><category term="git"></category><category term="github"></category><category term="workflow"></category></entry><entry><title>The state of Puppet External Node Classifiers</title><link href="http://newblog.jasonantman.com/2012/02/the-state-of-puppet-external-node-classifiers/" rel="alternate"></link><updated>2012-02-26T12:45:00-05:00</updated><author><name>admin</name></author><id>tag:newblog.jasonantman.com,2012-02-26:2012/02/the-state-of-puppet-external-node-classifiers/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update November 2013&lt;/strong&gt;: This post has brought an amazing amount of
traffic to my blog, probably because it still seems to be one of the
only &lt;span class="caps"&gt;ENC&lt;/span&gt; comparisons out there. Both Dashboard (and Puppet Enterprise
Console) and The Foreman have changed quite a bit since I wrote this.
Foreman has certainly been developed at warp speed. I&amp;#8217;ll try to write an
update to this sometime soon, but be advised that the information here
is somewhat&amp;nbsp;dated.&lt;/p&gt;
&lt;p&gt;At work, we&amp;#8217;re in the process of rolling out
&lt;a href="http://projects.puppetlabs.com/projects/puppet"&gt;puppet&lt;/a&gt; for
configuration management of our servers. It will be an integral part of
the provisioning process of all new physical and virtual hosts, and will
also be phased in on existing hosts as possible. Right now, we have an
initial puppet install that was &amp;#8220;development&amp;#8221;, but we&amp;#8217;re about to move
to &amp;#8220;production&amp;#8221; (new puppetmaster in our production infrastructure,
production MySQL, etc.). We&amp;#8217;ve been using
&lt;a href="http://puppetlabs.com/puppet/related-projects/dashboard/"&gt;Dashboard&lt;/a&gt;,
but just as a report viewer. Up until now, we&amp;#8217;ve been using nodes.pp and
per-node flat-file manifests. I&amp;#8217;ve got a few issues with this, but the
biggest is that all of our node definitions (and their classes and
parameters) live in the same &lt;span class="caps"&gt;SVN&lt;/span&gt; repository as our modules and other
puppet configuration. Not only does this mean a checkout and commit just
to change a node parameter or add a module/class to a node, but it also
means that for my team members who don&amp;#8217;t have previous puppet
experience, it greatly blurs the line between administering puppet
(developing and maintaining modules) and using puppet (building a node,
changing node params or modules/classes), since both tasks are
accomplished in the same &lt;span class="caps"&gt;SVN&lt;/span&gt;&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;So, I&amp;#8217;ve been pushing an &lt;a href="http://docs.puppetlabs.com/guides/external_nodes.html"&gt;External Node Classifier
(&lt;span class="caps"&gt;ENC&lt;/span&gt;)&lt;/a&gt; with a web
interface as one of the biggest feature enhancements we need for our
puppet install. The complicating factor is that I&amp;#8217;ve been given a time
frame of approximately 1 week to get the &amp;#8220;production&amp;#8221; puppetmaster
running on our production infrastructure and marked as &amp;#8220;done&amp;#8221;. That
includes the &lt;span class="caps"&gt;ENC&lt;/span&gt;. At my last gig, at Rutgers University, I wrote our &lt;span class="caps"&gt;ENC&lt;/span&gt;
in &lt;span class="caps"&gt;PHP&lt;/span&gt; (actually I wrote it for my half-dozen or so boxes at home, and
brought it to Rutgers gratis), and it also handled kickstart file
distribution and &lt;span class="caps"&gt;PXE&lt;/span&gt; configuration, and was extended to also set &lt;span class="caps"&gt;DHCP&lt;/span&gt;
and &lt;span class="caps"&gt;DNS&lt;/span&gt; for the hosts - a one-stop solution. Unfortunately the code is
very organization-specific, not terribly solid, and the &lt;span class="caps"&gt;UI&lt;/span&gt; looks awful,
so it&amp;#8217;s not a fit for the current employer. So I have to find something
else that fits the bill. I have a list of initial (&amp;#8220;phase 1&amp;#8221;)
requirements that are a mix of functionality that we require and
management&amp;nbsp;requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Must support environments, since we make use of&amp;nbsp;them.&lt;/li&gt;
&lt;li&gt;Must support default values for parameters based on environment,
    &amp;#8220;zone&amp;#8221; (a custom fact and variable we define), or a combination of&amp;nbsp;both.&lt;/li&gt;
&lt;li&gt;For accountability and legal reasons, must have full auditing of all
    changes by all users (and, obviously, support&amp;nbsp;authentication).&lt;/li&gt;
&lt;li&gt;Display node last run time and&amp;nbsp;status.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As well as at least the ability to implement some of our phase 2&amp;nbsp;requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ability to show modules and classes applied to a node, including
    those required/included through other&amp;nbsp;modules/classes/roles.&lt;/li&gt;
&lt;li&gt;Should support at least some level of puppet report&amp;nbsp;display.&lt;/li&gt;
&lt;li&gt;Ability to trigger a node run (kick) from the&amp;nbsp;&lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Some level of permission separation, &lt;span class="caps"&gt;ACL&lt;/span&gt; or &lt;span class="caps"&gt;RBAC&lt;/span&gt; so that we could
    potentially delegate control of a certain module or parameter, on a
    certain group of nodes, to the development&amp;nbsp;team.&lt;/li&gt;
&lt;li&gt;Per-node links to other tools such as Icinga/Nagios or our&amp;nbsp;wiki.&lt;/li&gt;
&lt;li&gt;Some way of detecting valid classes and modules (and our &amp;#8220;role&amp;#8221;
    module) per-environment (i.e. available modules/classes/roles should
    be pulled from the configs, not manually&amp;nbsp;entered).&lt;/li&gt;
&lt;li&gt;Ability to display puppet docs from&amp;nbsp;modules/classes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our current situation makes this even more difficult: we&amp;#8217;re an
operations team of five (hiring at the moment to fill the position of
the sixth), and I believe I&amp;#8217;m the only member of the team with any real
software development experience. And none of us have experience with
Ruby (which Puppet and most of its universe is written in). This means
that any in-house solution runs the risk of being unmaintainable should
I get hit by a bus (some of our team have various levels of experience
with Perl and other scripting languages, but not really from an app
development perspective). Because of these reasons, there&amp;#8217;s a management
aversion to anything that we code ourselves (well, these reasons, and
the fact that with a shorthanded team we don&amp;#8217;t have much time for
projects without an immediate&amp;nbsp;impact).&lt;/p&gt;
&lt;p&gt;So, I spent hours looking around online trying to find existing
web-based &lt;span class="caps"&gt;ENC&lt;/span&gt; projects, and came up with a pretty small&amp;nbsp;list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://puppetlabs.com/puppet/related-projects/dashboard/"&gt;Dashboard&lt;/a&gt;,
    the Puppet Labs web &lt;span class="caps"&gt;UI&lt;/span&gt;. It&amp;#8217;s the most common web-based puppet &lt;span class="caps"&gt;ENC&lt;/span&gt; as
    far as I know, and since it&amp;#8217;s an official Puppet Labs project (and
    the basis for their Puppet Enterprise &lt;span class="caps"&gt;UI&lt;/span&gt;), its future is pretty
    secure. But it&amp;#8217;s still very basic (let alone enterprise features),
    and has a plugin system that is very&amp;nbsp;young.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://theforeman.org/projects/foreman"&gt;The Foreman&lt;/a&gt; is probably
    the second-most-common puppet &lt;span class="caps"&gt;ENC&lt;/span&gt;, and has also been around about as
    long as Dashboard. Its features are nice, and it includes support
    for Kickstart (management of &lt;span class="caps"&gt;TFTP&lt;/span&gt; and &lt;span class="caps"&gt;DHCP&lt;/span&gt;) and &lt;span class="caps"&gt;DNS&lt;/span&gt;, as well as some
    virtual machine management. Unfortunately, we already have &lt;span class="caps"&gt;DHCP&lt;/span&gt; and
    &lt;span class="caps"&gt;DNS&lt;/span&gt; infrastructure so I&amp;#8217;m sure it would be quite a bit of effort to
    integrate it with our environment, and for a non-Ruby shop, it has
    the same problem with maintainability of custom&amp;nbsp;code.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.ingent.net/projects/initr/wiki"&gt;initr&lt;/a&gt;, a
    &lt;a href="http://www.redmine.org/"&gt;Redmine&lt;/a&gt; plugin that functions as an &lt;span class="caps"&gt;ENC&lt;/span&gt;
    and manages modules. It includes &lt;span class="caps"&gt;RBAC&lt;/span&gt; and leverages Redmine. But
    since we don&amp;#8217;t use Redmine, it&amp;#8217;s not much of an&amp;nbsp;advantage.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.gitorious.org/opennms-puppet-node-pusher"&gt;OpenNMS Puppet Node
    Pusher&lt;/a&gt;An &lt;span class="caps"&gt;ENC&lt;/span&gt;
    script for &lt;a href="http://www.opennms.org/"&gt;OpenNMS&lt;/a&gt;, which we also don&amp;#8217;t&amp;nbsp;use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was pretty amazed to see that nobody had written a puppet web &lt;span class="caps"&gt;UI&lt;/span&gt;/&lt;span class="caps"&gt;ENC&lt;/span&gt;
in &lt;span class="caps"&gt;PHP&lt;/span&gt; (or Perl or Python), especially since Puppet is now quite&amp;nbsp;popular.&lt;/p&gt;
&lt;p&gt;So, I&amp;#8217;m essentially left with the following&amp;nbsp;options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start from scratch and write my own in &lt;span class="caps"&gt;PHP&lt;/span&gt;. By far the worst option,
    since we don&amp;#8217;t have anyone on our team who&amp;#8217;s likely to maintain it,
    and the Puppet community is&amp;nbsp;Ruby-focused.&lt;/li&gt;
&lt;li&gt;Use Foreman, since it&amp;#8217;s the only one that appears to offer audit
    logging, have a bunch of features that don&amp;#8217;t work for us, and
    hopefully deal with&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;Learn Ruby, write plugins for Dashboard, and hope that Puppet Labs
    or someone else will pick them up and maintain them if I&amp;nbsp;can&amp;#8217;t.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the moment, I&amp;#8217;ve decided to investigate Foreman and initr in a bit
more depth, and also play around with the Dashboard code and try to pick
up some Ruby (as they&amp;#8217;re all written in Ruby anyway). I&amp;#8217;ll also discuss
these options with the team and see how opinions go (keeping in mind
that the higher the likelihood of the community picking up/merging my
changes, the&amp;nbsp;better).&lt;/p&gt;</summary><category term="dashboard"></category><category term="foreman"></category><category term="node classifier"></category><category term="puppet"></category></entry></feed>