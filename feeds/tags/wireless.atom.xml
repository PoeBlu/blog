<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog - wireless</title><link href="https://blog.jasonantman.com/" rel="alternate"></link><link href="https://blog.jasonantman.com/feeds/tags/wireless.atom.xml" rel="self"></link><id>https://blog.jasonantman.com/</id><updated>2018-12-31T21:25:00-05:00</updated><entry><title>Twilio Programmable Wireless PPP Proxy Docker Image</title><link href="https://blog.jasonantman.com/2018/12/twilio-programmable-wireless-ppp-proxy-docker-image/" rel="alternate"></link><published>2018-12-31T21:25:00-05:00</published><updated>2018-12-31T21:25:00-05:00</updated><author><name>Jason Antman</name></author><id>tag:blog.jasonantman.com,2018-12-31:/2018/12/twilio-programmable-wireless-ppp-proxy-docker-image/</id><summary type="html">&lt;p&gt;Docker container with &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S) proxy to Twilio Programmable Wirless &lt;span class="caps"&gt;PPP&lt;/span&gt; cellular&amp;nbsp;connection.&lt;/p&gt;</summary><content type="html">&lt;div class="alert alert-warning" role="alert"&gt;&lt;strong&gt;Notice/Disclaimer:&lt;/strong&gt; The information I provide on home automation/security and surveillance is based on what I&amp;#8217;ve set up for myself based on a balance of cost, ease of use, and security, and should be considered for hobby purposes only. My current system and code has grown organically over time and is not how I&amp;#8217;d approach this if I started over from scratch. My code and system has a few obvious vulnerabilities and probably some non-obvious ones as well; I humbly but sincerely ask that you do not attempt to exploit these. I highly recommend that anyone implementing a similar system - especially if you also publish the details of it - have undocumented backup systems/devices. Finally, the systems that I describe are intended to provide some protection against or notification of crimes of opportunity, not targeted attacks. Please keep in mind that none of this is intended to protect against someone who targets &lt;em&gt;me&lt;/em&gt; specifically (and takes the time to research me) as opposed to my home at random.&lt;/div&gt;

&lt;p&gt;While my &lt;a href="/2018/12/aws-reinvent-2018-my-experience-and-recommendations-for-next-time/"&gt;trip to the &lt;span class="caps"&gt;AWS&lt;/span&gt; re:Invent conference last month&lt;/a&gt; resulted in a giant pile of swag from the expo, by far the most interesting of it was from the communications company &lt;a href="https://www.twilio.com"&gt;Twilio&lt;/a&gt; that gave me a &lt;span class="caps"&gt;SIM&lt;/span&gt; card for their &lt;a href="https://www.twilio.com/wireless"&gt;Programmable Wireless&lt;/a&gt; service (as well as something else that will be the topic of at least one future post). Programmable Wireless is really cool: for $3 per &lt;span class="caps"&gt;SIM&lt;/span&gt; and $3 per month (in &lt;strong&gt;single unit&lt;/strong&gt; quantity) I get a 2G/3G/4G &lt;span class="caps"&gt;SIM&lt;/span&gt; card with &lt;span class="caps"&gt;20MB&lt;/span&gt; of monthly data. That&amp;#8217;s not much data in the world of smartphones, but it&amp;#8217;s more than enough for many IoT or embedded use cases. More importantly, the &lt;span class="caps"&gt;SIM&lt;/span&gt; is also tied to your Twilio account that provides customizable rate plans (data rates, quotas, and roaming configuration) and detailed bi-hourly breakdowns of upload and download transfer, as well as &lt;a href="https://www.twilio.com/docs/usage/api"&gt;ReST APIs&lt;/a&gt; to manage everything and retrieve usage information and &lt;a href="https://www.twilio.com/docs/wireless"&gt;wonderful documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, at re:Invent one of the Twilio folks was telling me about their new Programmable Wireless service and the low costs even for a single &lt;span class="caps"&gt;SIM&lt;/span&gt;, and it occurred to me that this would be the perfect solution for an out-of-band notification solution for my &lt;a href="/2018/08/home-automation-and-security-system-overview/"&gt;home automation and security system&lt;/a&gt; (&lt;a href="/tags/security/index.html"&gt;blog posts in the &amp;#8220;security&amp;#8221; category&lt;/a&gt;). I&amp;#8217;ve done quite a bit this year with automation and security for my house, as well as video surveillance. I&amp;#8217;ve handled a lot of reasonable failure scenarios including power outage but, while my &lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T fiber connection has been remarkably reliable so far, loss of connectivity was the one major issue I didn&amp;#8217;t have a working solution for. My needs in the case of a loss of connectivity are somewhat different from the normal day-to-day; it&amp;#8217;s a rare enough condition that I&amp;#8217;m not really concerned with getting massive collections of surveillance camera still images like usual, but just a simple alert when connectivity is lost or restored, or if the alarm is triggered when my primary Internet connection is offline. Within those constraints it seemed like Programmable Wireless would be perfect for my needs, especially at the $3 &lt;span class="caps"&gt;USD&lt;/span&gt;/month price tag for a one-off personal&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;A few weeks ago, before going out of state for a week, I purchased the Huawei E397u-53 unlocked &lt;span class="caps"&gt;USB&lt;/span&gt; 4G &lt;span class="caps"&gt;LTE&lt;/span&gt; modem on &lt;a href="https://www.twilio.com/docs/wireless/tutorials/compatible-hardware"&gt;Twilio&amp;#8217;s compatible hardware list&lt;/a&gt; from &lt;a href="https://www.amazon.com/gp/product/B01M0JY15V/"&gt;Amazon&lt;/a&gt; and started work on the project. At first I spun my wheels for quite a while trying to figure out a way to handle the insane routing that I wanted in Linux: route everything out the default gateway (my &lt;span class="caps"&gt;LAN&lt;/span&gt;, going to my router and out the &lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T Fiber uplink) when it&amp;#8217;s working, but when the &lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T link is down, route only certain &amp;#8220;special&amp;#8221; traffic through the &lt;span class="caps"&gt;USB&lt;/span&gt; modem. After a bunch of thinking in circles and researching - and digging into all sorts of ugly stuff like policy-based routing - I resorted to posting a question on Twitter. Luckily a brilliant engineer who I used to work with &lt;a href="https://twitter.com/j_metzmeier/status/1076234692167454721"&gt;pointed me in the right direction&lt;/a&gt; with Docker. After thinking through his suggestion for a comparatively short amount of time, I hit on the solution that I&amp;#8217;m currently&amp;nbsp;using.&lt;/p&gt;
&lt;p&gt;My solution was to run a lightweight &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S) proxy server (&lt;a href="https://tinyproxy.github.io/"&gt;tinyproxy&lt;/a&gt;) inside a Docker container, with the container running in privileged mode and the &lt;span class="caps"&gt;PPP&lt;/span&gt; connection managed inside the container. Since it&amp;#8217;s running in privileged mode, the Docker container has full access to the host devices including the &lt;span class="caps"&gt;USB&lt;/span&gt; modem. When the container starts it launches &lt;a href="https://en.wikipedia.org/wiki/Point-to-Point_Protocol_daemon"&gt;pppd&lt;/a&gt; which establishes the &lt;span class="caps"&gt;PPP&lt;/span&gt; link over the cellular modem, sets a new default route over the link, and then starts tinyproxy (adding some other routes to the &lt;span class="caps"&gt;LAN&lt;/span&gt; as needed). The container exposes port 8888 for tinyproxy, which allows &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S) traffic to be routed over the cellular link just by using the container as a proxy. I handle the failover component at the application level, by attempting to send data over the default route a certain number of times and then falling back to the proxy if all attempts failed (&lt;a href="https://github.com/jantman/home-automation-configs/commit/2cf9eb933969f7527786393703e91f0a32538deb"&gt;example commit&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My solution to this is still very rough around the edges and shows all the unfortunate signs of being thrown together in a single rushed evening, but the &lt;a href="https://hub.docker.com/r/jantman/twilio-ppp-proxy"&gt;jantman/twilio-ppp-proxy Docker image&lt;/a&gt; and corresponding &lt;a href="https://github.com/jantman/docker-twilio-ppp-proxy"&gt;GitHub repo&lt;/a&gt; are available for anyone who would like to use them; I hope to polish them up a bit in the near future. While my needs are somewhat specific, I hope this will be of assistance to anyone else who wants the ability to easily proxy certain traffic over a Twilio Programmable Wireless link while preserving their existing&amp;nbsp;routing.&lt;/p&gt;
&lt;p&gt;Most importantly, many many thanks to the folks at the Twilio booth at re:Invent (I really, really wish I remembered the name of the person I spoke to) for discussing their services with me and giving me the &lt;span class="caps"&gt;SIM&lt;/span&gt; card that got this project&amp;nbsp;started!&lt;/p&gt;</content><category term="twilio"></category><category term="wireless"></category><category term="cellular"></category><category term="4G"></category><category term="DIY"></category><category term="security"></category><category term="reliability"></category><category term="alarm"></category></entry><entry><title>Open Source WiFi Site Survey Heatmap Tool</title><link href="https://blog.jasonantman.com/2018/11/open-source-wifi-site-survey-tool/" rel="alternate"></link><published>2018-11-01T18:07:00-04:00</published><updated>2018-11-01T18:07:00-04:00</updated><author><name>Jason Antman</name></author><id>tag:blog.jasonantman.com,2018-11-01:/2018/11/open-source-wifi-site-survey-tool/</id><summary type="html">&lt;p&gt;A bit about a Python project I wrote to plot floorplan heatmaps of wireless site&amp;nbsp;surveys.&lt;/p&gt;</summary><content type="html">&lt;p&gt;This week I finally bought myself a new wireless access point (&lt;span class="caps"&gt;AP&lt;/span&gt;) to replace my current ones, a pair of older Ubiquiti models that have been continually in service without issue for &lt;a href="https://twitter.com/j_antman/status/1029135879695228929"&gt;nine years&lt;/a&gt; and five years, respectively. I bought another Ubiquiti, of course, but wanted to be a bit more methodical and scientific in figuring out the best placement of it in my&amp;nbsp;house.&lt;/p&gt;
&lt;p&gt;Years ago when part of my job was supporting an extremely large wireless network, we used some expensive proprietary Windows software (I&amp;#8217;m pretty sure it was &lt;a href="https://www.ekahau.com/products/ekahau-site-survey/overview/"&gt;Ekahau Site Survey&lt;/a&gt;) for performing site surveys to
determine &lt;span class="caps"&gt;AP&lt;/span&gt; location. Essentially you temporarily rig up a running &lt;span class="caps"&gt;AP&lt;/span&gt; where you propose locating one, load a floorplan of the building into the site survey software, and then walk around the area tapping on the floorplan at your current location. At each tap, the software performs some measurements through the &lt;span class="caps"&gt;AP&lt;/span&gt; (I don&amp;#8217;t remember what the specific software we used did, but generally it&amp;#8217;s some bandwidth measurement like &lt;a href="https://software.es.net/iperf/"&gt;iperf&lt;/a&gt;) and ends up plotting a (predictive, interpolated) heatmap of signal strength or data transfer speeds over the&amp;nbsp;floorplan.&lt;/p&gt;
&lt;p&gt;I wanted to do something similar for my new &lt;span class="caps"&gt;AP&lt;/span&gt;, but was rather surprised that I couldn&amp;#8217;t find any existing F/&lt;span class="caps"&gt;OSS&lt;/span&gt; solution; only a handful of proprietary options costing anywhere from &amp;#8220;more than I&amp;#8217;d pay for a one-time thing&amp;#8221; to astronomical prices, and none of them clearly with Linux support. The closest I was able to find - and I&amp;#8217;m very thankful that I found it - was a &lt;a href="https://github.com/beaugunderson/wifi-heatmap"&gt;GitHub repository from Beau Gunderson&lt;/a&gt; that plots a heatmap superimposed on a floorplan using a &lt;span class="caps"&gt;CSV&lt;/span&gt; file of WiFi signal strength measurements. This was enough to get me started on a similar project to automate the&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;Over a couple of afternoons I came up with a really rough tool, &lt;a href="https://github.com/jantman/python-wifi-survey-heatmap"&gt;python-wifi-survey-heatmap&lt;/a&gt; to handle this. The full documentation is in the &lt;a href="https://github.com/jantman/python-wifi-survey-heatmap/blob/master/README.rst"&gt;&lt;span class="caps"&gt;README&lt;/span&gt;&lt;/a&gt;, but the gist is that it&amp;#8217;s a Python &lt;span class="caps"&gt;GUI&lt;/span&gt; (wxPython) and &lt;span class="caps"&gt;CLI&lt;/span&gt; application that automates the process. It&amp;#8217;s currently Linux-only because it uses &lt;code&gt;iwlib&lt;/code&gt; (wireless_tools) to pull wireless information and perform scans, but that could be fixed by adding collector classes for other OSes. In short you run an iperf3 server somewhere on your &lt;span class="caps"&gt;LAN&lt;/span&gt;, connect to the &lt;span class="caps"&gt;SSID&lt;/span&gt; you want to test, fire up the &lt;span class="caps"&gt;GUI&lt;/span&gt; passing it the path to an image to use as the floorplan background and the &lt;span class="caps"&gt;IP&lt;/span&gt; or hostname of the iperf3 server, and then walk around clicking the floorplan at your current location. For each click the application will draw a yellow circle and then change it to green when measurement is complete, about a minute&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;For each measurement point (location on the floorplan), the application&amp;nbsp;captures:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Current wireless statistics including quality, signal strength, and noise level (like &lt;code&gt;iwconfig&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;A current scan (like &lt;code&gt;iwlist scan&lt;/code&gt;) of all visible networks and their signal&amp;nbsp;strength/quality.&lt;/li&gt;
&lt;li&gt;Three 10-second iperf3 measurements to the iperf&amp;nbsp;server:&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TCP&lt;/span&gt; upload (client/application to&amp;nbsp;server)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TCP&lt;/span&gt; download (server to&amp;nbsp;client)&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;UDP&lt;/span&gt;&amp;nbsp;upload&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After each measurement is complete all data is saved to a &lt;span class="caps"&gt;JSON&lt;/span&gt; file in the current directory, and the gui application can optionally load an existing &lt;span class="caps"&gt;JSON&lt;/span&gt; output file to continue a previous survey. None of this uses any sort of shell/subprocess/exec hackery; we interface with iwconfig and iwlist information via the python &lt;a href="https://pypi.org/project/iwlib/"&gt;iwlib&lt;/a&gt; package, a cffi Python wrapper around wireless_tools&amp;#8217; iwlib, and with iperf3 via the &lt;a href="https://pypi.org/project/iperf3/"&gt;iperf3&lt;/a&gt; package, a cdll wrapper around&amp;nbsp;libiperf.&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve completed capturing data for your site survey, the &lt;code&gt;wifi-heatmap&lt;/code&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt; entrypoint processes the data and generates some heatmaps as well as channel utilization graphs like&amp;nbsp;these:&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/channels24_WAP1.png"&gt;&lt;img alt="example 2.4 GHz channel usage" src="/GFX/channels24_WAP1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/channels5_WAP1.png"&gt;&lt;img alt="example 5 GHz channel usage" src="/GFX/channels5_WAP1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/jitter_WAP1.png"&gt;&lt;img alt="example jitter heatmap" src="/GFX/jitter_WAP1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/quality_WAP1.png"&gt;&lt;img alt="example quality heatmap" src="/GFX/quality_WAP1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/rssi_WAP1.png"&gt;&lt;img alt="example rssi heatmap" src="/GFX/rssi_WAP1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/tcp_download_Mbps_WAP1.png"&gt;&lt;img alt="example tcp download heatmap" src="/GFX/tcp_download_Mbps_WAP1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/tcp_upload_Mbps_WAP1.png"&gt;&lt;img alt="example tcp upload heatmap" src="/GFX/tcp_upload_Mbps_WAP1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/udp_Mbps_WAP1.png"&gt;&lt;img alt="example udp upload heatmap" src="/GFX/udp_Mbps_WAP1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All of the code and some initial documentation is available at &lt;a href="https://github.com/jantman/python-wifi-survey-heatmap"&gt;https://github.com/jantman/python-wifi-survey-heatmap&lt;/a&gt;. It&amp;#8217;s very alpha and rough around the edges, and I doubt I&amp;#8217;ll be actively developing or supporting it once I&amp;#8217;m done installing my new &lt;span class="caps"&gt;AP&lt;/span&gt;, but I very much hope that it might be of use to someone else and maybe someone will even improve it a&amp;nbsp;bit.&lt;/p&gt;</content><category term="wifi"></category><category term="survey"></category><category term="wireless"></category><category term="heatmap"></category><category term="python"></category></entry><entry><title>Managing Ubiquiti Networks MAC ACLs from a script</title><link href="https://blog.jasonantman.com/2011/01/managing-ubiquiti-networks-mac-acls-from-a-script/" rel="alternate"></link><published>2011-01-06T16:06:00-05:00</published><updated>2011-01-06T16:06:00-05:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2011-01-06:/2011/01/managing-ubiquiti-networks-mac-acls-from-a-script/</id><summary type="html">&lt;p&gt;I have a small web-based tool for allowing members of an organization to
register their wireless &lt;span class="caps"&gt;MAC&lt;/span&gt; addresses, and then automatically adding
them to the &lt;span class="caps"&gt;MAC&lt;/span&gt; &lt;span class="caps"&gt;ACL&lt;/span&gt; on &lt;a href="http://www.ubnt.com"&gt;Ubiquiti&lt;/a&gt; AirOSv2 APs. It&amp;#8217;s
a pretty quick hack, along with a simple and ugly web-based tool, but it
gets the job …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have a small web-based tool for allowing members of an organization to
register their wireless &lt;span class="caps"&gt;MAC&lt;/span&gt; addresses, and then automatically adding
them to the &lt;span class="caps"&gt;MAC&lt;/span&gt; &lt;span class="caps"&gt;ACL&lt;/span&gt; on &lt;a href="http://www.ubnt.com"&gt;Ubiquiti&lt;/a&gt; AirOSv2 APs. It&amp;#8217;s
a pretty quick hack, along with a simple and ugly web-based tool, but it
gets the job done for a non-profit with only 25 people. After &lt;a href="http://www.ubnt.com/forum/showthread.php?t=21133"&gt;posting
about it on the Ubiquiti
forum&lt;/a&gt; and getting a
request from someone for the code, I decided to put it out there for
anyone who wants it. The script is mostly based on SCPing configs to and
from the &lt;span class="caps"&gt;AP&lt;/span&gt; and SSHing in to run commands, and will need passwordless
public key auth to the&amp;nbsp;&lt;span class="caps"&gt;AP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The code itself is in subversion at
&lt;a href="https://github.com/jantman/misc-scripts/tree/master/ubiquiti-mac-acl"&gt;https://github.com/jantman/misc-scripts/tree/master/ubiquiti-mac-acl&lt;/a&gt;.
It&amp;#8217;s composed of four&amp;nbsp;files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/misc-scripts/blob/master/ubiquiti-mac-acl/updateAPconfigs.php.inc"&gt;updateAPconfigs.php.inc&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;the main &lt;span class="caps"&gt;PHP&lt;/span&gt; file with three functions for working with the&amp;nbsp;APs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/misc-scripts/blob/master/ubiquiti-mac-acl/wirelessTools.php"&gt;wirelessTools.php&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;My &lt;span class="caps"&gt;PHP&lt;/span&gt; page for users to add MACs. It&amp;#8217;s pretty rough and is mostly
based on handling our &lt;span class="caps"&gt;LDAP&lt;/span&gt; authentication/group framework, but it
gives a fair example of how I store MACs in a MySQL table and then
rebuild a given &lt;span class="caps"&gt;AP&lt;/span&gt; config file with the current list of MACs. I
doubt it will be useful to anyone else as more than an&amp;nbsp;example.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/misc-scripts/blob/master/ubiquiti-mac-acl/wireless.sql"&gt;wireless.sql&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;The schema for the &lt;span class="caps"&gt;SQL&lt;/span&gt; database I use to store&amp;nbsp;MACs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/misc-scripts/blob/master/ubiquiti-mac-acl/README.txt"&gt;&lt;span class="caps"&gt;README&lt;/span&gt;.txt&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Readme file including some warnings on the lack of error checking
in the&amp;nbsp;functions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hopefully this will be of some use to someone. I should probably mention
two important things here. First, the &lt;span class="caps"&gt;AP&lt;/span&gt; only accepts up to 32 &lt;span class="caps"&gt;MAC&lt;/span&gt;
addresses, so if you feed the &lt;code&gt;makeNewConfigFile()&lt;/code&gt; function an array
with more than 32, it will just stop at the 32&lt;sup&gt;nd&lt;/sup&gt;. Also, be aware, this
SCPs a config file to the &lt;span class="caps"&gt;AP&lt;/span&gt;, runs &lt;code&gt;cfgmtd&lt;/code&gt; and the reboots the &lt;span class="caps"&gt;AP&lt;/span&gt;. If
you send it a bad config file, who knows what will happen. If you allow
your users to add &lt;span class="caps"&gt;MAC&lt;/span&gt; addresses, your APs will reboot every time someone
adds&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;All I ask is that if you use this, leave a comment to thank me, and if
you make any changes/additions/bugfixes, please send them back to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Also, I have some &lt;a href="/2010/03/nagios-check-scripts/"&gt;Nagios check scripts&lt;/a&gt;
that are useful for Ubiquiti&amp;nbsp;APs.&lt;/p&gt;</content><category term="airos"></category><category term="mac"></category><category term="PHP"></category><category term="security"></category><category term="ubiquiti"></category><category term="wap"></category><category term="wireless"></category></entry><entry><title>Massive Updates</title><link href="https://blog.jasonantman.com/2008/07/massive-updates/" rel="alternate"></link><published>2008-07-17T12:28:00-04:00</published><updated>2008-07-17T12:28:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2008-07-17:/2008/07/massive-updates/</id><summary type="html">&lt;p&gt;I know I&amp;#8217;ve been quite for a while. I&amp;#8217;ve been quite busy. Unfortunately,
due to changing priorities, there are a lot of projects I&amp;#8217;ve been
working on, but few of them have gotten finished. A sampling, in no
specific&amp;nbsp;order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Migrating my network/service monitoring to Nagios …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;I know I&amp;#8217;ve been quite for a while. I&amp;#8217;ve been quite busy. Unfortunately,
due to changing priorities, there are a lot of projects I&amp;#8217;ve been
working on, but few of them have gotten finished. A sampling, in no
specific&amp;nbsp;order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Migrating my network/service monitoring to Nagios 3, &lt;em&gt;totally&lt;/em&gt;
    re-writing my config files to make use of the new features, and
    making one coherent list of all the services that should be in it
    and&amp;nbsp;aren&amp;#8217;t.&lt;/li&gt;
&lt;li&gt;Planning to totally re-wire all networking at the &lt;a href="http://www.midlandparkambulance.com"&gt;ambulance corps
    building&lt;/a&gt; to eliminate some
    problems. This includes &lt;em&gt;building&lt;/em&gt; an 8U wall-mount rack, and also
    trying a &lt;a href="http://www.pcengines.ch/alix2c1.htm"&gt;&lt;span class="caps"&gt;PC&lt;/span&gt; Engines &lt;span class="caps"&gt;ALIX&lt;/span&gt;.2c1&lt;/a&gt;
    board as a router (still undecided on &lt;span class="caps"&gt;WAN&lt;/span&gt;/&lt;span class="caps"&gt;LAN&lt;/span&gt;/&lt;span class="caps"&gt;DMZ&lt;/span&gt; or &lt;span class="caps"&gt;WAN&lt;/span&gt;/&lt;span class="caps"&gt;LAN&lt;/span&gt;/&lt;span class="caps"&gt;WLAN&lt;/span&gt;).
    It also means a long day of work at some point in the future, and
    lots of cable&amp;nbsp;drops.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tuxostat.jasonantman.com"&gt;tuxOstat&lt;/a&gt;, the linux-controlled
    thermostat, is pretty much on the back burner. It&amp;#8217;s a stable beta
    with severely reduced functionality, but has been handling my
    cooling needs without any major bugs in the past month or so. It
    still only has a basic &lt;span class="caps"&gt;CLI&lt;/span&gt; interface and a very simple kludge of a
    web &lt;span class="caps"&gt;GUI&lt;/span&gt;, but it works. Other modes (heating, fan only), predictive
    temperature calculation, other temperature/zone calculation modes,
    and physical controls (buttons, menu on &lt;span class="caps"&gt;LCD&lt;/span&gt;) are still to come, as
    well as the move from &lt;span class="caps"&gt;PC&lt;/span&gt; to Soekris (if I can ever figure it out,
    and get one with &lt;span class="caps"&gt;USB&lt;/span&gt;). I now feel that an &lt;span class="caps"&gt;ALIX&lt;/span&gt; board might be a
    better shot, as they take &lt;span class="caps"&gt;CF&lt;/span&gt; (more space than the Soekris), have a
    slightly faster processor, and also support &lt;span class="caps"&gt;USB&lt;/span&gt; at about half the
    price&amp;nbsp;point.&lt;/li&gt;
&lt;li&gt;I&amp;#8217;m considering moving my main web site to a &lt;span class="caps"&gt;CMS&lt;/span&gt;, and letting the
    &lt;a href="http://www.jasonantman.com/wiki/"&gt;wiki&lt;/a&gt; serve more as a knowledge&amp;nbsp;base.&lt;/li&gt;
&lt;li&gt;I&amp;#8217;m working on patching together a new access point for the
    ambulance corps, based on &lt;a href="http://pyramid.metrix.net/"&gt;Pyramid
    Linux&lt;/a&gt;. I needed something which would
    run on the Soekris net4526, had at least &lt;span class="caps"&gt;WEP&lt;/span&gt;, and supported some
    sort of captive portal. Pyramid has
    &lt;a href="http://dev.wifidog.org/"&gt;WifiDog&lt;/a&gt;, but that only wants to do local
    authentication or &lt;span class="caps"&gt;RADIUS&lt;/span&gt;, and I wanted direct auth to &lt;span class="caps"&gt;LDAP&lt;/span&gt; and MySQL
    logging. On the positive side, it just uses some &lt;span class="caps"&gt;PHP&lt;/span&gt; pages hosted
    under Apache to handle authentication - the &lt;span class="caps"&gt;WAP&lt;/span&gt; redirects the user
    to a login page on a (separate) web server, the user does their
    stuff, and then the &lt;span class="caps"&gt;WAP&lt;/span&gt; makes a request to the server to determine
    whether it should open up the firewall, keep the user locked down,
    or totally kick them. So, once I figure out some routing issues,
    I&amp;#8217;ll get back to working on the new project -
    &lt;a href="http://blacklabauth.jasonantman.com/"&gt;BlackLabAuth&lt;/a&gt;, a re-write of
    the WifiDog auth server software that&amp;#8217;s geared towards a
    closed-access network (i.e. only people and/or MACs already listed
    in &lt;span class="caps"&gt;LDAP&lt;/span&gt; can login) with full logging to MySQL. I already have some
    code &lt;a href="http://cvs.jasonantman.com/BlackLabAuth"&gt;in &lt;span class="caps"&gt;CVS&lt;/span&gt;&lt;/a&gt;, but some
    issues with my development Soekris board have slowed the project for
    the time being. When finished, I&amp;#8217;ll have not only the new auth
    server available for download (with documentation) but also a
    ready-to-run (well, some configuration time needed, but minor and
    scripted) image for the&amp;nbsp;net4526.&lt;/li&gt;
&lt;li&gt;My desktop that I use for &lt;a href="http://www.mythtv.org/"&gt;MythTV&lt;/a&gt; filled up
    its&amp;#8217; disk. Totally. I ordered a cheap Syba &lt;span class="caps"&gt;SATA&lt;/span&gt; card (&lt;span class="caps"&gt;PCI&lt;/span&gt;) from
    NewEgg, along with a &lt;span class="caps"&gt;500GB&lt;/span&gt; &lt;span class="caps"&gt;WD&lt;/span&gt; &lt;span class="caps"&gt;SATA&lt;/span&gt;-150 disk, but no luck. Though the
    card (Syba / Initio 1622 chipset, shows up as Class 0106: 1101:1622
    (rev 02)) said it was supported under Linux, the driver &lt;span class="caps"&gt;CD&lt;/span&gt; mentioned
    nothing about it. Some investigation on the Syba website turned up a
    zipped archive. After extraction, I found a readme that gave (poor)
    instructions on how to re-compile a kernel, and warned that you &lt;span class="caps"&gt;MUST&lt;/span&gt;
    have 2.6.15. Oh well, I wasn&amp;#8217;t going to give up 2.6.16.27 (the
    newest &lt;span class="caps"&gt;RPM&lt;/span&gt;&amp;#8217;d kernel for OpenSuSE 10.1). The standard drivers for it
    didn&amp;#8217;t appear until 2.6.25 or so. So&amp;#8230; after many debates with
    myself as to whether I should blow away my whole MythTV installation
    and upgrade from the now-ancient 10.1, I decided that I&amp;#8217;ll only be
    in my apartment for another year, I should make it last. Some
    investigation turned up a $24 Silicon Image-based card that should
    work fine, and it&amp;#8217;s now in the&amp;nbsp;mail&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;m sure I missed something big, but I&amp;#8217;ll update as needed, and attempt
to make it a daily habit to post something interesting or, at the very
least, hard-to-find. After all, I&amp;#8217;m sure that I use this blog and my
wiki as an informational resource (my bad memory) more than anyone else&amp;nbsp;would&amp;#8230;&lt;/p&gt;</content><category term="access point"></category><category term="alix"></category><category term="BlackLabAuth"></category><category term="mythtv"></category><category term="Nagios"></category><category term="pc engines"></category><category term="soekris"></category><category term="tuxostat"></category><category term="WifiDog"></category><category term="wireless"></category></entry><entry><title>Madwifi on the eeePC</title><link href="https://blog.jasonantman.com/2008/05/madwifi-on-the-eeepc/" rel="alternate"></link><published>2008-05-04T22:32:00-04:00</published><updated>2008-05-04T22:32:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2008-05-04:/2008/05/madwifi-on-the-eeepc/</id><summary type="html">&lt;p&gt;So, I&amp;#8217;ve started a new &lt;a href="http://www.opensuse.org"&gt;OpenSuSE&lt;/a&gt; install on my
eeePC. The &lt;span class="caps"&gt;4GB&lt;/span&gt; &lt;span class="caps"&gt;SDHC&lt;/span&gt; card that I originally used was getting a bit
cramped - I couldn&amp;#8217;t even fit the kernel source! So, I bought a new &lt;span class="caps"&gt;8GB&lt;/span&gt;
&lt;span class="caps"&gt;SDHC&lt;/span&gt; card and started from scratch. I know that OpenSuSE 11 is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, I&amp;#8217;ve started a new &lt;a href="http://www.opensuse.org"&gt;OpenSuSE&lt;/a&gt; install on my
eeePC. The &lt;span class="caps"&gt;4GB&lt;/span&gt; &lt;span class="caps"&gt;SDHC&lt;/span&gt; card that I originally used was getting a bit
cramped - I couldn&amp;#8217;t even fit the kernel source! So, I bought a new &lt;span class="caps"&gt;8GB&lt;/span&gt;
&lt;span class="caps"&gt;SDHC&lt;/span&gt; card and started from scratch. I know that OpenSuSE 11 is coming up
soon, but I just couldn&amp;#8217;t wait, so I just used OpenSuSE 10.3&amp;nbsp;again.&lt;/p&gt;
&lt;p&gt;I followed my &lt;a href="http://www.jasonantman.com/wiki/index.php/OpenSuSE_10.3_on_eeePC_External_SDHC"&gt;previous
how-to&lt;/a&gt;,
and also am updating it with some new information - such as my
xorg.conf. Most interestingly, though, I actually got MadWiFi to work
with the &lt;a href="http://madwifi.org/wiki/Compatibility/Atheros#AtherosAR5BXB63"&gt;Atheros
&lt;span class="caps"&gt;AR5BXB63&lt;/span&gt;&lt;/a&gt;
on the eeePC! I haven&amp;#8217;t tested everything yet (specifically &lt;span class="caps"&gt;WPA&lt;/span&gt;/&lt;span class="caps"&gt;WPA2&lt;/span&gt;)
but it seems to work fine. I&amp;#8217;ve updated &lt;a href="http://www.jasonantman.com/wiki/index.php/OpenSuSE_10.3_on_eeePC_External_SDHC#Update_2008-05-02"&gt;my
HowTo&lt;/a&gt;
with the instructions, but mainly it hinges on using
madwifi-ng-r2756+ar5007 (&lt;a href="http://snapshots.madwifi.org/special/madwifi-ng-r2756+ar5007.tar.gz"&gt;gzipped
tarball&lt;/a&gt;)
and compiling from&amp;nbsp;source.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This HowTo is based on the original eeePC 701 4G and OpenSuSE
10.3. It may not be needed for newer versions of OpenSuSE or newer
versions of the&amp;nbsp;eeePC.&lt;/p&gt;</content><category term="atheros"></category><category term="eeepc"></category><category term="madwifi"></category><category term="wifi"></category><category term="wireless"></category></entry></feed>