<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog - embedded</title><link href="https://blog.jasonantman.com/" rel="alternate"></link><link href="https://blog.jasonantman.com/feeds/tags/embedded.atom.xml" rel="self"></link><id>https://blog.jasonantman.com/</id><updated>2018-03-06T16:00:00-05:00</updated><entry><title>DIY Raspberry Pi Zero GPS TrackÂ Logger</title><link href="https://blog.jasonantman.com/2018/03/diy-raspberry-pi-zero-gps-track-logger/" rel="alternate"></link><published>2018-03-06T16:00:00-05:00</published><updated>2018-03-06T16:00:00-05:00</updated><author><name>Jason Antman</name></author><id>tag:blog.jasonantman.com,2018-03-06:/2018/03/diy-raspberry-pi-zero-gps-track-logger/</id><summary type="html">&lt;p&gt;Simple &lt;span class="caps"&gt;DIY&lt;/span&gt; Raspberry Pi Zero &lt;span class="caps"&gt;USB&lt;/span&gt; &lt;span class="caps"&gt;GPS&lt;/span&gt; logger, with code and&amp;nbsp;instructions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last weekend I was out hiking with one of my dogs when I realized that I didn&amp;#8217;t know the exact length of the route we were taking. We were at the &lt;a href="http://arabiaalliance.org/explore/plan-your-visit/visit-davidson-arabia-nature-preserve/"&gt;Davidson-Arabia Nature Preserve&lt;/a&gt;, part of the Arabia Mountain National Heritage Area, only about 20 minutes from home. It&amp;#8217;s a wonderful afternoon hike for me since it&amp;#8217;s so close to home and the trails are easy. It&amp;#8217;s also a laid back hike - the area is only about 2.1 square miles (5.4 sq. km.) bordered on all sides by well-traveled roads or suburban neighborhoods and dominated by Arabia Mountain and a lake - with many trails and high traffic, so I&amp;#8217;m less concerned about navigation than I would be in the backcountry. However, since my usual route covers portions of two trails and a cut-through between them, I don&amp;#8217;t know what the actual distance&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;At first it seemed like the logical solution to this would be tracking hikes on my phone using one of the many apps for this (or a similar) purpose. But that didn&amp;#8217;t seem like a good solution to me for a number of reasons. First, my current phone is an aging Samsung Galaxy S6 (I tend to buy the best phone available at the time, and keep it until it dies) and the battery life is far from what it used to be. I carry an external battery pack for it, but frequently polling &lt;span class="caps"&gt;GPS&lt;/span&gt; position is extremely power intensive on any phone; I&amp;#8217;d rather leave my phone for tasks that actually require it  like communication, weather, and checking some of the great digital maps that are available. More importantly, the &lt;span class="caps"&gt;GPS&lt;/span&gt; antennas in most smartphones seem to be rather position sensitive and I haven&amp;#8217;t gotten very good results recording an accurate track with my phone in my pocket or belt holster, let alone in my pack (where it often is on more challenging&amp;nbsp;terrain).&lt;/p&gt;
&lt;p&gt;I started looking at the commercial &lt;span class="caps"&gt;GPS&lt;/span&gt; loggers available online, but few of them seemed like compelling choices for the cost. Then I realized that I could probably piece one together at no cost using parts that I already had, namely a &lt;a href="https://www.raspberrypi.org/products/raspberry-pi-zero/"&gt;RaspberryPi Zero&lt;/a&gt;, &lt;span class="caps"&gt;USB&lt;/span&gt; &lt;span class="caps"&gt;GPS&lt;/span&gt;, and the &lt;a href="https://www.amazon.com/gp/product/B01JIYWUBA/"&gt;10Ah external battery pack&lt;/a&gt; I use for my phone. It turns out that the &lt;a href="https://www.amazon.com/gp/product/B000FPILZG/"&gt;Deluo 31-311-01 &lt;span class="caps"&gt;USB&lt;/span&gt; &lt;span class="caps"&gt;GPS&lt;/span&gt;&lt;/a&gt; I bought a decade ago has been lost to time, likely thrown out in one of the electronics purges I&amp;#8217;ve done over the past few years. But I was able to get a new SiRF Star &lt;span class="caps"&gt;IV&lt;/span&gt;-based &lt;a href="https://www.amazon.com/gp/product/B008200LHW/"&gt;GlobalSat &lt;span class="caps"&gt;BU&lt;/span&gt;-353-S4 &lt;span class="caps"&gt;USB&lt;/span&gt; &lt;span class="caps"&gt;GPS&lt;/span&gt;&lt;/a&gt; on Amazon. The manufacturer&amp;#8217;s specifications sound quite nice and even though the &lt;a href="http://www.catb.org/gpsd/hardware.html"&gt;gpsd hardware list&lt;/a&gt; rates it extremely poorly, once I received it in the mail I unboxed it and set it on the sill inside my window and was able to get a very accurate fix in about a&amp;nbsp;minute.&lt;/p&gt;
&lt;h2 id="the-result"&gt;&lt;a class="toclink" href="#the-result"&gt;The&amp;nbsp;Result&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="/GFX/pizero_gpslogger_1.jpg"&gt;&lt;img alt="Photograph of finished hardware next to playing card deck for size comparison" src="/GFX/pizero_gpslogger_1_sm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The solution I came up with uses the very stable and mature &lt;a href="http://www.catb.org/gpsd/"&gt;gpsd daemon&lt;/a&gt; to handle communication with the &lt;span class="caps"&gt;GPS&lt;/span&gt; and caching the last position information, and a small Python daemon to read from &lt;code&gt;gpsd&lt;/code&gt; and log to the RaspberryPi&amp;#8217;s &lt;span class="caps"&gt;SD&lt;/span&gt; card using gpsd&amp;#8217;s full &lt;span class="caps"&gt;JSON&lt;/span&gt; data format. The Pi itself is running the &lt;a href="https://www.raspbian.org/"&gt;Raspbian&lt;/a&gt; Linux distribution with virtually no customization, and all of the default services (plus &lt;span class="caps"&gt;SSH&lt;/span&gt;) running out of laziness. I also added two status LEDs driven by the board&amp;#8217;s &lt;span class="caps"&gt;GPIO&lt;/span&gt;, to give visual indication of the position fix state and &lt;span class="caps"&gt;SD&lt;/span&gt; card writes. Unlike many of the commercial &lt;span class="caps"&gt;GPS&lt;/span&gt; loggers available which log data every 60 seconds, my code defaults to 5-second intervals (that, along with most other parameters, are configurable via environment variables). My code (along with detailed instructions, an installation script, and a script to convert from gpsd &lt;span class="caps"&gt;JSON&lt;/span&gt; format to standard &lt;a href="https://en.wikipedia.org/wiki/GPS_Exchange_Format"&gt;&lt;span class="caps"&gt;GPX&lt;/span&gt;&lt;/a&gt;) is available at &lt;a href="https://github.com/jantman/pizero-gpslog"&gt;https://github.com/jantman/pizero-gpslog&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="hardware"&gt;&lt;a class="toclink" href="#hardware"&gt;Hardware&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="/GFX/pizero_gpslogger_2.jpg"&gt;&lt;img alt="Photograph of finished hardware inside backpack" src="/GFX/pizero_gpslogger_2_sm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This all fits conveniently in my hiking pack inside the mesh bag that the battery pack came in. I plan on putting the Pi and battery safely inside the main compartment (I can unzip it periodically to check that the &lt;span class="caps"&gt;GPS&lt;/span&gt; has a fix and is logging) and dangling the &lt;span class="caps"&gt;GPS&lt;/span&gt; receiver out the zipper, affixed between the zipper pulls of the smaller compartment (with a hair elastic&amp;#8230;). This seems to be relatively horizontal, but I may also experiment with taping the &lt;span class="caps"&gt;GPS&lt;/span&gt; to the carry handle on top of the pack, or packing all of it into the top outside&amp;nbsp;pocket.&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/pizero_gpslogger_3.jpg"&gt;&lt;img alt="Front angle pohotograph of GPS affixed to outside of pack" src="/GFX/pizero_gpslogger_3_sm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/pizero_gpslogger_4.jpg"&gt;&lt;img alt="Side angle photograph of GPS affixed to outside of pack" src="/GFX/pizero_gpslogger_4_sm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s worth mention that my hardware choice was largely dependent on what I already had or what I thought I could reuse for other projects. While the &lt;span class="caps"&gt;GPS&lt;/span&gt; receiver is small and lightweight - about 2&amp;#8221; (5cm) around and about 2 ounces (57g) - I could have saved a fair amount of space and some weight by purchasing a component &lt;span class="caps"&gt;GPS&lt;/span&gt; to connect to the Pi via &lt;span class="caps"&gt;GPIO&lt;/span&gt; and mount directly to the Pi itself. I decided to get a &lt;span class="caps"&gt;USB&lt;/span&gt; model as it will be more useful to me for other projects as well. Some space and weight could also be saved by using a simpler microcontroller than the Pi Zero (this application certainly doesn&amp;#8217;t need the power of a Pi, or a full Linux system) but I used what I had&amp;nbsp;handy.&lt;/p&gt;
&lt;p&gt;The full system as I have it set up weighs 11.5 ounces (326g) which is quite heavy by the standards of serious hikers. However, 7 ounces (203g) of that is the 10,000mAh external battery pack which I already had for my cell phone. This battery can run the logger for 42 hours continuously, which is definitely overkill for my purposes. I could likely cut the weight in half if I used a more appropriately-sized battery; Anker, a company whose products I really like, makes a $15 &lt;a href="https://www.amazon.com/dp/B005X1Y7I2"&gt;3350mAh &lt;span class="caps"&gt;USB&lt;/span&gt; battery pack&lt;/a&gt; that weighs in at just 3oz (85g), to say nothing of the lighter Pi-specific options&amp;nbsp;available.&lt;/p&gt;
&lt;p&gt;As-is, this hardware allows me to continuously log &lt;span class="caps"&gt;GPS&lt;/span&gt; fixes every 5 seconds for 42 hours, consuming about &lt;span class="caps"&gt;40MB&lt;/span&gt; for the data. Each data point is approximately 1400 bytes, and the &lt;span class="caps"&gt;8GB&lt;/span&gt; microSD card I use (5.6G free after &lt;span class="caps"&gt;OS&lt;/span&gt; and software) has space to log about &lt;strong&gt;240 days&lt;/strong&gt; of data at this&amp;nbsp;interval.&lt;/p&gt;
&lt;h2 id="initial-tests"&gt;&lt;a class="toclink" href="#initial-tests"&gt;Initial&amp;nbsp;Tests&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first test, as described above, was just a test of the &amp;#8220;cold fix&amp;#8221; speed for the &lt;span class="caps"&gt;BU&lt;/span&gt;-353-S4 &lt;span class="caps"&gt;GPS&lt;/span&gt; after unboxing. Sitting on the sill inside a residential window with a view of half the sky at best, I got a fix accurate to 3-4 meters within about a&amp;nbsp;minute.&lt;/p&gt;
&lt;p&gt;My next test was placing the &lt;span class="caps"&gt;GPS&lt;/span&gt; on the dash of my car during a quick five-mile trip to the grocery store and gas station. The results were shockingly accurate: not only did the unit perform perfectly as intended, but when I converted the logs to &lt;span class="caps"&gt;GPX&lt;/span&gt; format and used &lt;a href="http://www.gpsvisualizer.com/"&gt;gpsvisualizer.com&lt;/a&gt; to overlay them on Google Maps, I could clearly see my route down to which side of the road I was driving on, the exact space I parked in, and which gas pump I&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;I also did a test of the total time that I can capture data using the 10Ah battery pack and &lt;span class="caps"&gt;8GB&lt;/span&gt; &lt;span class="caps"&gt;SD&lt;/span&gt; card. This might be a very slight amount unrealistic, since the &lt;span class="caps"&gt;GPS&lt;/span&gt; was stationary most of the time. After doing the above driving test I set the &lt;span class="caps"&gt;GPS&lt;/span&gt; up on the inside sill of my bedroom window and let it run. And run. And drove to work the next day with it on the dashboard of my car, left it in the car during my work day (on the bottom floor of a 4-story parking deck, where a &lt;span class="caps"&gt;GPS&lt;/span&gt; fix is impossible to get), drove home, put it back on the window sill, and eventually fell asleep. Sometime during the night, at the 42-hour mark, the battery finally gave out. The total space used for 42 hours of data was approximately&amp;nbsp;&lt;span class="caps"&gt;40MB&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id="source-code"&gt;&lt;a class="toclink" href="#source-code"&gt;Source&amp;nbsp;Code&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For code, detailed hardware information, and instructions see: &lt;a href="https://github.com/jantman/pizero-gpslog"&gt;https://github.com/jantman/pizero-gpslog&lt;/a&gt;.&lt;/p&gt;</content><category term="embedded"></category><category term="gps"></category><category term="hiking"></category><category term="logger"></category><category term="raspberrypi"></category></entry><entry><title>Vyatta NetworkOS router/firewall on Alix board / CompactÂ Flash</title><link href="https://blog.jasonantman.com/2011/09/vyatta-networkos-routerfirewall-on-alix-board-compact-flash/" rel="alternate"></link><published>2011-09-30T14:16:00-04:00</published><updated>2011-09-30T14:16:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2011-09-30:/2011/09/vyatta-networkos-routerfirewall-on-alix-board-compact-flash/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update March 2017&lt;/strong&gt;: I have an updated version of this procedure for VyOS,
the open source community fork of Vyatta, available in a new post:
&lt;a href="/2017/03/vyos-on-alix-2c1-single-board-computer/"&gt;VyOS on Alix 2C1 Single Board Computer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the impending move to an apartment in Georgia and the migration of
my rack full of servers â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Update March 2017&lt;/strong&gt;: I have an updated version of this procedure for VyOS,
the open source community fork of Vyatta, available in a new post:
&lt;a href="/2017/03/vyos-on-alix-2c1-single-board-computer/"&gt;VyOS on Alix 2C1 Single Board Computer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With the impending move to an apartment in Georgia and the migration of
my rack full of servers to a hosting provider, there&amp;#8217;s no longer a need
for me to run my &lt;a href="http://www.vyatta.org/"&gt;Vyatta &lt;span class="caps"&gt;VC&lt;/span&gt;&lt;/a&gt; router on a beefy
dual-&lt;span class="caps"&gt;CPU&lt;/span&gt; RAIDed &lt;a href="http://h18000.www1.hp.com/products/quickspecs/11504_na/11504_na.HTML"&gt;&lt;span class="caps"&gt;DL360&lt;/span&gt;
G3&lt;/a&gt;
&lt;span class="caps"&gt;HP&lt;/span&gt; Proliant server chassis. I found an older PCEngines &lt;a href="http://pcengines.ch/alix2c1.htm"&gt;Alix
2c1&lt;/a&gt; single board computer (433 MHz &lt;span class="caps"&gt;AMD&lt;/span&gt;
Geode &lt;span class="caps"&gt;LX700&lt;/span&gt; , &lt;span class="caps"&gt;128MB&lt;/span&gt; &lt;span class="caps"&gt;DDR&lt;/span&gt; &lt;span class="caps"&gt;DRAM&lt;/span&gt;, CompactFlash (&lt;span class="caps"&gt;CF&lt;/span&gt;) card socket, MiniPCI, 3x
10/100 ethernet) lying around, and decided to turn that into the new
router. But I&amp;#8217;ve been so spoiled by Vyatta&amp;#8217;s good performance (well, at
least on an x86 server) and the &lt;em&gt;real&lt;/em&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt;, so I don&amp;#8217;t think I can go
back to something like &lt;a href="http://m0n0.ch/wall/"&gt;m0n0wall&lt;/a&gt; or
&lt;a href="http://www.pfsense.org/"&gt;pfSense&lt;/a&gt;, and since it&amp;#8217;s going to be my only
network services box (also doing &lt;span class="caps"&gt;DNS&lt;/span&gt;, &lt;span class="caps"&gt;DHCP&lt;/span&gt;, firewalling, &lt;span class="caps"&gt;NAT&lt;/span&gt;, and maybe
IPsec &lt;span class="caps"&gt;VPN&lt;/span&gt;) it&amp;#8217;s not viable to use the type of older Cisco or Juniper
hardware that I can&amp;nbsp;afford.&lt;/p&gt;
&lt;p&gt;The down side is that Vyatta isn&amp;#8217;t really designed or tuned for small
systems, let alone &lt;span class="caps"&gt;CF&lt;/span&gt; media that doesn&amp;#8217;t take too well to lots of
writes. So, I&amp;#8217;m going to begin experimentation with doing a &lt;span class="caps"&gt;CF&lt;/span&gt; install
of the current Vyatta Core 6.3, and we&amp;#8217;ll see how it goes and what
tuning I do over&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;I found two relatively good references; a &lt;a href="http://www.vyatta.org/forum/viewtopic.php?t=502"&gt;post on the vyatta.org
forum&lt;/a&gt; from 2008,
relating to Vyatta version 4 (also on the author&amp;#8217;s
&lt;a href="http://dataflip.blogspot.com/2008/06/optimizing-vyatta-for-compact-flash.html"&gt;blog&lt;/a&gt;),
and a &lt;a href="http://peytongroup.wordpress.com/2010/02/16/vyatta-community-on-a-compact-flash/"&gt;blog
post&lt;/a&gt;
detailing a more complex
&lt;a href="http://squashfs.sourceforge.net/"&gt;SquashFS&lt;/a&gt;/&lt;a href="http://en.wikipedia.org/wiki/Tmpfs"&gt;tmpfs&lt;/a&gt;/&lt;a href="http://unionfs.filesystems.org/"&gt;UnionFS&lt;/a&gt;
read-only Vyatta install. Given my relatively short timeframe and little
free time, I decided to try the former approach for now, and plan to
make a more customized and tuned &lt;span class="caps"&gt;CF&lt;/span&gt; version of Vyatta in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Creating the actual disk&amp;nbsp;image:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;My development platform at the moment is an intel-based MacBook Pro,
running MacOS X 10.6.4 and VirtualBox 4.0.12. As much of a Linux fan as
I am, my work laptop runs Mac (like everyone else in the office) and
lately I can&amp;#8217;t guarantee that I&amp;#8217;ll be at my desktop long enough to
finish anything. The target is an Alix2c1 with a &lt;span class="caps"&gt;2GB&lt;/span&gt; SanDisk Ultra &lt;span class="caps"&gt;CF&lt;/span&gt;
card (yes, I know an industrial card would be better, but I couldn&amp;#8217;t get
my hands on one). For starters, I created a new VirtualBox &lt;span class="caps"&gt;VM&lt;/span&gt; with the
following&amp;nbsp;settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;OS&lt;/span&gt; Type: Linux&amp;nbsp;2.6&lt;/li&gt;
&lt;li&gt;Base Memory:&amp;nbsp;&lt;span class="caps"&gt;128MB&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Boot Order: Floppy, &lt;span class="caps"&gt;CD&lt;/span&gt;-&lt;span class="caps"&gt;ROM&lt;/span&gt;, Hard&amp;nbsp;Disk&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;IDE&lt;/span&gt; Controller Primary: mounted vyatta-livecd_VC6.3 &lt;span class="caps"&gt;ISO&lt;/span&gt;&amp;nbsp;image&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;IDE&lt;/span&gt; Controller Secondary: &lt;span class="caps"&gt;RAW&lt;/span&gt; &lt;span class="caps"&gt;VMDK&lt;/span&gt; image (created&amp;nbsp;below)&lt;/li&gt;
&lt;li&gt;Audio:&amp;nbsp;None&lt;/li&gt;
&lt;li&gt;Network: Disabled &lt;em&gt;(this is important, as Vyatta saves the
    interfaces by hardware address, and it would require some config
    editing and reboots to change&amp;nbsp;them)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Serial Port: disconnected (but&amp;nbsp;present)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One difficulty I ran into on Mac is mounting the raw &lt;span class="caps"&gt;CF&lt;/span&gt; card in the
VirtualBox guest. I plugged it in via a &lt;span class="caps"&gt;USB&lt;/span&gt; reader, and of course it
automatically mounted in MacOS. I ejected it and the &lt;code&gt;/dev/disk1&lt;/code&gt; device
disappeared. It turns out that the full procedure (as far as I could
tell) for Mac&amp;nbsp;is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plug in the &lt;span class="caps"&gt;CF&lt;/span&gt; card and&amp;nbsp;reader.&lt;/li&gt;
&lt;li&gt;It should automount. Run &lt;code&gt;mount&lt;/code&gt; to see what the actual device is -
    in my case, the &lt;code&gt;/dev/disk1s1&lt;/code&gt; partition was mounted, so the disk is
    &lt;code&gt;/dev/disk1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;sudo umount -f /dev/disk1&lt;/code&gt;. It seems that the MacOS automounter
    has a god complex, so you may need to re-run this command quite a
    few times throughout the process if you get device or resource busy&amp;nbsp;errors.&lt;/li&gt;
&lt;li&gt;In an appropriate directory, create the raw &lt;span class="caps"&gt;VMDK&lt;/span&gt; image with:
    &lt;code&gt;VBoxManage internalcommands createrawvmdk -filename rawdisk.vmdk -rawdisk /dev/disk1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When creating your &lt;span class="caps"&gt;VM&lt;/span&gt;, you&amp;#8217;ll have an option to select Use an
    Existing Virtual Disk. Use that option, and select the file created
    in the last&amp;nbsp;step.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once that&amp;#8217;s done, and you&amp;#8217;ve setup the &lt;span class="caps"&gt;VM&lt;/span&gt; with the raw disk, boot the &lt;span class="caps"&gt;VM&lt;/span&gt;
(should boot to the Vyatta LiveCD), login as usual for an install
(vyatta:vyatta), and the the fun&amp;nbsp;begins:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the prompt after logging in, &lt;code&gt;sudo su -&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;/opt/vyatta/sbin/install-system&lt;/code&gt; (hint: Vyatta has nano and vi
    installed. &lt;code&gt;nano -c filename&lt;/code&gt; shows line numbers) and change the
    &lt;code&gt;ROOT_FSTYPE&lt;/code&gt; variable (line 78 in &lt;span class="caps"&gt;VC6&lt;/span&gt;.3) from &amp;#8220;ext4&amp;#8221; to&amp;nbsp;&amp;#8220;ext2&amp;#8221;.&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;install-system&lt;/code&gt;. I used all default options (including one
    partition) and it seemed to work fine. It took a minute or two to
    create the ext2 filesystem on my &lt;span class="caps"&gt;2GB&lt;/span&gt; &lt;span class="caps"&gt;CF&lt;/span&gt;&amp;nbsp;card.&lt;/li&gt;
&lt;li&gt;The file copy took even longer&amp;#8230; so be patient, or have a book&amp;nbsp;handy.&lt;/li&gt;
&lt;li&gt;When system-install finishes and you get the root prompt back,
    before rebooting, continue with some minor&amp;nbsp;tweaks:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mkdir /mnt/temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mount /dev/sda1 /mnt/temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd /mnt/temp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;boot/grub/grub.cfg&lt;/code&gt; and change all occurrences of
    &amp;#8220;root=&lt;span class="caps"&gt;UUID&lt;/span&gt;=&amp;#8230;&amp;#8221; entries for the &amp;#8220;linux&amp;#8221; lines (lines 13, 18, 23, 28
    in my grub.cfg) to &amp;#8220;root=/dev/sda1&amp;#8221;. My only real reason for this
    change is so that I can move my altered config files (config.boot,
    fstab and grub.cfg) with minimal changes when I upgrade or make a
    different vyatta &lt;span class="caps"&gt;CF&lt;/span&gt; card, without having to update the &lt;span class="caps"&gt;UUID&lt;/span&gt; for the
    new&amp;nbsp;partition.&lt;/li&gt;
&lt;li&gt;Edit &lt;code&gt;etc/fstab&lt;/code&gt; and change the &amp;#8220;&lt;span class="caps"&gt;UUID&lt;/span&gt;=&amp;#8230;&amp;#8221; device to&amp;nbsp;&amp;#8221;/dev/sda1&amp;#8221;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;shutdown&lt;/code&gt;. Once the &lt;span class="caps"&gt;VM&lt;/span&gt; is stopped, you can remove the &lt;span class="caps"&gt;CF&lt;/span&gt;&amp;nbsp;card.&lt;/li&gt;
&lt;li&gt;The PCEngines Alix.2 boards use a default serial console speed of
    38400 baud. Pretty much every network device, plus Linux and Vyatta,
    use a default speed of 9600 baud. Once I got the &lt;span class="caps"&gt;CF&lt;/span&gt; card installed
    in the Alix board and hooked it up to my laptop (null modem cable to
    a &lt;span class="caps"&gt;PL&lt;/span&gt;-2303 based &lt;span class="caps"&gt;USB&lt;/span&gt; to serial adapter, minicom for terminal
    emulation), I set my terminal emulator to 38400 8N1, powered the
    board, and then pressed &amp;#8216;s&amp;#8217; during &lt;span class="caps"&gt;POST&lt;/span&gt; to get into &lt;span class="caps"&gt;BIOS&lt;/span&gt; settings.
    Option &amp;#8216;9&amp;#8217; sets the Alix to 9600 baud, &amp;#8216;Q&amp;#8217; to quit, and &amp;#8216;Y&amp;#8217; to save
    changes permanently. The board will reboot, and once the terminal
    emulator is set back to 9600 baud, serial console should work fine
    both in &lt;span class="caps"&gt;BIOS&lt;/span&gt; and in the&amp;nbsp;&lt;span class="caps"&gt;OS&lt;/span&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If all worked well, you should be able to boot into Vyatta and login as
the default &amp;#8220;vyatta&amp;#8221; user (which you set a password for during the
install). Assuming you know your way around Vyatta, it&amp;#8217;s pretty standard
from here, though there are a few things you may want to check or
configure right&amp;nbsp;away:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In configuration mode (&lt;code&gt;configure&lt;/code&gt;) run &lt;code&gt;show interfaces&lt;/code&gt;. All of
    your physical ethernet interfaces should appear, along with their
    &lt;span class="caps"&gt;MAC&lt;/span&gt;&amp;nbsp;addresses.&lt;/li&gt;
&lt;li&gt;Some changes to reduce the number of log writes to the &lt;span class="caps"&gt;CF&lt;/span&gt; card:
    &lt;code&gt;set system syslog console facility all level notice&lt;/code&gt; and
    &lt;code&gt;set system syslog global facility protocols level notice&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Configure interfaces. with firewalls, &lt;span class="caps"&gt;IP&lt;/span&gt; addresses or &lt;span class="caps"&gt;DHCP&lt;/span&gt;,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;Do whatever other configuration you need for a minimal system -
    dhcp, dns, nat,&amp;nbsp;etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that&amp;#8217;s it - this should give you a working Vyatta system on &lt;span class="caps"&gt;CF&lt;/span&gt; on an
Alix board. Stay tuned, hopefully in a month or so I&amp;#8217;ll get around to
customizing it a bit more, based on the second blog entry linked&amp;nbsp;above.&lt;/p&gt;</content><category term="alix"></category><category term="embedded"></category><category term="network"></category><category term="pcengines"></category><category term="router"></category><category term="vyatta"></category></entry><entry><title>Netgear ReadyNAS 1100 Bug causes NFS Failure after reboot -Â workaround</title><link href="https://blog.jasonantman.com/2011/06/netgear-readynas-1100-bug-causes-nfs-failure-after-reboot-workaround/" rel="alternate"></link><published>2011-06-28T08:40:00-04:00</published><updated>2011-06-28T08:40:00-04:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2011-06-28:/2011/06/netgear-readynas-1100-bug-causes-nfs-failure-after-reboot-workaround/</id><summary type="html">&lt;p&gt;At work, we have a &lt;a href="http://www.readynas.com/?cat=23"&gt;Netgear ReadyNAS
1100&lt;/a&gt;. It&amp;#8217;s a &lt;span class="caps"&gt;4TB&lt;/span&gt; &lt;span class="caps"&gt;NAS&lt;/span&gt; appliance, a cute
little 1U half-depth Linux box with 4 &lt;span class="caps"&gt;SATA&lt;/span&gt; disks, a &lt;span class="caps"&gt;RAID&lt;/span&gt; controller, and
some firmware to do a whole bunch of fancy stuff (mainly geared towards
consumers and very small shops - all configuration is â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;At work, we have a &lt;a href="http://www.readynas.com/?cat=23"&gt;Netgear ReadyNAS
1100&lt;/a&gt;. It&amp;#8217;s a &lt;span class="caps"&gt;4TB&lt;/span&gt; &lt;span class="caps"&gt;NAS&lt;/span&gt; appliance, a cute
little 1U half-depth Linux box with 4 &lt;span class="caps"&gt;SATA&lt;/span&gt; disks, a &lt;span class="caps"&gt;RAID&lt;/span&gt; controller, and
some firmware to do a whole bunch of fancy stuff (mainly geared towards
consumers and very small shops - all configuration is point-and-click
web &lt;span class="caps"&gt;UI&lt;/span&gt;). We&amp;#8217;ve been using it for storing archived log data and
low-priority backups. At the beginning of this problem, it was running
RAIDiator 4.1.6 firmware since December of last year (over 6 months),
and hadn&amp;#8217;t had any configuration changes in at least 4&amp;nbsp;months.&lt;/p&gt;
&lt;p&gt;Last week, I had to power off the unit and remove the power cables for
some rack maintenance. I went through the usual full shutdown procedure
in the web &lt;span class="caps"&gt;UI&lt;/span&gt;, and also told it to `fsck` the volumes, as that hadn&amp;#8217;t
been done in quite some time. Unfortunately, when the unit came back up,
even after I could log into the web &lt;span class="caps"&gt;UI&lt;/span&gt;, I couldn&amp;#8217;t mount the &lt;span class="caps"&gt;NFS&lt;/span&gt; shares
on my backup server. I kept getting messages&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[root@backup-server ~]#&lt;/span&gt; mount -a
&lt;span class="go"&gt;mount: mount to &lt;span class="caps"&gt;NFS&lt;/span&gt; server &amp;#39;css-readynas&amp;#39; failed: &lt;span class="caps"&gt;RPC&lt;/span&gt; Error: Program not registered.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so my next step was to check &lt;span class="caps"&gt;RPC&lt;/span&gt; status of the readynas, from the
client. That was also a bit of a&amp;nbsp;surprise:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[root@backup-server ~]#&lt;/span&gt; rpcinfo -p css-readynas                        
&lt;span class="go"&gt;   program vers proto   port                                              &lt;/span&gt;
&lt;span class="go"&gt;    100000    2   tcp    111  portmapper                                  &lt;/span&gt;
&lt;span class="go"&gt;    100000    2   udp    111  portmapper                                  &lt;/span&gt;
&lt;span class="go"&gt;    100011    1   udp    620  rquotad                                     &lt;/span&gt;
&lt;span class="go"&gt;    100011    2   udp    620  rquotad                                     &lt;/span&gt;
&lt;span class="go"&gt;    100011    1   tcp    623  rquotad                                     &lt;/span&gt;
&lt;span class="go"&gt;    100011    2   tcp    623  rquotad                                     &lt;/span&gt;
&lt;span class="go"&gt;    100024    1   udp  32765  status                                      &lt;/span&gt;
&lt;span class="go"&gt;    100024    1   tcp  32765  status                                      &lt;/span&gt;
&lt;span class="go"&gt;    100005    1   udp   2051  mountd                                      &lt;/span&gt;
&lt;span class="go"&gt;    100005    1   tcp   3006  mountd                                      &lt;/span&gt;
&lt;span class="go"&gt;    100005    2   udp   2051  mountd                                      &lt;/span&gt;
&lt;span class="go"&gt;    100005    2   tcp   3006  mountd                                      &lt;/span&gt;
&lt;span class="go"&gt;    100005    3   udp   2051  mountd                                      &lt;/span&gt;
&lt;span class="go"&gt;    100005    3   tcp   3006  mountd &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Somewhere in that list is supposed to be nfsd, listening on port 2049.
Next, I did an nmap (port scan) of the&amp;nbsp;readynas:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[root@backup-server ~]#&lt;/span&gt; nmap -sU -p2047-2050 css-readynas             

&lt;span class="go"&gt;Starting Nmap 4.11 ( http://www.insecure.org/nmap/ ) at 2011-06-23 15:21 &lt;span class="caps"&gt;EDT&lt;/span&gt;&lt;/span&gt;
&lt;span class="go"&gt;Interesting ports on css-readynas.rutgers.edu (172.16.25.108):              &lt;/span&gt;
&lt;span class="go"&gt;&lt;span class="caps"&gt;PORT&lt;/span&gt;     &lt;span class="caps"&gt;STATE&lt;/span&gt;         &lt;span class="caps"&gt;SERVICE&lt;/span&gt;                                              &lt;/span&gt;
&lt;span class="go"&gt;2047/udp closed        dls                                                  &lt;/span&gt;
&lt;span class="go"&gt;2048/udp closed        dls-monitor                                          &lt;/span&gt;
&lt;span class="go"&gt;2049/udp open|filtered nfs                                                  &lt;/span&gt;
&lt;span class="go"&gt;2050/udp closed        unknown  &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Interesting. The port scan shows that &lt;em&gt;something&lt;/em&gt; is listening on port
2049. But rpcinfo doesn&amp;#8217;t seem to recognize it as a &lt;span class="caps"&gt;NFS&lt;/span&gt;&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;At this point, through FrontView (the web &lt;span class="caps"&gt;UI&lt;/span&gt;) I backed up the
configuration and went through a few reboot cycles, with no change. I
then started tweaking everything I could that I thought would restart
the &lt;span class="caps"&gt;NFS&lt;/span&gt; server - I added and removed allowed hosts for the &lt;span class="caps"&gt;NFS&lt;/span&gt; share,
enabled and disabled sync mode, etc. I started searching the &lt;a href="http://www.readynas.com/forum/"&gt;ReadyNAS
Forum&lt;/a&gt; and found a post that reported a
very similar problem - &lt;a href="http://www.readynas.com/forum/viewtopic.php?f=20&amp;amp;t=23139"&gt;upnpd grabbing nfsd
port&lt;/a&gt;. The
user reported that he was getting the same &amp;#8220;&lt;span class="caps"&gt;RPC&lt;/span&gt; Error: Program not
registered&amp;#8221; message, and in &lt;code&gt;daemon.log&lt;/code&gt; on the ReadyNAS, found a line
including &amp;#8220;storage nfsd[1087]: nfssvc: Address already in use&amp;#8221;. I
remembered that I&amp;#8217;d setup the ReadyNAS to forward all logs to our
central syslog server and, sure enough, found an identical message that
something had already bound to &lt;span class="caps"&gt;UDP&lt;/span&gt; port 2049 when &lt;span class="caps"&gt;NFS&lt;/span&gt; was starting. I
tried confirming that upnpd was disabled and rebooting, but that didn&amp;#8217;t
help. Grepping my logs for &amp;#8220;nfs&amp;#8221;&amp;nbsp;returned:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;daemon.log:Jun 23 12:43:43 css-readynas nfsd[2331]: nfssvc: Address already in use
daemon.log:Jun 23 15:26:33 css-readynas nfsd[2724]: nfssvc: Address already in use
kern.log:Jun 23 11:35:29 css-readynas kernel: Installing knfsd (copyright (C) 1996 okir@monad.swb.de).
kern.log:Jun 23 12:43:43 css-readynas kernel: &lt;span class="caps"&gt;NFSD&lt;/span&gt;: Using /var/lib/nfs/v4recovery as the NFSv4 state recovery directory
kern.log:Jun 23 12:43:43 css-readynas kernel: &lt;span class="caps"&gt;NFSD&lt;/span&gt;: starting 90-second grace period
kern.log:Jun 23 14:56:20 css-readynas kernel: Installing knfsd (copyright (C) 1996 okir@monad.swb.de).
kern.log:Jun 23 15:12:41 css-readynas kernel: &lt;span class="caps"&gt;NFSD&lt;/span&gt;: starting 90-second grace period
kern.log:Jun 23 15:26:33 css-readynas kernel: &lt;span class="caps"&gt;NFSD&lt;/span&gt;: Using /var/lib/nfs/v4recovery as the NFSv4 state recovery directory
kern.log:Jun 23 15:26:33 css-readynas kernel: &lt;span class="caps"&gt;NFSD&lt;/span&gt;: starting 90-second grace period
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My next step was a few more reboots, with no change. I then upgraded the
RAIDiator firmware to the latest, 4.1.7. Still no luck. I installed the
&lt;a href="http://www.readynas.com/?p=4203"&gt;Enable root &lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/a&gt; addon, and that&amp;#8217;s
when things became very&amp;nbsp;clear:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;css-readynas:/var/log#&lt;/span&gt; netstat -unlp
&lt;span class="go"&gt;Active Internet connections (only servers)&lt;/span&gt;
&lt;span class="go"&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State       &lt;span class="caps"&gt;PID&lt;/span&gt;/Program name   &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:2049            0.0.0.0:*                           794/snmpd           &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:514             0.0.0.0:*                           673/syslogd         &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 172.16.25.108:137       0.0.0.0:*                           1672/nmbd           &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:137             0.0.0.0:*                           1672/nmbd           &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 172.16.25.108:138       0.0.0.0:*                           1672/nmbd           &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:138             0.0.0.0:*                           1672/nmbd           &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:161             0.0.0.0:*                           794/snmpd           &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:162             0.0.0.0:*                           802/snmptrapd       &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:2086            0.0.0.0:*                           1565/rpc.mountd     &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 127.0.0.1:22081         0.0.0.0:*                           1599/raidard        &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 172.16.25.108:22081     0.0.0.0:*                           1599/raidard        &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:22081           0.0.0.0:*                           1599/raidard        &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:988             0.0.0.0:*                           819/rpc.rquotad     &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:5353            0.0.0.0:*                           729/avahi-daemon: r &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:111             0.0.0.0:*                           666/portmap         &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:881             0.0.0.0:*                           1553/rpc.statd      &lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:32765           0.0.0.0:*                           1553/rpc.statd     &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For some &lt;strong&gt;&lt;em&gt;very&lt;/em&gt;&lt;/strong&gt; strange reason, snmpd had bound to port 2049 (the
nfs port) instead of 161. That left no port for nfs to bind&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;css-readynas:/var/log#&lt;/span&gt; /etc/init.d/snmpd stop                                                       
&lt;span class="go"&gt;Stopping network management services: snmpd snmptrapd readynas-agent.                               &lt;/span&gt;
&lt;span class="gp"&gt;css-readynas:/var/log#&lt;/span&gt; /etc/init.d/nfs-kernel-server start
&lt;span class="go"&gt;Exporting directories for &lt;span class="caps"&gt;NFS&lt;/span&gt; kernel daemon...done.&lt;/span&gt;
&lt;span class="go"&gt;Starting &lt;span class="caps"&gt;NFS&lt;/span&gt; kernel daemon:mount: nfsd already mounted or /proc/fs/nfsd/ busy&lt;/span&gt;
&lt;span class="go"&gt;mount: according to mtab, nfsd is mounted on /proc/fs/nfsd&lt;/span&gt;
&lt;span class="go"&gt; statd nfsd mountd.&lt;/span&gt;
&lt;span class="gp"&gt;css-readynas:/var/log#&lt;/span&gt; /etc/init.d/snmpd start
&lt;span class="go"&gt;Starting network management services: snmpd snmptrapd readynas-agent.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Stop snmpd, restart nfs-kernel-server so that it grabs port 2049 like it
should, and then start snmpd back up. If all went well, nfsd should now
be listening on &lt;span class="caps"&gt;UDP&lt;/span&gt; 2049, and snmpd should be listening on &lt;span class="caps"&gt;UDP&lt;/span&gt; 161 like
it should. To&amp;nbsp;confirm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;css-readynas:/var/log#&lt;/span&gt; netstat -unlp
&lt;span class="go"&gt;Active Internet connections (only servers)&lt;/span&gt;
&lt;span class="go"&gt;Proto Recv-Q Send-Q Local Address           Foreign Address         State       &lt;span class="caps"&gt;PID&lt;/span&gt;/Program name&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:2049            0.0.0.0:*                           -&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:514             0.0.0.0:*                           673/syslogd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 172.16.25.108:137       0.0.0.0:*                           1672/nmbd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:137             0.0.0.0:*                           1672/nmbd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 172.16.25.108:138       0.0.0.0:*                           1672/nmbd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:138             0.0.0.0:*                           1672/nmbd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:161             0.0.0.0:*                           26161/snmpd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:162             0.0.0.0:*                           26163/snmptrapd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:2086            0.0.0.0:*                           1565/rpc.mountd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 127.0.0.1:22081         0.0.0.0:*                           1599/raidard&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 172.16.25.108:22081     0.0.0.0:*                           1599/raidard&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:22081           0.0.0.0:*                           1599/raidard&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:988             0.0.0.0:*                           819/rpc.rquotad&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:5353            0.0.0.0:*                           729/avahi-daemon: r&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:2158            0.0.0.0:*                           -&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:111             0.0.0.0:*                           666/portmap&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:2160            0.0.0.0:*                           26161/snmpd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:881             0.0.0.0:*                           1553/rpc.statd&lt;/span&gt;
&lt;span class="go"&gt;udp        0      0 0.0.0.0:32765           0.0.0.0:*                           1553/rpc.statd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All is well. Now to confirm this from the client&amp;nbsp;machine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;[root@backup-server ~]#&lt;/span&gt; rpcinfo -p css-readynas
&lt;span class="go"&gt;   program vers proto   port&lt;/span&gt;
&lt;span class="go"&gt;    100000    2   tcp    111  portmapper&lt;/span&gt;
&lt;span class="go"&gt;    100000    2   udp    111  portmapper&lt;/span&gt;
&lt;span class="go"&gt;    100011    1   udp    988  rquotad&lt;/span&gt;
&lt;span class="go"&gt;    100011    2   udp    988  rquotad&lt;/span&gt;
&lt;span class="go"&gt;    100011    1   tcp    991  rquotad&lt;/span&gt;
&lt;span class="go"&gt;    100011    2   tcp    991  rquotad&lt;/span&gt;
&lt;span class="go"&gt;    100024    1   udp  32765  status&lt;/span&gt;
&lt;span class="go"&gt;    100024    1   tcp  32765  status&lt;/span&gt;
&lt;span class="go"&gt;    100005    1   udp   2086  mountd&lt;/span&gt;
&lt;span class="go"&gt;    100005    1   tcp   3131  mountd&lt;/span&gt;
&lt;span class="go"&gt;    100005    2   udp   2086  mountd&lt;/span&gt;
&lt;span class="go"&gt;    100005    2   tcp   3131  mountd&lt;/span&gt;
&lt;span class="go"&gt;    100005    3   udp   2086  mountd&lt;/span&gt;
&lt;span class="go"&gt;    100005    3   tcp   3131  mountd&lt;/span&gt;
&lt;span class="go"&gt;    100003    2   udp   2049  nfs&lt;/span&gt;
&lt;span class="go"&gt;    100003    3   udp   2049  nfs&lt;/span&gt;
&lt;span class="go"&gt;    100003    4   udp   2049  nfs&lt;/span&gt;
&lt;span class="go"&gt;    100003    2   tcp   2049  nfs&lt;/span&gt;
&lt;span class="go"&gt;    100003    3   tcp   2049  nfs&lt;/span&gt;
&lt;span class="go"&gt;    100003    4   tcp   2049  nfs&lt;/span&gt;
&lt;span class="go"&gt;    100021    1   udp   2158  nlockmgr&lt;/span&gt;
&lt;span class="go"&gt;    100021    3   udp   2158  nlockmgr&lt;/span&gt;
&lt;span class="go"&gt;    100021    4   udp   2158  nlockmgr&lt;/span&gt;
&lt;span class="go"&gt;    100021    1   tcp   4189  nlockmgr&lt;/span&gt;
&lt;span class="go"&gt;    100021    3   tcp   4189  nlockmgr&lt;/span&gt;
&lt;span class="go"&gt;    100021    4   tcp   4189  nlockmgr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok, &lt;span class="caps"&gt;NFS&lt;/span&gt; is now there. It all looks good, and re-running &lt;code&gt;mount -a&lt;/code&gt; on
the client successfully mounts the &lt;span class="caps"&gt;NFS&lt;/span&gt;&amp;nbsp;share.&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll see what happens next time I have to reboot the ReadyNAS. In the
mean time, I&amp;#8217;m going to try to bring this to the attention of Netgear
support and hope they do something about&amp;nbsp;it.&lt;/p&gt;</content><category term="appliance"></category><category term="embedded"></category><category term="linux"></category><category term="nas"></category><category term="netgear"></category><category term="nfs"></category><category term="readynas"></category></entry><entry><title>The ultimate Geek alarmÂ clock!</title><link href="https://blog.jasonantman.com/2007/01/the-ultimate-geek-alarm-clock/" rel="alternate"></link><published>2007-01-16T22:55:00-05:00</published><updated>2007-01-16T22:55:00-05:00</updated><author><name>admin</name></author><id>tag:blog.jasonantman.com,2007-01-16:/2007/01/the-ultimate-geek-alarm-clock/</id><summary type="html">&lt;p&gt;So, here&amp;#8217;s an idea that I&amp;#8217;ve been toying around with for a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been dong some development on a pair of
&lt;a href="http://www.soekris.com"&gt;Soekris&lt;/a&gt; embedded Linix boards I bought to use
as a firewall/router and &lt;span class="caps"&gt;WAP&lt;/span&gt;. So, naturally, my interest in embedded
systems is piqued. I know â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, here&amp;#8217;s an idea that I&amp;#8217;ve been toying around with for a&amp;nbsp;while.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been dong some development on a pair of
&lt;a href="http://www.soekris.com"&gt;Soekris&lt;/a&gt; embedded Linix boards I bought to use
as a firewall/router and &lt;span class="caps"&gt;WAP&lt;/span&gt;. So, naturally, my interest in embedded
systems is piqued. I know that there are some smaller embedded Linux
devices out there. So, the idea is as&amp;nbsp;follows:&lt;/p&gt;
&lt;p&gt;Get an embedded Linux box that is either PoE or uses a hardwired
connection with a wall-wart, or better yet, uses both, so it can be
designed to have PoE as the primary power, with a 9v battery backup (ok,
it won&amp;#8217;t run too long, but can handle minor power losses if the PoE
switch isn&amp;#8217;t on a&amp;nbsp;&lt;span class="caps"&gt;UPS&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;Attach to it a clock-style &lt;span class="caps"&gt;LED&lt;/span&gt; display, or a matrix &lt;span class="caps"&gt;LED&lt;/span&gt; display, and an
additional really bright red &lt;span class="caps"&gt;LED&lt;/span&gt;, both controlled by software (serial or&amp;nbsp;&lt;span class="caps"&gt;GPIO&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;The system has one &lt;span class="caps"&gt;RJ&lt;/span&gt;-45 connector for Ethernet (10-BaseT) and a serial
console. The console is a captive login to a setup program to define &lt;span class="caps"&gt;IP&lt;/span&gt;,
etc. but by default uses&amp;nbsp;&lt;span class="caps"&gt;DHCP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Plug it in, and it queries your &lt;span class="caps"&gt;DHCP&lt;/span&gt; server for an &lt;span class="caps"&gt;NTP&lt;/span&gt; server (or in the
absence of one, uses a default Stratum 2). We re-update the time every
day or so. Now, you have an accurate-to-the-second&amp;nbsp;clock.&lt;/p&gt;
&lt;p&gt;We add a speaker to the box, and have a few default built-in MP3s or
WAVs for alarm tones, and add a &lt;span class="caps"&gt;GPIO&lt;/span&gt; &amp;#8220;snooze&amp;#8221; and &amp;#8220;off&amp;#8221;&amp;nbsp;button.&lt;/p&gt;
&lt;p&gt;The serial console allows setting a daily alarm or two, as well as
selecting one of the default&amp;nbsp;tones.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Geekier Part:&lt;/strong&gt;
The alarm clock is controlled by a script called by a Cron job. Now, we
add the miniserv web server and a &lt;span class="caps"&gt;PHP&lt;/span&gt; admin gateway. Login via a
password (user-selectable) and we can upload new audio files for alarms,
as well as adding alarms via the web as cron jobs - now I can program in
my class schedule, and automatically have an alarm at the right time
each day of the&amp;nbsp;week!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Geekiest Part:&lt;/strong&gt;
Remember the matrix display and that additional really bright &lt;span class="caps"&gt;LED&lt;/span&gt;? We
setup simple communication between machines via &lt;span class="caps"&gt;SNMP&lt;/span&gt; or a script on the
clock (called with an Expect script on a remote machine) and we can
activate the super-bright &lt;span class="caps"&gt;LED&lt;/span&gt;, a custom sound, and even a scrolling
message on the &lt;span class="caps"&gt;LED&lt;/span&gt; display (alternates between message and time, of
course) for critical events. Now, when the servers go down, I have
another device (in addition to the &lt;span class="caps"&gt;SMS&lt;/span&gt; alerts on my cell) to tell me to
wake up and deal with it. If we want to get even more fancy, we can
enable a feature through the serial console or web interface that emits
a loud tone for a few seconds and blinks the &lt;span class="caps"&gt;LED&lt;/span&gt; if PoE is lost, or we
can&amp;#8217;t ping a user-selectable address for more than, say, one&amp;nbsp;minute.&lt;/p&gt;
&lt;p&gt;I guess I have too much free time on my&amp;nbsp;hands..&lt;/p&gt;</content><category term="alarm clock"></category><category term="embedded"></category><category term="geek"></category><category term="PoE"></category></entry></feed>