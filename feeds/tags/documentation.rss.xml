<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jason Antman's Blog</title><link>http://blog.jasonantman.com/</link><description></description><atom:link href="http://blog.jasonantman.com/feeds/tags/documentation.rss.xml" rel="self"></atom:link><lastBuildDate>Thu, 02 Feb 2012 11:02:00 -0500</lastBuildDate><item><title>Using Templates to Track Outdated Content in a Documentation MediaWiki</title><link>http://blog.jasonantman.com/2012/02/using-templates-to-track-outdated-content-in-a-documentation-mediawiki/</link><description>&lt;p&gt;Both my last and current jobs use &lt;a href="http://www.mediawiki.org/"&gt;MediaWiki&lt;/a&gt;
for internal documentation. As always happens, some of this
documentation will inevitably get out-of-date, or totally deprecated. As
is also the case, many times when we&amp;#8217;re looking for docs in the middle
of an incident, we don&amp;#8217;t have the time to go back and fix what&amp;#8217;s wrong.
So, I devised the following template/category system to help keep track
of these problem&amp;nbsp;pages.&lt;/p&gt;
&lt;p&gt;First, create some templates that you will apply to the problem pages. I
use three - one for totally deprecated pages, one for pages that need
updating, and one for pages that just need cleanup. For the cleanup
template, in the MediaWiki search box, enter &amp;#8220;Template:Cleanup&amp;#8221; and
click &amp;#8220;go&amp;#8221;. You should be told that the page doesn&amp;#8217;t exist, and given a
link to create the page. Create it, and enter the following&amp;nbsp;content:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[[Image:Cleanup.png]]

&amp;#39;&amp;#39;&amp;#39;This page needs to be cleaned up or reorganized.&amp;#39;&amp;#39;&amp;#39;

[[Category:Pages Needing Cleanup]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we create a category page for it, &amp;#8220;Category:Pages Needing Cleanup&amp;#8221;,
with the&amp;nbsp;content:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;__HIDDENCAT__

This category is for pages that are mostly correct and just need minor corrections or reorganization.

&amp;#39;&amp;#39;&amp;#39;To add pages to this category&amp;#39;&amp;#39;&amp;#39;, include the following at the &amp;#39;&amp;#39;&amp;#39;TOP&amp;#39;&amp;#39;&amp;#39; of the page:

{{cleanup}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and save the&amp;nbsp;page.&lt;/p&gt;
&lt;p&gt;Now there&amp;#8217;s a few other changes we need to make. First, upload the
Cleanup.png graphic, which I got from wikimedia.org
&lt;a href="http://upload.wikimedia.org/wikipedia/en/thumb/f/f2/Edit-clear.svg/40px-Edit-clear.svg.png"&gt;here&lt;/a&gt;
and uploaded as&amp;nbsp;Cleanup.png.&lt;/p&gt;
&lt;p&gt;If you refresh the Template:Cleanup page, you should now see the image.
On a side note, &amp;#8220;__HIDDENCAT__&amp;#8221; on the category page prevents that
category from showing up in the category list at the bottom of the pages
we add to it, but this only works in MediaWiki 1.13 and&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;The last step is to add the &lt;a href="http://www.mediawiki.org/wiki/Template:Mbox"&gt;MediaWiki mbox
template&lt;/a&gt; and its
dependencies. While I did this once before, I didn&amp;#8217;t really remember the
steps, but I found a post on &lt;a href="http://glynor.com/2010/05/the-trouble-with-ambox-and-mbox/"&gt;Glynor&amp;#8217;s
blog&lt;/a&gt; that
details them rather&amp;nbsp;nicely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Enable the &lt;a href="http://www.mediawiki.org/wiki/Extension:ParserFunctions"&gt;ParserFunctions
    extension&lt;/a&gt;.
    There are download and install instructions on the extension page,
    but you&amp;#8217;ll want to enable string functions. To do this, include the
    extension in LocalSettings.php&amp;nbsp;like:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="x"&gt;require_once( &amp;quot;$&lt;span class="caps"&gt;IP&lt;/span&gt;/extensions/ParserFunctions/ParserFunctions.php&amp;quot; );&lt;/span&gt;
&lt;span class="x"&gt;$wgPFEnableStringFunctions = true;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new page in your wiki called &amp;#8220;Mediawiki:Common.css&amp;#8221;, and
    paste in the content from &lt;a href="http://www.mediawiki.org/wiki/MediaWiki:Common.css"&gt;MediaWiki.org
    MediaWiki:Common.css&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Go to &lt;a href="http://en.wikipedia.org/w/index.php?title=Special:Export"&gt;Wikipedia&amp;#8217;s
    Special:Export&lt;/a&gt;
    page, and enter &amp;#8220;Template:Ambox&amp;#8221; in the box, check off &amp;#8220;Include
    templates&amp;#8221;, and export the template (and all dependencies) to a
    local &lt;span class="caps"&gt;XML&lt;/span&gt;&amp;nbsp;file.&lt;/li&gt;
&lt;li&gt;Go to the &amp;#8220;Special:Import&amp;#8221; page of your wiki, and upload the &lt;span class="caps"&gt;XML&lt;/span&gt;
    file you just grabbed from Wikipedia. This will import the Ambox and
    mbox templates, as well as their&amp;nbsp;dependencies.&lt;/li&gt;
&lt;li&gt;Now, if you go back and refresh the Template:Cleanup page you
    created, you should see the icon and a nice message&amp;nbsp;box:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="cleanup message box" src="/GFX/mw_cleanup.png" /&gt;&lt;/p&gt;
&lt;p&gt;Finally, add the template and category pages for update and&amp;nbsp;deprecated:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;Template:Update&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[[Image:Warning.png]]

&amp;#39;&amp;#39;&amp;#39;This page is in need of updating. Some information on it may be out of date, and should not be relied on.&amp;#39;&amp;#39;&amp;#39;

[[Category:Pages Needing Updates]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Category:Pages Needing Updates&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;__HIDDENCAT__

This category keeps track of pages that need changes or updates.

&amp;#39;&amp;#39;&amp;#39;To add pages to this category&amp;#39;&amp;#39;&amp;#39;, include the following at the &amp;#39;&amp;#39;&amp;#39;TOP&amp;#39;&amp;#39;&amp;#39; of the page:

{{update}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Template:Deprecated&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[[Image:Critical.png]]

&amp;#39;&amp;#39;&amp;#39;The information on this page is badly out-of-date.&amp;#39;&amp;#39;&amp;#39; It describes a system that is no longer in production or has drastically changed, and &amp;#39;&amp;#39;&amp;#39;needs to be updated or rewritten&amp;#39;&amp;#39;&amp;#39;.

[[Category:Deprecated Content]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Category:Deprecated Content&lt;/code&gt;&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt; __HIDDENCAT__

This category keeps track of pages that are &amp;#39;&amp;#39;&amp;#39;seriously old&amp;#39;&amp;#39;&amp;#39; or otherwise describe systems/hosts/etc. that have seriously changed from what is described in the page.

&amp;#39;&amp;#39;&amp;#39;To add pages to this category&amp;#39;&amp;#39;&amp;#39;, include the following at the &amp;#39;&amp;#39;&amp;#39;TOP&amp;#39;&amp;#39;&amp;#39; of the page:

{{deprecated}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the download the two images -
&lt;a href="http://upload.wikimedia.org/wikipedia/commons/9/98/Ambox_deletion.png"&gt;http://upload.wikimedia.org/wikipedia/commons/9/98/Ambox_deletion.png&lt;/a&gt;
gets uploaded as Critical.png and
&lt;a href="http://upload.wikimedia.org/wikipedia/en/f/f4/Ambox_content.png"&gt;http://upload.wikimedia.org/wikipedia/en/f/f4/Ambox_content.png&lt;/a&gt;
gets uploaded as&amp;nbsp;Warning.png.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it. To use this, just add &lt;code&gt;{{cleanup}}&lt;/code&gt;, &lt;code&gt;{{deprecated}}&lt;/code&gt; or
&lt;code&gt;{{update}}&lt;/code&gt; to the top of a wiki article (adding the &lt;span class="caps"&gt;HTML&lt;/span&gt; comment
before it is also recommended), and it will add the page to the
appropriate category and show a nice message box at the top of the&amp;nbsp;page:  &lt;/p&gt;
&lt;p&gt;Cleanup:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="cleanup message box" src="/GFX/mw_cleanup.png" /&gt;  &lt;/p&gt;
&lt;p&gt;Update:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="update message box" src="/GFX/mw_update.png" /&gt;  &lt;/p&gt;
&lt;p&gt;Deprecated:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="deprecated message box" src="/GFX/mw_deprecated.png" /&gt;&lt;/p&gt;
&lt;p&gt;I also add a link to the top of the main wiki&amp;nbsp;page:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Things that need to be done: [[:Category:Pages Needing Updates|Pages Needing Updates]], [[:Category:Deprecated Content|Pages with Largely Deprecated Content]], [[:Category:Pages Needing Cleanup|Pages Needing Cleanup]], [[Special:WantedPages|Links to Nonexistent Pages]]
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Thu, 02 Feb 2012 11:02:00 -0500</pubDate><guid>tag:blog.jasonantman.com,2012-02-02:2012/02/using-templates-to-track-outdated-content-in-a-documentation-mediawiki/</guid><category>documentation</category><category>mediawiki</category><category>sysadmin</category></item><item><title>Documentation generation for web apps - PHP and JavaScript</title><link>http://blog.jasonantman.com/2010/08/documentation-generation-for-web-apps-php-and-javascript/</link><description>&lt;p&gt;Recently I&amp;#8217;ve been making some changes to a relatively complex ePCR
(electronic patient care report) program that I wrote for the &lt;a href="http://www.midlandparkambulance.com"&gt;ambulance
corps&lt;/a&gt;. It&amp;#8217;s a web application
(available only on our &lt;span class="caps"&gt;LAN&lt;/span&gt;, of course) written in &lt;span class="caps"&gt;PHP&lt;/span&gt;, with a relatively
large chunk of custom javascript to provide Ajax/&lt;span class="caps"&gt;DHTML&lt;/span&gt; functions. Most
of the &lt;span class="caps"&gt;PHP&lt;/span&gt; code was already documented and processed with
&lt;a href="http://www.phpdoc.org/"&gt;phpDocumentor&lt;/a&gt; (phpdoc) to generate &lt;span class="caps"&gt;API&lt;/span&gt;
documentation. However, since so much of the functionality is
&lt;span class="caps"&gt;DHTML&lt;/span&gt;-based, there was a lot of looking back to the JavaScript source to
figure out what was called&amp;nbsp;where.&lt;/p&gt;
&lt;p&gt;My search for a true multi-language documentation generator was
relatively fruitless. There&amp;#8217;s
&lt;a href="http://www.stack.nl/~dimitri/doxygen/"&gt;doxygen&lt;/a&gt; but that needed a Perl
helper script for javascript files. Since virtually all of the code,
both &lt;span class="caps"&gt;PHP&lt;/span&gt; and JavaScript, is purely procedural, I was really only
concerned about docblocks and the functions they&amp;nbsp;precede.&lt;/p&gt;
&lt;p&gt;Luckily, it occurred to me that JavaScript is pretty close in syntax to
&lt;span class="caps"&gt;PHP&lt;/span&gt;, and I tend to write them with exactly the same style. A little
research showed that phpdoc can more or less handle javascript code,
with a few&amp;nbsp;caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code needs to parse as &lt;span class="caps"&gt;PHP&lt;/span&gt;, so things like inline functions mess
    it&amp;nbsp;up.&lt;/li&gt;
&lt;li&gt;The default phpDocumentor ini file doesn&amp;#8217;t recognize files with
    &lt;code&gt;.js&lt;/code&gt; extensions.&lt;/li&gt;
&lt;li&gt;The files need to have a &amp;lt;?php at the&amp;nbsp;top.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Noting this, I wrote a small script that iterates through a directory of
&lt;code&gt;.js&lt;/code&gt; files, parses them line by line, pulls out only the function
declarations (which, hopefully, don&amp;#8217;t also have code on the same line)
and docblocks, and writes the output (with a &amp;lt;?php at the top) to a
same-named file in a different&amp;nbsp;directory.&lt;/p&gt;
&lt;p&gt;The script obviously requires phpdoc to be installed, and also requires
you to edit the phpDocumentor.ini file (installed with &lt;span class="caps"&gt;PEAR&lt;/span&gt; on my system
at &lt;code&gt;/usr/share/php5/PEAR/data/PhpDocumentor/phpDocumentor.ini&lt;/code&gt;) and add
a &amp;#8220;js&amp;#8221; line to the &lt;code&gt;[_phpDocumentor_phpfile_exts]&lt;/code&gt; section to get phpdoc
to recognize &lt;code&gt;*.js&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;I was easily able to integrate this with a Makefile rule and create a
single set of cross-linked phpdoc &lt;span class="caps"&gt;API&lt;/span&gt; docs including both &lt;span class="caps"&gt;JS&lt;/span&gt; and &lt;span class="caps"&gt;PHP&lt;/span&gt;
files. I also added explicit package names (like &amp;#8220;-&lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;#8221; and &amp;#8220;-&lt;span class="caps"&gt;JS&lt;/span&gt;&amp;#8221;) to
keep things separated a&amp;nbsp;little.&lt;/p&gt;
&lt;p&gt;The script can be found at:
&lt;a href="https://github.com/jantman/misc-scripts/blob/master/js2phpdoc.php"&gt;https://github.com/jantman/misc-scripts/blob/master/js2phpdoc.php&lt;/a&gt;.
It&amp;#8217;s (obviously) free for any use, provided that you follow the license
terms (leave copyrights intact, send modifications back to me, and
update the changelog if you modify&amp;nbsp;it).&lt;/p&gt;
&lt;p&gt;My Makefile rule (which uses a temp directory to both keep the generated
files separate from the source and keep the file paths as seen by phpdoc
the same as the actual&amp;nbsp;source):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;.&lt;span class="caps"&gt;PHONY&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;docs&lt;/span&gt;

&lt;span class="nf"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        mkdir -p temp/js
        bin/js2phpdoc.php js/ temp/js/
        cp -r inc temp/
        cp *.php temp/
        phpdoc -c docs/default.ini
        rm -Rf temp
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Thu, 26 Aug 2010 08:10:00 -0400</pubDate><guid>tag:blog.jasonantman.com,2010-08-26:2010/08/documentation-generation-for-web-apps-php-and-javascript/</guid><category>documentation</category><category>javascript</category><category>PHP</category><category>web programming</category></item><item><title>Mediawiki Extension - Section Link To Top</title><link>http://blog.jasonantman.com/2010/08/mediawiki-extension-section-link-to-top/</link><description>&lt;p&gt;While working on a particularly long documentation page in MediaWiki
today, I came by a convenient little&amp;nbsp;extension:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mediawiki.org/wiki/Extension:SectionLinkToTop"&gt;Section Link To&amp;nbsp;Top&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It adds a nice little &amp;#8220;top&amp;#8221; link next to the &amp;#8220;edit&amp;#8221; link in each section
header. Very useful for &lt;em&gt;long&lt;/em&gt;&amp;nbsp;pages.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 18 Aug 2010 13:46:00 -0400</pubDate><guid>tag:blog.jasonantman.com,2010-08-18:2010/08/mediawiki-extension-section-link-to-top/</guid><category>documentation</category><category>mediawiki</category></item><item><title>Putting the Why in Documentation</title><link>http://blog.jasonantman.com/2010/08/putting-the-why-in-documentation/</link><description>&lt;p&gt;I work as a Linux Sysadmin (among many other non-official titles) in a
small group that mainly provides services. We run wireless and student
computing labs across a whole campus, but other than that (and most of
that) is just back-end systems - web servers, &lt;span class="caps"&gt;RADIUS&lt;/span&gt;, &lt;span class="caps"&gt;DHCP&lt;/span&gt;, etc. As a
result, I write no end-user documentation. I generally think of this as
a blessing, since the people who read my documentation are people who
think (more or less) like&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;However, I&amp;#8217;ve just started writing the wiki page for a rather large
system I developed. And in writing the docs, and thinking about what was
missing from the (practically non-existent) documentation on the system
I was replacing, it got me thinking a lot about the documentation
writing process. Most of us have heard that there are two general types
of documentation - end-user docs and developer (and I&amp;#8217;m rolling SysAdmin
in here) documentation. End-user docs tell someone how to use what we
built. Developer docs tell people how to troubleshoot, fix, modify, and
extend it.&amp;nbsp;Usually.&lt;/p&gt;
&lt;p&gt;But there&amp;#8217;s one very important piece that&amp;#8217;s missing from most
developer-level documentation I&amp;#8217;ve read: why it&amp;#8217;s built the way it is.
Sure, this isn&amp;#8217;t applicable in all instances. This is obviously ignored
by closed-source software developers when writing documentation for
release. And I&amp;#8217;m sure it&amp;#8217;s ignored in some larger shops just out of fear
that the interns will explain why they need to iterate a database result
set. But for those of us who are designing and building systems, I&amp;#8217;d
argue that documenting the reasons behind our decisions is much more
important than how-to-fix-it or how-to-rebuild-it documentation. Sure,
it&amp;#8217;s atrocious practice, but that can all be gleaned from examining a
live system or backups. But when it comes time for the next person (or
you or I, five years down the road) to re-design or drastically modify
our creations, some documentation of the decisions we made - and the
reasoning behind them - will be extremely&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;Case in point: My latest project started as performance analysis of a
large &lt;span class="caps"&gt;DHCP&lt;/span&gt; server using the &lt;a href="http://personal.cfw.com/~masneyb/"&gt;Masney &lt;span class="caps"&gt;LDAP&lt;/span&gt;
patch&lt;/a&gt; to &lt;a href="http://www.isc.org/software/dhcp"&gt;&lt;span class="caps"&gt;ISC&lt;/span&gt;
DHCPd&lt;/a&gt;. After over a week of
performance testing and trying different configurations and theories
(all of which I &amp;#8220;documented&amp;#8221; in my text file lab notebook), we ended up
deciding to totally remove &lt;span class="caps"&gt;LDAP&lt;/span&gt; from the system, move to configuration
files generated from MySQL, and keep everything (including the logs) in
ramdisk. We found performance bottlenecks in both the &lt;span class="caps"&gt;LDAP&lt;/span&gt; communication
and disk &lt;span class="caps"&gt;IO&lt;/span&gt;. We have the performance test output to prove it. We have
the results of dozens of tests with different configurations, as well as
a number of problems we identified with the &lt;span class="caps"&gt;LDAP&lt;/span&gt; patch. And from
testing, we have a handful of issues identified and fixed in the new
system, whose fixes aren&amp;#8217;t exactly&amp;nbsp;intuitive.&lt;/p&gt;
&lt;p&gt;The previous system had pretty poor documentation, but even worse, it
was only functional documentation - what the system does, and how it
does it. There was no discussion of why the parsing script disregarded
lines with a certain string in them, why the daemon is restarted every
night, why &lt;span class="caps"&gt;LDAP&lt;/span&gt; was chosen in the first place, or any performance
metrics (so we had no original as-intended baseline to compare&amp;nbsp;against).&lt;/p&gt;
&lt;p&gt;So for those of you designing systems and documenting them (you *do*
document them, &lt;em&gt;right&lt;/em&gt;?), please include &lt;strong&gt;why&lt;/strong&gt; in your documentation.
The next time someone needs to fix or tweak or re-engineer the system,
they&amp;#8217;ll be able to figure out what happens on line 123 of the init
script themselves. But it might take them hours to figure out &lt;em&gt;why&lt;/em&gt; it&amp;#8217;s
done, or &lt;em&gt;why&lt;/em&gt; it&amp;#8217;s done &lt;em&gt;that way&lt;/em&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Fri, 06 Aug 2010 14:51:00 -0400</pubDate><guid>tag:blog.jasonantman.com,2010-08-06:2010/08/putting-the-why-in-documentation/</guid><category>documentation</category><category>sysadmin</category></item><item><title>Web-based collaboration/documentation software</title><link>http://blog.jasonantman.com/2010/04/web-based-collaborationdocumentation-software/</link><description>&lt;p&gt;This question was posted both to the
&lt;a href="http://www.sage.org/lists/"&gt;&lt;span class="caps"&gt;SAGE&lt;/span&gt;-members&lt;/a&gt; list
(&lt;a href="http://mailman.sage.org/pipermail/sage-members/2010/msg00788.html"&gt;thread&lt;/a&gt;)
and to
&lt;a href="http://serverfault.com/questions/136416/free-web-based-software-for-team-collaboration-documentation"&gt;ServerFault&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looking for some advice here, as my search has turned up to be pretty&amp;nbsp;fruitless.&lt;/p&gt;
&lt;p&gt;My group (9 people - SAs, programmers, and two network guys) is
looking for some sort of web tool to&amp;#8230; ahem&amp;#8230; &amp;#8220;facilitate increased
collaboration&amp;#8221; (we didn&amp;#8217;t use a buzzword generator, I swear). At the
moment, we have an unified ticketing system that&amp;#8217;s braindead, but is
here to stay for political/logistical reasons. We&amp;#8217;ve got 2 wikis
(&amp;#8220;old&amp;#8221; and &amp;#8220;new&amp;#8221;), neither of which fulfill our needs, and are
therefore not used very often. We&amp;#8217;re looking for a free (as in both
cost and open source) web-based&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;Management side:&lt;br /&gt;
 Wants to be able to track project status, who&amp;#8217;s doing what, whether
deadlines are being met, etc. Doesn&amp;#8217;t want full-fledged &amp;#8220;project
management&amp;#8221; app, just something where we can update &amp;#8220;yeah this was
done&amp;#8221; or &amp;#8220;waiting for Bob to configure the widgets&amp;#8221;.
&lt;a href="http://www.teambox.com"&gt;TeamBox&lt;/a&gt; was suggested, but it seems almost
too gimmicky (Twitter/Facebook ripoff?), and doesn&amp;#8217;t seem to meet any
of the other requirements that I see coming&amp;nbsp;up:&lt;/p&gt;
&lt;p&gt;Non-management side:&lt;br /&gt;
 - flexible, powerful wiki for all documentation (i.e. includes good
tables, easy markup, syntax highlighting, etc.)&lt;br /&gt;
 - good full text search of everything (i.e. type in a hostname and
get every instance anyone ever uttered that name)&lt;br /&gt;
 - task lists or ToDo lists, hopefully about to be grouped into a
number of &amp;#8220;projects&amp;#8221;&lt;br /&gt;
 - file uploads&lt;br /&gt;
 - &lt;span class="caps"&gt;RSS&lt;/span&gt; or Atom feeds, email alerts of&amp;nbsp;updates&lt;/p&gt;
&lt;p&gt;We&amp;#8217;re open to doing some customizations (adding some features,
notification/feeds, searching, &lt;span class="caps"&gt;SVN&lt;/span&gt; integration, etc.) but need
something F/&lt;span class="caps"&gt;OSS&lt;/span&gt; that will run under&amp;nbsp;Apache.&lt;/p&gt;
&lt;p&gt;My conundrum is that most of the choices I&amp;#8217;ve found so far fall into
one of these categories:&lt;br /&gt;
 - project management/task tracking with poor
wiki/documentation/knowledge base support&lt;br /&gt;
 - wiki with no task tracking support&lt;br /&gt;
 - ticketing system with everything else bolted on (we already have
one that we&amp;#8217;re stuck with)&lt;br /&gt;
 - code-centric application (we do little &amp;#8220;development&amp;#8221;, mostly &lt;span class="caps"&gt;SA&lt;/span&gt;&amp;nbsp;work)&lt;/p&gt;
&lt;p&gt;Any&amp;nbsp;suggestions?&lt;/p&gt;
&lt;p&gt;Or, lacking that, any comments on which software would be easiest to
add the lacking features to (hopefully ending up with something that
actually looks good and works&amp;nbsp;well)?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;m still awaiting responses from both &lt;span class="caps"&gt;SAGE&lt;/span&gt; and ServerFault, but I have
a strong feeling that most of the suggestions will fall into one of the
major categories I already identified,&amp;nbsp;mainly:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Project management/task tracking with poor wiki/documentation
    support (a la&amp;nbsp;TeamBox)&lt;/li&gt;
&lt;li&gt;Wiki with no task tracking&amp;nbsp;support&lt;/li&gt;
&lt;li&gt;Ticketing system with everything else added in (useless since we
    already have to use a different ticketing&amp;nbsp;system).&lt;/li&gt;
&lt;li&gt;Something code-centric, i.e. built around a software development
    workflow, which isn&amp;#8217;t&amp;nbsp;us.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, I have a very strong feeling that whatever solution we end up going
with, we&amp;#8217;ll need to spend quite a bit of time bolting on whatever else
we need. Adding a full-featured wiki to another package isn&amp;#8217;t going to
be very easy&amp;#8230; especially since TeamBox is written in RoR, and we&amp;#8217;re
mostly &lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;nbsp;guys.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 27 Apr 2010 16:43:00 -0400</pubDate><guid>tag:blog.jasonantman.com,2010-04-27:2010/04/web-based-collaborationdocumentation-software/</guid><category>collaboration</category><category>documentation</category><category>project management</category><category>Projects</category><category>wiki</category></item></channel></rss>