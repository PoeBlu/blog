<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jason Antman's Blog</title><link>http://blog.jasonantman.com/</link><description></description><atom:link href="http://blog.jasonantman.com/feeds/tags/tcpdump.rss.xml" rel="self"></atom:link><lastBuildDate>Tue, 26 Apr 2011 10:50:00 -0400</lastBuildDate><item><title>Using wireshark to capture packets from a remote host</title><link>http://blog.jasonantman.com/2011/04/using-wireshark-to-capture-packets-from-a-remote-host/</link><description>&lt;p&gt;I spend a fair amount of my time debugging network and service problems
on a few racks of Linux servers. Of course, they&amp;#8217;re located in a data
center (yes, just downstairs, but still not quite as comfortable as my
office), and they&amp;#8217;re all command-line only - no sense in using up &lt;span class="caps"&gt;RAM&lt;/span&gt;
and &lt;span class="caps"&gt;CPU&lt;/span&gt; to run a graphical &lt;span class="caps"&gt;UI&lt;/span&gt; on a box that should just be serving
remote clients. I used to go through the arduous task of running a
command line &lt;a href="http://www.tcpdump.org/"&gt;&lt;code&gt;tcpdump&lt;/code&gt;&lt;/a&gt; session on the server
until I thought I had enough packets, then SCPing it over to my
workstation and opening the file in
&lt;a href="http://www.wireshark.org/"&gt;wireshark&lt;/a&gt; (formerly Ethereal). Fortunately,
thanks to a
&lt;a href="http://linuxexplore.wordpress.com/2010/05/30/remote-packet-capture-using-wireshark-tcpdump/"&gt;post&lt;/a&gt;
on Rahul Panwar&amp;#8217;s &lt;a href="http://linuxexplore.wordpress.com/"&gt;Linux Explore
blog&lt;/a&gt; (which seems to be sadly
neglected), I found a much easier way to do it. I&amp;#8217;ve summarized that
post here, added a little explanation, and also made some useful
comments for people working on Red Hat/CentOS and&amp;nbsp;OpenSuSE.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What you&amp;nbsp;need:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source system (the server you want to capture packets on) that you
    have &lt;span class="caps"&gt;SSH&lt;/span&gt; access to, with tcpdump installed, and available to your
    user (either directly, or via sudo without&amp;nbsp;password).&lt;/li&gt;
&lt;li&gt;Destination system (where you run graphical Wireshark) with
    wireshark installed and working, and &lt;code&gt;mkfifo&lt;/code&gt; available.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Procedure:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;On the destination system, if you haven&amp;#8217;t already done&amp;nbsp;so,&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;mkfifo /tmp/packet_capture
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This creates a &lt;a href="http://en.wikipedia.org/wiki/Named_pipe"&gt;named pipe&lt;/a&gt;
where the source packet data (via ssh) will be written and Wireshark
will read it from. You can use any name or location you want, but
&lt;code&gt;/tmp/packet_capture&lt;/code&gt; is pretty&amp;nbsp;logical.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On your destination system, open up Wireshark (we do this now, since
    on many systems it required the root password to start). In the
    &amp;#8220;Capture&amp;#8221; menu, select &amp;#8220;Options&amp;#8221;. In the &amp;#8220;Interface&amp;#8221; box, type in
    the path to the &lt;span class="caps"&gt;FIFO&lt;/span&gt; you created (&lt;code&gt;/tmp/packet_capture&lt;/code&gt;). You should
    press the Start button before running the next command - I recommend
    typing the command in a terminal window, pressing start, then
    hitting enter in the terminal to run the&amp;nbsp;command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the destination system,&amp;nbsp;run&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ssh user@source-hostname &lt;span class="s2"&gt;&amp;quot;sudo /usr/sbin/tcpdump -s 0 -U -n -w - -i eth0 not port 22&amp;quot;&lt;/span&gt; &amp;gt; /tmp/packet_capture
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will &lt;span class="caps"&gt;SSH&lt;/span&gt; to the source system (&lt;code&gt;source-hostname&lt;/code&gt;, either by
hostname or &lt;span class="caps"&gt;IP&lt;/span&gt;) as the specified user (&lt;code&gt;user&lt;/code&gt;) and execute
&lt;code&gt;sudo /usr/sbin/tcpdump&lt;/code&gt;. Omit the &amp;#8220;sudo&amp;#8221; if you don&amp;#8217;t need it,
though if you do, you&amp;#8217;ll need passwordless access. Options passed to
tcpdump are: &amp;#8220;-s 0&amp;#8221; snarf entire packets, no length limit; &amp;#8220;-U&amp;#8221;
packet-buffered output - write each complete packet to output once
it&amp;#8217;s captured, rather than waiting for a buffer to fill up; &amp;#8220;-n&amp;#8221;
don&amp;#8217;t convert addresses to hostnames; &amp;#8220;-w -&amp;#8221; write raw packets to
&lt;span class="caps"&gt;STDOUT&lt;/span&gt; (which will be passed through the &lt;span class="caps"&gt;SSH&lt;/span&gt; tunnel and become
&lt;span class="caps"&gt;STDOUT&lt;/span&gt; of the &amp;#8220;ssh&amp;#8221; command on the destination machine); &amp;#8220;-i eth0&amp;#8221;
capture on interface eth0; &amp;#8220;not port 22&amp;#8221; a tcpdump filter expression
to prevent capturing our own &lt;span class="caps"&gt;SSH&lt;/span&gt; packets (more on this below). The
final &amp;#8220;&gt; /tmp/packet_capture&amp;#8221; redirects the &lt;span class="caps"&gt;STDOUT&lt;/span&gt; of the ssh
program (the raw packets from tcpdump on the source machine) to the
&lt;code&gt;/tmp/packet_capture&lt;/code&gt; &lt;span class="caps"&gt;FIFO&lt;/span&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you&amp;#8217;re ready to stop the capture, just Ctrl+C the &lt;span class="caps"&gt;SSH&lt;/span&gt; command
    in the terminal window. Wireshark will automatically stop capturing,
    and you can save the capture file or play around with it. To capture
    again, you&amp;#8217;ll need to restart the capture in Wireshark and then run
    the ssh command&amp;nbsp;again.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;A note on network usage and tcpdump&amp;nbsp;filters&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a relatively bandwidth intensive procedure. If you use the &amp;#8220;not
port 22&amp;#8221; tcpdump filter (shown above) on the source machine, all traffic
over eth0 (other than &lt;span class="caps"&gt;SSH&lt;/span&gt;) on that machine will be duplicated within an
&lt;span class="caps"&gt;SSH&lt;/span&gt; tunnel. So you have double the traffic, plus the overhead of
tunneling all that within &lt;span class="caps"&gt;SSH&lt;/span&gt; to the destination machine. If you&amp;#8217;re
capturing data from a busy machine this way, you could easily saturate
the uplink and wreak all sorts of havoc. As a result, I&amp;#8217;d recommend
making the tcpdump filter as specific as you can while still retaining
the data you need. If you can replace it with a filter for specific
ports (i.e. &lt;code&gt;'(port 67 or port 68)'&lt;/code&gt; for &lt;span class="caps"&gt;DHCP&lt;/span&gt;) or specific hosts, that
should cut down on the amount of data you actually have to pass through
the&amp;nbsp;tunnel.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 26 Apr 2011 10:50:00 -0400</pubDate><guid>tag:blog.jasonantman.com,2011-04-26:2011/04/using-wireshark-to-capture-packets-from-a-remote-host/</guid><category>ethereal</category><category>linux</category><category>sysadmin</category><category>tcpdump</category><category>troubleshooting</category><category>wireshark</category></item><item><title>DHCP Debugging and Handy TCPdump filters</title><link>http://blog.jasonantman.com/2010/04/dhcp-debugging-and-handy-tcpdump-filters/</link><description>&lt;p&gt;Recently at $&lt;span class="caps"&gt;WORK&lt;/span&gt; we&amp;#8217;ve been having some strange issues with a
particular Xen &lt;span class="caps"&gt;VM&lt;/span&gt; not getting &lt;span class="caps"&gt;DHCP&lt;/span&gt;. Traditional (tail -f dhcpd.log)
debugging hasn&amp;#8217;t turned up much, other than the server is getting the
&lt;span class="caps"&gt;DISCOVER&lt;/span&gt; but not sending out an &lt;span class="caps"&gt;OFFER&lt;/span&gt;. I&amp;#8217;ve turned to packet captures to
try and track down the problem. Of course, this is where
&lt;a href="http://www.tcpdump.org/"&gt;tcpdump&lt;/a&gt; and
&lt;a href="http://www.wireshark.org/"&gt;wireshark&lt;/a&gt; come into play. So I thought I&amp;#8217;d
share some of the filters that I&amp;#8217;ve been using, and a few that I&amp;nbsp;developed.&lt;/p&gt;
&lt;p&gt;tcpdump filter for &lt;span class="caps"&gt;CDP&lt;/span&gt; (I should have this memorized by now) from
&lt;a href="http://sidewynder.blogspot.com/2005/07/tcpdump-filter-for-capturing-only.html"&gt;SWeidner&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;tcpdump -nn -v -i eth0 -s 1500 -c 1 &lt;span class="s1"&gt;&amp;#39;ether[20:2] == 0x2000&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Wireshark display filter for a specific &lt;span class="caps"&gt;DHCP&lt;/span&gt; client (by&amp;nbsp;&lt;span class="caps"&gt;MAC&lt;/span&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;bootp.hw.mac_addr == 00:11:22:33:44:55
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tcpdump filter to match &lt;span class="caps"&gt;DHCP&lt;/span&gt; packets including a specific Client &lt;span class="caps"&gt;MAC&lt;/span&gt;&amp;nbsp;Address:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;tcpdump -i br0 -vvv -s 1500 &lt;span class="s1"&gt;&amp;#39;((port 67 or port 68) and (udp[38:4] = 0x3e0ccf08))&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;tcpdump only allows matching on a maximum of 4 bytes (octets), not the 6
bytes of a &lt;span class="caps"&gt;MAC&lt;/span&gt; address. So, in the above example, we match the last 4
bytes (presumably the most unique) - our original &lt;span class="caps"&gt;MAC&lt;/span&gt; address was
&lt;code&gt;00:16:3e:0c:cf:08&lt;/code&gt;, so we match on &lt;code&gt;3e0ccf08&lt;/code&gt;. The &lt;code&gt;udp[38:4]&lt;/code&gt; matches
from the 38th octet after the start of the &lt;span class="caps"&gt;UDP&lt;/span&gt; header (so the comparison
starts on the 39th octet) and compares a chunk 4 octets long. The &lt;a href="http://www.networksorcery.com/enp/protocol/udp.htm"&gt;&lt;span class="caps"&gt;UDP&lt;/span&gt;
header&lt;/a&gt; is 8 octets
long, followed immediately by the &lt;a href="http://www.networksorcery.com/enp/protocol/dhcp.htm"&gt;&lt;span class="caps"&gt;DHCP&lt;/span&gt;
header&lt;/a&gt;, and the
Client &lt;span class="caps"&gt;MAC&lt;/span&gt; Address field is composed of octets 29-35 of the &lt;span class="caps"&gt;DHCP&lt;/span&gt; header.
Therefore, 8 octets for &lt;span class="caps"&gt;UDP&lt;/span&gt; header + 28 octets until Client &lt;span class="caps"&gt;MAC&lt;/span&gt; Address
+ 2 octets offset (drop the first 2 octets of &lt;span class="caps"&gt;MAC&lt;/span&gt; address to allow a 4
octet comparison) = 38 (our total&amp;nbsp;offset).&lt;/p&gt;
&lt;p&gt;This can also be modified as a Wireshark display&amp;nbsp;filter:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;udp[38:4]==3e:0c:cf:08
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the same logic, a tcpdump filter to capture packets sent by the
client (&lt;span class="caps"&gt;DISCOVER&lt;/span&gt;, &lt;span class="caps"&gt;REQUEST&lt;/span&gt;,&amp;nbsp;&lt;span class="caps"&gt;INFORM&lt;/span&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;tcpdump -i br0 -vvv -s 1500 &lt;span class="s1"&gt;&amp;#39;((port 67 or port 68) and (udp[8:1] = 0x1))&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, a tcpdump filter for &lt;span class="caps"&gt;DHCPDISCOVER&lt;/span&gt; packets (this makes the
possibly flawed ass-umption that Option 53 will be the first option&amp;nbsp;set:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;udp[247:4] = 0x63350101
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and a wireshark display&amp;nbsp;filter:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;udp[247:4]==63:35:01:01
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the same thing for &lt;span class="caps"&gt;DHCPREQUEST&lt;/span&gt;&amp;nbsp;packets:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;udp[247:4] = 0x63350103
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and a wireshark display&amp;nbsp;filter:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;udp[247:4]==63:35:01:03
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 14 Apr 2010 09:21:00 -0400</pubDate><guid>tag:blog.jasonantman.com,2010-04-14:2010/04/dhcp-debugging-and-handy-tcpdump-filters/</guid><category>dhcp</category><category>tcpdump</category><category>wireshark</category></item></channel></rss>