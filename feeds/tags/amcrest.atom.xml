<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog - amcrest</title><link href="https://blog.jasonantman.com/" rel="alternate"></link><link href="https://blog.jasonantman.com/feeds/tags/amcrest.atom.xml" rel="self"></link><id>https://blog.jasonantman.com/</id><updated>2018-05-12T07:18:00-04:00</updated><entry><title>Linux Surveillance Camera SoftwareÂ Evaluation</title><link href="https://blog.jasonantman.com/2018/05/linux-surveillance-camera-software-evaluation/" rel="alternate"></link><published>2018-05-12T07:18:00-04:00</published><updated>2018-05-12T07:18:00-04:00</updated><author><name>Jason Antman</name></author><id>tag:blog.jasonantman.com,2018-05-12:/2018/05/linux-surveillance-camera-software-evaluation/</id><summary type="html">&lt;p&gt;My evaluation of some options for streaming and motion-activated recording of &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;cameras.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#initial-requirements"&gt;Initial&amp;nbsp;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#contenders"&gt;Contenders&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#zoneminder"&gt;ZoneMinder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#kerberosio"&gt;Kerberos.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shinobi"&gt;Shinobi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#motion"&gt;Motion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#final-choice"&gt;Final&amp;nbsp;Choice&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;In my last post, &lt;a href="/2018/05/amcrest-ip-camera-first-impressions/"&gt;Amcrest &lt;span class="caps"&gt;IP&lt;/span&gt; Camera First Impressions&lt;/a&gt;, I went over what I&amp;#8217;d found about the pair of &lt;span class="caps"&gt;IP&lt;/span&gt; cameras that I bought to keep an eye on my dogs and my new house. My next step was to figure out how I&amp;#8217;d handle motion-activated recording, and that&amp;#8217;s what I&amp;#8217;ll discuss this time. I&amp;#8217;ve spent all of my spare time in the past week - probably twenty to thirty hours - researching and experimenting and the results have actually been quite&amp;nbsp;surprising.&lt;/p&gt;
&lt;h2 id="initial-requirements"&gt;&lt;a class="toclink" href="#initial-requirements"&gt;Initial&amp;nbsp;Requirements&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The initial requirements that I identified&amp;nbsp;were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open source (preferably &lt;span class="caps"&gt;GPL&lt;/span&gt;) and runs on&amp;nbsp;Linux&lt;/li&gt;
&lt;li&gt;Must be able to run with low-end hardware - either a Raspberry Pi or another small and inexpensive system (I don&amp;#8217;t want this to depend on my desktop, and I don&amp;#8217;t want to invest a lot in&amp;nbsp;it)&lt;/li&gt;
&lt;li&gt;Support multiple cameras - at least two, ideally four or&amp;nbsp;six&lt;/li&gt;
&lt;li&gt;Works behind a &lt;span class="caps"&gt;HTTP&lt;/span&gt; reverse proxy, such as nginx with certificate&amp;nbsp;auth&lt;/li&gt;
&lt;li&gt;Can stream live via the &lt;span class="caps"&gt;UI&lt;/span&gt;, ideally full resolution with low&amp;nbsp;latency&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;PTZ&lt;/span&gt; (pan/tilt/zoom) control from the&amp;nbsp;&lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;List, search and playback videos from the&amp;nbsp;&lt;span class="caps"&gt;UI&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Decent mobile support, either via built-in web &lt;span class="caps"&gt;UI&lt;/span&gt; or native&amp;nbsp;app&lt;/li&gt;
&lt;li&gt;Motion detection to trigger recording and notifications/scripts; configurable post-motion recording time; prerecord&amp;nbsp;buffer&lt;/li&gt;
&lt;li&gt;On-demand manual recording (ideally via both &lt;span class="caps"&gt;UI&lt;/span&gt; and&amp;nbsp;script/&lt;span class="caps"&gt;API&lt;/span&gt;)&lt;/li&gt;
&lt;li&gt;Ability to disable motion activation/recording via script or&amp;nbsp;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Detect loss of video/tamper and trigger&amp;nbsp;notification&lt;/li&gt;
&lt;li&gt;Detect loss of camera (on network) and trigger&amp;nbsp;notification&lt;/li&gt;
&lt;li&gt;Relatively straightforward monitoring (i.e. I should get a text message if the system goes down or stops working&amp;nbsp;correctly)&lt;/li&gt;
&lt;li&gt;Bonuses:&lt;/li&gt;
&lt;li&gt;Runs in Docker, even if not officially&amp;nbsp;supported&lt;/li&gt;
&lt;li&gt;Written in a language I have some experience in (which essentially means Python, Ruby, or maybe (maaaaybe)&amp;nbsp;NodeJS)&lt;/li&gt;
&lt;li&gt;Only uses&amp;nbsp;&lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Nice multi-camera&amp;nbsp;view&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="contenders"&gt;&lt;a class="toclink" href="#contenders"&gt;Contenders&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Right away I knew two of the projects I wanted to look at: &lt;a href="https://zoneminder.com/"&gt;ZoneMinder&lt;/a&gt;, which I&amp;#8217;ve heard many people mention and seems to be the de-facto standard in open-source video surveillance, and &lt;a href="https://motion-project.github.io/"&gt;Motion&lt;/a&gt; which I&amp;#8217;ve used before and only knew as a limited and somewhat archaic daemon. After some investigation and reading of feature lists, I came up with two other, much newer, contenders in &lt;a href="https://shinobi.video/"&gt;Shinobi&lt;/a&gt; and &lt;a href="https://www.kerberos.io/"&gt;Kerberos.io&lt;/a&gt;. I saw a few other possibilities online, but they didn&amp;#8217;t fit the above&amp;nbsp;criteria.&lt;/p&gt;
&lt;p&gt;I did all of my initial tests in Docker since I was testing each of these on my main computer and didn&amp;#8217;t want to clutter up the system, and I also &lt;em&gt;really&lt;/em&gt; like using Docker for testing and deployment of software. That may be unfair for some of them, but it&amp;#8217;s both how I intend on deploying the final choice and my preferred deployment strategy lately in general. I can&amp;#8217;t say that I dove deep into all, or even any, of these options but I gave each of them at least four hours (and quite more than that for some of them) of experimentation. I expect to be able to get something at least minimally working within that amount of&amp;nbsp;time.&lt;/p&gt;
&lt;h3 id="zoneminder"&gt;&lt;a class="toclink" href="#zoneminder"&gt;ZoneMinder&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://zoneminder.com/"&gt;ZoneMinder&lt;/a&gt; seems to be what everyone talks about when the topic of Linux-based open source surveillance software comes up. It&amp;#8217;s an incredibly mature and long-lived project - first released in 2002 - and for a long time seems to have been the only option. It&amp;#8217;s probably most famous for allowing the user to select various &amp;#8220;zones&amp;#8221; (regions of the image) with different motion detection sensitivity levels, including completely ignoring certain areas. When I started actually looking into it, though, my expectations decreased significantly. During my testing the first problem I found was that, while Docker is now a &lt;a href="https://zoneminder.readthedocs.io/en/latest/installationguide/packpack.html"&gt;recommended installation method&lt;/a&gt;, all of the &lt;a href="https://github.com/ZoneMinder/zmdockerfiles"&gt;official Dockerfiles&lt;/a&gt; and most of the others that I could find run it in a single super-container with &lt;em&gt;every&lt;/em&gt; process, including MySQL and all of the web tier (which ends up being 20-something processes). This is extremely un-Docker-like, and horribly inefficient for me since my test system (my desktop) already runs MariaDB for a number of other applications. The official Dockerfiles are also based on a full and bloated &lt;code&gt;centos:7&lt;/code&gt; image (73 &lt;span class="caps"&gt;MB&lt;/span&gt; just for the base image). Lastly, and most shocking to me, while Docker is an officially-supported installation method the project doesn&amp;#8217;t actually distribute Docker images. While ZoneMinder has packages for Ubuntu, &lt;span class="caps"&gt;RHEL&lt;/span&gt;, Debian and Gentoo, their Docker-based installation instructions build the image locally which almost completely obviates the entire purpose and idea of Docker as a build-once, run-anywhere packaging&amp;nbsp;format.&lt;/p&gt;
&lt;p&gt;After some investigation, I was able to find &lt;a href="https://github.com/pschmitt/docker-zoneminder"&gt;Philipp Schmitt&amp;#8217;s docker-zoneminder repo&lt;/a&gt; which provides an Alpine 3.4-based ZoneMinder image. Unfortunately it includes MySQL and doesn&amp;#8217;t build anymore (the last commit was two years ago), but I &lt;a href="https://github.com/jantman/docker-zoneminder"&gt;forked the repo&lt;/a&gt; and was able to get it to build and run on the latest Alpine Linux 3.7 with the distro&amp;#8217;s official zoneminder package. That took me a mere three days, which included giving up on Philipp&amp;#8217;s use of lighttpd and switching to Apache httpd 2.4 configured according to ZoneMinder&amp;#8217;s upstream instructions. Let&amp;#8217;s just say that the process was anything but easy. I eventually got ZoneMinder working, but didn&amp;#8217;t even get as far as setting up motion detection. I attempted to tell my &lt;span class="caps"&gt;ONVIF&lt;/span&gt;-compliant Amcrest ProHD camera to pan right using ZoneMinder&amp;#8217;s builtin &lt;span class="caps"&gt;ONVIF&lt;/span&gt; control support, and my entire machine locked up for about an hour (note this is an Arch Linux desktop with a 4-code/8-thread (&lt;span class="caps"&gt;HT&lt;/span&gt;) Intel i7-3770 at 3.4GHz and &lt;span class="caps"&gt;16GB&lt;/span&gt; of &lt;span class="caps"&gt;DDR3&lt;/span&gt; memory). Even before that just watching the live streams of my two cameras (1920x1080 and 1280x960) at 15fps, with motion detection and recording and all other features disabled, would result in them regularly dropping to 1-2 fps for a minute or&amp;nbsp;two.&lt;/p&gt;
&lt;p&gt;After the lockup caused by &lt;span class="caps"&gt;ONVIF&lt;/span&gt; support, I went about setting up resource constraints on memory and &lt;span class="caps"&gt;CPU&lt;/span&gt; usage for the container. That was the final straw; no matter what I set the constraints to, even values far in excess of the maximum of what the container was actually using, ZoneMinder seemed to behave horribly. I tried setting the memory limits to 12G (75% of my system&amp;#8217;s memory, when the container was only using ~&lt;span class="caps"&gt;512MB&lt;/span&gt;) and the &lt;span class="caps"&gt;CPU&lt;/span&gt; limits to a period of 100000 and a limit of 700000 (allowing it to consume 7 of my 8 threads/virtual cores) and it still performed as though ZoneMinder was crippled. Given that my target platform is a Raspberry Pi (3 B+ with 1.4GHz 64-bit quad-core &lt;span class="caps"&gt;ARM&lt;/span&gt; Coretx-A53 and &lt;span class="caps"&gt;1GB&lt;/span&gt; &lt;span class="caps"&gt;LPDDR2&lt;/span&gt; memory), I figured it was time to stop my ZoneMinder experiments. I know people and have heard many positive stories about ZoneMinder, and work with a few people who use it and find it to be great, but I think it&amp;#8217;s just capable of doing too much - and has too high resource requirements - for my&amp;nbsp;needs.&lt;/p&gt;
&lt;p&gt;In the interest of transparency, here are some of the &lt;a href="https://github.com/jantman/docker-zoneminder/blob/master/README.md#current-status"&gt;notes&lt;/a&gt; I wrote down during my attempt at an Alpine-based Docker&amp;nbsp;container:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As a preface, I need to mention that ZoneMinder was first released in 2002. It is a mature, even aged, piece of software. The level of effort that has gone into it is astonishing, and the mere fact that it&amp;#8217;s still an active and well-respected project after 16 years is pretty damn amazing, even more so for an open source project. That being said, two of my main criteria for selecting home security/surveillance software are how stable I think it will be (will it run for weeks/months without me even looking at it, and be working when I need it to) and how easily I can customize it&amp;nbsp;(code).&lt;/li&gt;
&lt;li&gt;ZoneMinder is a &lt;em&gt;giant&lt;/em&gt; codebase made up of Perl, &lt;span class="caps"&gt;PHP&lt;/span&gt;, C++, JavaScript, and probably some others. There are just &lt;em&gt;so&lt;/em&gt; many moving pieces (see the &lt;a href="http://zoneminder.readthedocs.io/en/stable/userguide/components.html"&gt;Components documentation&lt;/a&gt;) that I can&amp;#8217;t really imagine this running reliably without intervention for terribly&amp;nbsp;long.&lt;/li&gt;
&lt;li&gt;As a corollary, when I did finally get this running, the logs (written to the &lt;span class="caps"&gt;DB&lt;/span&gt; and shown in the &lt;span class="caps"&gt;UI&lt;/span&gt;) kept reporting Errors (in red nonetheless) for processes that died and were then respawned by the watchdog without any noticeable effects in the &lt;span class="caps"&gt;UI&lt;/span&gt;/streams. I don&amp;#8217;t want to take on a system that doesn&amp;#8217;t even know the difference between an error and a warning, or that reports errors (with whistles and bells and sirens) to the user that it can self-recover from. I intend on leaving this alone as a security system, and need to be able to reliably tell (and programmatically alert on) whether it&amp;#8217;s &amp;#8220;working&amp;#8221; or &amp;#8220;not working&amp;#8221;. A process dying and being successfully restarted a second later isn&amp;#8217;t what I&amp;#8217;d call an&amp;nbsp;&amp;#8220;error&amp;#8221;.&lt;/li&gt;
&lt;li&gt;Apparently Docker is now &lt;a href="https://github.com/ZoneMinder/ZoneMinder/wiki/Docker"&gt;a recommended install mathod&lt;/a&gt;, but the &lt;a href="https://github.com/ZoneMinder/zmdockerfiles"&gt;official Dockerfiles&lt;/a&gt; (and almost all of the others I&amp;#8217;ve found) are decidedly un-Docker-like, running &lt;em&gt;everything&lt;/em&gt; including both the web and &lt;span class="caps"&gt;DB&lt;/span&gt; tiers in one container. Given how many components make up ZoneMinder, it seems like it would much more naturally be made up of a handful of containers - maybe half a dozen plus a container per&amp;nbsp;camera.&lt;/li&gt;
&lt;li&gt;Even on my main desktop computer - a relatively beefy machine for its day, with a four-core/eight-thread Intel i7-3770 @ 3.4GHz and &lt;span class="caps"&gt;16GB&lt;/span&gt; &lt;span class="caps"&gt;DDR3&lt;/span&gt; - ZoneMinder seemed to be struggling with two &lt;span class="caps"&gt;IP&lt;/span&gt; cameras and I saw occasional framerate drops down to one to two fps. It just seems to be trying to do too&amp;nbsp;much.&lt;/li&gt;
&lt;li&gt;I still think there&amp;#8217;s a ghost in the machine re: docker resource constraints. Once I set &lt;span class="caps"&gt;CPU&lt;/span&gt; or memory limits on the container, even if I set them way (i.e. ten times) above what Docker reports ZoneMinder to be using, &lt;span class="caps"&gt;ZM&lt;/span&gt; behaves differently and starts to have crippling performance&amp;nbsp;issues.&lt;/li&gt;
&lt;li&gt;Bottom line: I do a lot of work with Docker, and automating deployment and monitoring of software has been a big part of my job for the last decade. I need something that&amp;#8217;s simpler, feels more reliable, and is easier to deploy and monitor. Something that logs to &lt;span class="caps"&gt;STDOUT&lt;/span&gt;/&lt;span class="caps"&gt;STDERR&lt;/span&gt;, looks at least something like a 12-factor app, and feels like it can actually run (if not be designed) natively in&amp;nbsp;Docker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So after three or four incredibly frustrating afternoons and evenings, I put ZoneMinder aside and continued down my evaluation&amp;nbsp;list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Postscript:&lt;/strong&gt; One of my colleagues, &lt;a href="https://github.com/jbruce12000"&gt;Jason Bruce&lt;/a&gt;, told me that he uses the &lt;a href="https://hub.docker.com/r/aptalca/zoneminder-1.29/"&gt;aptalca/zoneminder-1.29&lt;/a&gt; Docker image to great success. If you&amp;#8217;re considering ZoneMinder, it&amp;#8217;s probably worth trying that image, and it&amp;#8217;s only&amp;nbsp;&lt;span class="caps"&gt;310MB&lt;/span&gt;.&lt;/p&gt;
&lt;h3 id="kerberosio"&gt;&lt;a class="toclink" href="#kerberosio"&gt;Kerberos.io&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The next candidate on my list was &lt;a href="https://www.kerberos.io/"&gt;Kerberos.io&lt;/a&gt;, one of the newcomers that I&amp;#8217;d never heard of before. It&amp;#8217;s billed as a &amp;#8220;free [and open-source] video surveillance solution, which works with any camera and on every Linux based machine. You can deploy a fully configured video surveillance system within a few minutes on the environment you prefer: Raspberry Pi, Orange Pi, Docker, etc.&amp;#8221; So that caught my attention as it seemed to check a lot of the non-functional boxes - Docker, modern, etc. - right in the introductory &amp;#8220;advertising&amp;#8221;. The website also looks clean and modern, and the screenshots and demo look nice. The one negative instantly apparent is that it only supports one camera unless you use the paid and hosted Kerberos.cloud product, but I figured that I could either run the cloud software myself or else hack something together (their &lt;a href="https://doc.kerberos.io/2.0/installation/Multi-camera/Docker"&gt;docs on Multi-Camera Docker&lt;/a&gt; are essentially just how to run multiple instances, one per&amp;nbsp;camera).&lt;/p&gt;
&lt;p&gt;On the positive side, Kerberos.io &lt;em&gt;was&lt;/em&gt; incredibly easy to get running. The &lt;a href="https://doc.kerberos.io/2.0/installation/Docker"&gt;docs&lt;/a&gt; just point to their &lt;a href="https://hub.docker.com/u/kerberos/"&gt;public images on the Docker Hub&lt;/a&gt; and a &lt;a href="https://github.com/kerberos-io/docker"&gt;github repo&lt;/a&gt; with a &lt;code&gt;docker-compose.yml&lt;/code&gt; that runs the appropriate containers (one for the &amp;#8220;machinery&amp;#8221; capture backend and one for the &amp;#8220;web&amp;#8221; frontend), and even has an &lt;span class="caps"&gt;ARM&lt;/span&gt;-specific Dockerfile for Raspberry Pi users. Setup was a complete breeze as the web &lt;span class="caps"&gt;UI&lt;/span&gt; starts out with an installation wizard that walks you through configuring the app. After setting up a user I was able to log in and click the &amp;#8220;Configuration&amp;#8221; button on the top menu bar and configure my camera. It was quite straightforward - just select &amp;#8220;&lt;span class="caps"&gt;IP&lt;/span&gt; Camera&amp;#8221; and specify the &lt;span class="caps"&gt;RSTP&lt;/span&gt; &lt;span class="caps"&gt;URL&lt;/span&gt;, dimensions, delay (zero) and live stream framerate, click save, and view the camera. I had a &lt;span class="caps"&gt;UI&lt;/span&gt; showing the stream from my 1080P camera and the ability to record within about two minutes. The &lt;span class="caps"&gt;UI&lt;/span&gt; initially loads to a dashboard with the live camera view and some graphs of motion detection metrics by hour of day, day of week, and today vs average, as well as a listing of dates (presumably motion detection history/recordings) on the left sidebar. There&amp;#8217;s also a handy &amp;#8220;System&amp;#8221; video that shows uptime, some system information, the currently-running Kerberos.io versions, statistics on captured images, and some system performance information (disk space that was incorrect in Docker, network &lt;span class="caps"&gt;IO&lt;/span&gt;, and &lt;span class="caps"&gt;CPU&lt;/span&gt;&amp;nbsp;usage).&lt;/p&gt;
&lt;p&gt;Unfortunately, the system almost instantly showed a &amp;#8220;Hey, your disk is almost full. Please remove some images..&amp;#8221; header at the top of the pages. Yes, with the containers running, my &lt;code&gt;/var&lt;/code&gt; partition was 97% full (lots of churn lately, and lots of cruft from the ZoneMinder&amp;nbsp;tests).&lt;/p&gt;
&lt;p&gt;At this point I went back to &amp;#8220;Configuration&amp;#8221; and clicked the &amp;#8220;Motion&amp;#8221; button to set up motion detection. I was presented with a gray box that I assume was supposed to show the live image from the camera, and some points on a polygon to select a motion detection region. I did the best I could with the missing image and moved on to some sliders for &amp;#8220;sensitivity&amp;#8221; (default fifteen on a scale of zero to thirty) and &amp;#8220;number of detections before valid&amp;#8221; (default two on a scale of zero to ten) and then configured the recording settings: both images and video, no timestamp overlays, fifteen frames per second (the same as the cameras), record five seconds after motion detection, and nothing set for the options to trigger webhooks, scripts, &lt;span class="caps"&gt;GPIO&lt;/span&gt; or &lt;span class="caps"&gt;MQTT&lt;/span&gt; on detection. I should note that the &amp;#8220;seconds to record&amp;#8221; field is a slider for &amp;#8220;The number of seconds that will be recorded after motion was detected&amp;#8221;, which defaults to five and can go from zero to&amp;nbsp;thirty.&lt;/p&gt;
&lt;p&gt;I confirmed those settings and browsed back to the Dashboard, where I could see the live video view and&amp;#8230; a whole lot of nothing&amp;nbsp;else:&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/kerberos1.png"&gt;&lt;img alt="screenshot of Kerberos.io dashboard with live webcam feed but all graphs saying &amp;quot;No data available&amp;quot;" src="/GFX/kerberos1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Refreshing the page didn&amp;#8217;t seem to help get any of the other data to show up, even when there was obviously motion. There&amp;#8217;s a Heatmap feature in the Configuration page, but I haven&amp;#8217;t been able to get it to display anything other than &amp;#8220;No data available&amp;#8221;. Thinking that something was wrong, I went back through the motion detection configuration and found that the region I&amp;#8217;d selected was reset back to the strange-shaped default. I fixed it, pressed the &amp;#8220;Confirm and Select&amp;#8221; button without going through to the second and third screens of the Motion configuration dialog, and then opened the Motion configuration dialog again. This time, the region was effectively empty (a flat line in the top left corner, with multiple points on it) but I could actually see the camera stream albeit frozen at the latest frame. I adjusted the region polygon again, Saved, and then reloaded the Motion configuration dialog&amp;#8230; and got back to a correct-looking region but no picture. I assumed that was right and proceeded back through the three screens of the dialog and found the rest of my settings back to default. Through trial and error, I found that the configuration dialog for the Motion detection has three screens, which are paged through by using either left/right arrows on the sides of the dialog or one of three small circles (inactive two grayed out) at the bottom of the settings. Apparently, while the &amp;#8220;Confirm and Select&amp;#8221; button dismisses the dialog, it only saves the settings on the &lt;em&gt;current&lt;/em&gt; one of three pages. So eventually, I realized that I had to edit the first page, save, bring the dialog back up, move to the second page, save, then bring the dialog back up, move to the third page, and save. I then needed to press the &amp;#8220;Update&amp;#8221; button on the main Configuration page to commit my&amp;nbsp;changes.&lt;/p&gt;
&lt;p&gt;After all that, things seemed to be working. Navingating back to the Dashboard showed some actual data on the graphs including a large number of detections for the current&amp;nbsp;hour:&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/kerberos2.png"&gt;&lt;img alt="screenshot of Kerberos.io dashboard with data in graphs and hourly graph showing 18 motion detections this hour" src="/GFX/kerberos2_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, when I clicked on the date in the left sidebar, something seemed to be very&amp;nbsp;amiss:&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/kerberos3.png"&gt;&lt;img alt="screenshot of Kerberos.io dashboard for current date, saying &amp;quot;Oeps, no detections found at 11 o'clock&amp;quot;" src="/GFX/kerberos3_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main Dashboard had reported 18 detections, and the slider bar on the view for today&amp;#8217;s date (above) clearly showed some heatmap colors for the current hour, but it was also telling me that it couldn&amp;#8217;t find any detections (videos/images). On a hunch I looked at the Docker logs for the container, and found the &amp;#8220;machinery&amp;#8221; (capture and storage) container&amp;#8217;s logs full of this, repeated over and&amp;nbsp;over:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;machinery_1  | Cleaning disk
machinery_1  | Cleaning disk
machinery_1  | rm: missing operand
machinery_1  | Try &amp;#39;rm --help&amp;#39; for more information.
machinery_1  | Cleaning disk
machinery_1  | rm: missing operand
machinery_1  | Try &amp;#39;rm --help&amp;#39; for more information.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As best I can tell, it was detecting that the disk backing the Docker volume was 97% full (it&amp;#8217;s a 100G volume) and cleaning up the disk&amp;#8230; which apparently meant deleting all of the recordings, including the ones that had just been made and I hadn&amp;#8217;t reviewed&amp;nbsp;yet.&lt;/p&gt;
&lt;p&gt;That was the end of my experimentation with Kerberos.io. Not only was it apparently executing a shell command (&lt;code&gt;rm&lt;/code&gt;) with invalid/missing arguments, but it was also deleting all of the recordings it had because the disk was 97% full. First and foremost, the camera I&amp;#8217;m using is streaming 1920x1080 H.264 at 15 frames per second; &lt;span class="caps"&gt;3GB&lt;/span&gt; of disk space remaining shouldn&amp;#8217;t be a reason to delete all of the five-second video clips unless the cleanup logic is purely based on percentages. I didn&amp;#8217;t dig into the source code, but I&amp;#8217;m pretty sure if my 100-Petabyte disk was 97% full, it would still start deleting single-digit-megabyte images to free up space. Secondly, and more importantly, I intend on using this as part of a security system which to me means engineering for the worst-case scenario. Under normal circumstances, I should be able to respond to a low disk warning and manually free up some space. My Internet connection is generally very stable, so the &amp;#8220;worst case&amp;#8221; I want to engineer for is someone burglarizing my house and being smart enough to cut the cable line. If that happens, causing storage to fill up, the most important video is actually the &lt;em&gt;oldest&lt;/em&gt;! It&amp;#8217;s the video that was recorded closest to when I lost access to the system. In which case, I&amp;#8217;d want the failure mode to be either filling up the storage or ceasing to record, but definitely not to arbitrarily delete old-but-unreviewed&amp;nbsp;recordings.&lt;/p&gt;
&lt;h3 id="shinobi"&gt;&lt;a class="toclink" href="#shinobi"&gt;Shinobi&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Aside from my old standby of Motion, the last candidate on my list was &lt;a href="https://shinobi.video/"&gt;Shinobi&lt;/a&gt;. Shinobi&amp;#8217;s tag line is &amp;#8220;The open source &lt;span class="caps"&gt;CCTV&lt;/span&gt; solution&amp;#8221; and prides itself on being modern and using modern technologies. The first section of their pretty and modern homepage, https://shinobi.video/, includes a link to the docs and GitHub and&amp;nbsp;states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shinobi is Open Source, written in Node.js, and real easy to use. It is the future of &lt;span class="caps"&gt;CCTV&lt;/span&gt; and &lt;span class="caps"&gt;NVR&lt;/span&gt; for developers and end-users alike. It is catered to by professionals and most importantly by the one who created&amp;nbsp;it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After seeing what&amp;#8217;s happening under the hood of ZoneMinder, this certainly got my attention, as did the general modern open-source community feel of the site. Granted, I initially missed the section comparing Shinobi &lt;span class="caps"&gt;CE&lt;/span&gt; (Community Edition; GPLv3) and Shinobi Pro (Professional but free for non-commercial use; Creative Commons) and that Community Edition is &amp;#8220;updated only for major changes or bug fixes.&amp;#8221; But the &lt;a href="https://github.com/ShinobiCCTV/Shinobi/blob/2bc74064da5484545d86fce9cf95db74ace0db48/README.md#key-aspects"&gt;current features list&lt;/a&gt; includes most of what I wanted (even audio recording too, from my&amp;nbsp;ProHD)&lt;/p&gt;
&lt;p&gt;First I headed over to the &lt;a href="https://github.com/moeiscool/docker-shinobi"&gt;Dockerfiles from Shinobi&amp;#8217;s author&lt;/a&gt;. I had some issues with the Alpine-based vatiant and decided to give the Debian ones a try. One &lt;code&gt;docker-compose up&lt;/code&gt; and some patience later, I had two containers running: camera and cron. I immediately hit the web port and got a login box, which confused me with invalid logins for a while until I went back and re-read the &lt;a href="https://shinobi.video/docs/start"&gt;installation docs&lt;/a&gt; and realized that Shinobi supports multiple users, and I had to login via &lt;code&gt;/super&lt;/code&gt; (superuser) to set up a user account for myself. I did that and logged in as a regular user, and was greeted with a clean, modern, responsive&amp;nbsp;&lt;span class="caps"&gt;UI&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Not being one to read documentation for end-user software, I muddled around in the &lt;span class="caps"&gt;UI&lt;/span&gt; a bit until I managed to add my two cameras. It wasn&amp;#8217;t terribly difficult: click the &amp;#8220;+&amp;#8221; icon in the top left of the &lt;span class="caps"&gt;UI&lt;/span&gt; (tooltip says, &amp;#8220;Add Monitor&amp;#8221;) and fill out the form. One early problem I had adding the first camera is that the &lt;span class="caps"&gt;URL&lt;/span&gt; parsing discards query strings. I added my Amcrest ProHD with its primary stream &lt;span class="caps"&gt;URL&lt;/span&gt;, which has a path of &lt;code&gt;/cam/realmonitor?channel=1&amp;amp;subtype=0&lt;/code&gt;. The stream didn&amp;#8217;t work and when I went back into the settings to edit it, the query string had been discarded. I just changed the &amp;#8220;Automatic&amp;#8221; (parsing of &lt;span class="caps"&gt;URL&lt;/span&gt;) to &amp;#8220;No&amp;#8221; and manually entered the protocol, host, port, authentication and path details myself, and it worked fine. Shinobi has a very nice interface for adding cameras, and one of the things I liked the most was the ability to choose the streaming details for the live stream; it supports Poseidon, &lt;span class="caps"&gt;JPEG&lt;/span&gt;, &lt;span class="caps"&gt;MJPEG&lt;/span&gt;, &lt;span class="caps"&gt;FLV&lt;/span&gt;, &lt;span class="caps"&gt;HLS&lt;/span&gt; (with audio) or a custom base64-over-websockets. The &lt;span class="caps"&gt;HLS&lt;/span&gt; stream also allows selection of video and audio codecs including copying the source codec (which is what I did). There&amp;#8217;s also an option for a &lt;span class="caps"&gt;CGI&lt;/span&gt;-style &lt;span class="caps"&gt;JPEG&lt;/span&gt; snapshot&amp;nbsp;&lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/shinobi1.png"&gt;&lt;img alt="screenshot of Shinobi dialog to add a monitor" src="/GFX/shinobi1_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;UI&lt;/span&gt; is smooth and modern, with a fully responsive design that apparently works on mobile too (though I didn&amp;#8217;t test it). It even includes nice dropdown menus and mouseover menus for streams that  include snapshot, start/stop recording, pop-out, recording list, calendar of events, monitor/stream settings, and fullscreen. It also includes something called the &amp;#8220;Power Viewer&amp;#8221; that I&amp;#8217;ll discuss&amp;nbsp;later.&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/shinobi2.png"&gt;&lt;img alt="screenshot of Shinobi with mouseover controls for streams" src="/GFX/shinobi2_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Within a few minutes, I had both cameras up and running with their full resolution H.264 &lt;span class="caps"&gt;RTSP&lt;/span&gt; streams (1920x1080 and 1280x960, respectively) at 15fps. The camera streams are shown by clicking on the camera in the left sidebar, and the stream windows can be resized by dragging the lower right corner (though it doesn&amp;#8217;t keep the aspect ratio) and rearranged via&amp;nbsp;drag-and-drop.&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/shinobi3.png"&gt;&lt;img alt="screenshot of Shinobi with both streams" src="/GFX/shinobi3_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was happy to see that, in this configuration with video streaming but not being analyzed, the Docker containers were only using a combined total of about 5% of my &lt;span class="caps"&gt;CPU&lt;/span&gt; and &lt;span class="caps"&gt;100MB&lt;/span&gt; &lt;span class="caps"&gt;RAM&lt;/span&gt;. I tried some experiments with snapshots (they force-download) and manually-requested recordings and was quite happy with both. I did have some occasional issues with live streams freezing if I refreshed the page, but they resumed fine if I logged back in. The calendar interface seemed handy - it shows a monthly calendar with the time, camera name, and size of each recording for each day - and the videos list for each camera lists the start and end time, filename, and size of each video for each camera, along with buttons to preview (on the same dialog), watch (fullscreen-ish in the viewer), download, and&amp;nbsp;delete.&lt;/p&gt;
&lt;p&gt;This all seemed wonderful, so I figured it was time to enable motion detection. Well&amp;#8230; little did I know that would be a six-hour struggle. The &lt;a href="https://shinobi.video/docs/motion"&gt;documentation on Motion detection&lt;/a&gt; is separate, and states that motion detection isn&amp;#8217;t built-in because not everybody wants it and it has dependencies, which is also started at other places on their site. The &lt;a href="https://shinobi.video/docs/motion#content-use-builtin"&gt;first section on the Motion detection docs page&lt;/a&gt; says that it&amp;#8217;s now built-in and people should just use that, but is rather easy to miss (the section heading is at the same level as &amp;#8220;Install on Ubuntu/Debian&amp;#8221;, &amp;#8220;Install on CentOS/Fedora&amp;#8221;, etc.) and doesn&amp;#8217;t explicitly say whether there are external dependencies or not. Without going into the details, I went through a six-hour marathon of trying different Docker images, installing dependencies, running NodeJS scripts, starting other processes, adding containers, etc. in an attempt to get motion detection&amp;nbsp;working.&lt;/p&gt;
&lt;p&gt;Through the course of this I found that Shinobi&amp;#8217;s documentation is quite lacking, and also that it seems to be sporadically updated. The &lt;a href="https://shinobi.video/docs/settings"&gt;settings documentation&lt;/a&gt; contains a lot that doesn&amp;#8217;t seem to line up with what I&amp;#8217;m seeing in the &lt;span class="caps"&gt;UI&lt;/span&gt;, and I&amp;#8217;m not sure if it&amp;#8217;s because the docs are out of date or because they&amp;#8217;re ahead of the code, or a Pro vs Community Edition issue, or what. There are other places in the docs that seem horribly outdated, and many sections that seem to give conflicting&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;At one point I also stopped and tried to configure pan/tilt control, but couldn&amp;#8217;t find a setting for that either, so I went back to motion&amp;nbsp;detection.&lt;/p&gt;
&lt;p&gt;Most of my frustration was based on the Motion Detection documentation page and its statements that once Motion Detection is set up you should see &amp;#8220;Detector: Motion Connected&amp;#8221; in the Monitor Settings, and have configuration options for motion detection. No matter what I tried - Debian or Alpine, different images, adding packages and &lt;span class="caps"&gt;OS&lt;/span&gt;-level dependencies, restarting the services, trying the older, no-longer-recommended plugin-based method - I couldn&amp;#8217;t find or see the Motion Detection settings like the docs said I should. I just kept trying different things to get those settings to show up. When I was just about to give up and was searching through Shinobi&amp;#8217;s &lt;a href="https://forum.shinobi.video/"&gt;forums&lt;/a&gt; for some confirmation of whether anyone could get this working, I stumbled upon a &lt;a href="https://forum.shinobi.video/post/160"&gt;forum post&lt;/a&gt; that mentioned something about &amp;#8220;Advanced&amp;nbsp;settings&amp;#8221;.&lt;/p&gt;
&lt;p&gt;I started the containers back up and sure enough, in the far lower right corner of the Monitor Settings dialog, colored almost the same as the background, was a button that says &amp;#8220;Simple&amp;#8221; and has an arrow. I clicked it, selected &amp;#8220;Advanced&amp;#8221;, and suddenly the left sidebar of the dialog grew&amp;#8230; to include Global Detector Settings and Control, among other&amp;nbsp;options.&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/shinobi4.png"&gt;&lt;img alt="screenshot of Shinobi Monitor Settings in Advanced mode" src="/GFX/shinobi4_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As far as I can tell, motion detection was probably working the whole time and my six-ish hours of struggling were all for naught. The only problem I had was not changing the Monitor Settings dialog from Simple mode - which hides all motion detection and control settings - to Advanced. I&amp;#8217;ve gone back over the documentation multiple times, and there&amp;#8217;s not a single occurrence of the word &amp;#8220;Advanced&amp;#8221; on the Motion Detection page or the Settings page, and certainly nothing telling users that they need to explicitly switch to Advanced Mode to see these&amp;nbsp;settings.&lt;/p&gt;
&lt;p&gt;At that point, I was already quite frustrated with Shinobi and felt that if this was at all indicative of the quality of documentation and user experience, I should definitely avoid it. But I at least wanted to know what its motion detection could&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://shinobi.video/docs/settings#content-detector"&gt;settings documentation for Motion Detection&lt;/a&gt; was mostly straightforward, with the exception of a few&amp;nbsp;settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Recording Timeout&lt;/strong&gt; - &amp;#8220;The length of time &amp;#8220;Trigger Record&amp;#8221; will run for. This is read in minutes.&amp;#8221; Apparently when Shinobi detects motion it records &lt;em&gt;minutes&lt;/em&gt; of video, with a minimum of one and a default of ten. This was very strange to me, especially since many motion events that I&amp;#8217;ve seen only span a few&amp;nbsp;seconds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timeout Reset on Next Motion&lt;/strong&gt; - &amp;#8220;If there is an overlap in trigger record should it reset. &lt;strong&gt;No:&lt;/strong&gt; Finish the current 10 minute order.. &lt;strong&gt;Yes:&lt;/strong&gt; Reset the timer&amp;#8221;. I didn&amp;#8217;t have to worry about this since it wasn&amp;#8217;t visible in my&amp;nbsp;version.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Save Events to &lt;span class="caps"&gt;SQL&lt;/span&gt;&lt;/strong&gt; - &amp;#8220;Save Motion Events in &lt;span class="caps"&gt;SQL&lt;/span&gt;. This will allow display of motion over video during the time motion events occured [sic] in the Power&amp;nbsp;Viewer.&amp;#8221;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Indifference&lt;/strong&gt; - &amp;#8220;How much Shinobi doesn&amp;#8217;t care about motion before doing something. The opposite of sensitivity; a lower number means it will trigger sooner. The value ranges up to 15(+) decimal places. 10 is default, 0.005 is pretty sensitive to motion changes. Note: If using Region Editor, leave this blank, and set indifference in the Region Editor (below).&amp;#8221; So&amp;#8230; firstly, the semantics of this are awful. Secondly, in my version, the global default (if not using Regions) isn&amp;#8217;t 10 it&amp;#8217;s 0.5, and the per-region default is&amp;nbsp;0.0005.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There were also a number of settings visible in the &lt;span class="caps"&gt;UI&lt;/span&gt; for the version I was running (&lt;a href="https://github.com/ShinobiCCTV/Shinobi/commit/4bf071abb5706f9240f32617bf3bb4b8aa52f3ca"&gt;https://github.com/ShinobiCCTV/Shinobi.git &amp;#8220;dev&amp;#8221; branch 4bf071abb5706f9240f32617bf3bb4b8aa52f3ca&lt;/a&gt;) that weren&amp;#8217;t in the&amp;nbsp;documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Allow Next Trigger&lt;/strong&gt; - &amp;#8220;in Milliseconds&amp;#8221;, default&amp;nbsp;2000.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Send Events to &lt;span class="caps"&gt;SQL&lt;/span&gt;&lt;/strong&gt; - &amp;#8220;Save Motion Events in &lt;span class="caps"&gt;SQL&lt;/span&gt;. This will allow display of motion over video during the time motion events occured [sic] in the Power Viewer.&amp;#8221; As I found out later, the Power Viewer does barely anything without&amp;nbsp;this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After configuring the detection settings, the documentation told me that I had to add regions (zones) or else the detection would use the full frame. I did that via an editor modal from the Monitor Settings which allows adding multiple region polygons to the video via a simple but somewhat jerky and annoying (drag too close to the edges and points won&amp;#8217;t stick there) polygon editor. It was supposed to show the live video stream under the polygon, but that only worked once or twice for me, usually being a brown box where the video should&amp;nbsp;be.&lt;/p&gt;
&lt;p&gt;I was happy to see that running almost-full-frame, 15fps motion detection on both video feeds was only using about &lt;span class="caps"&gt;400MB&lt;/span&gt; &lt;span class="caps"&gt;RAM&lt;/span&gt; and the equivalent of one core (on my host &lt;span class="caps"&gt;OS&lt;/span&gt; it showed all 8 cores running around 20%, which is pretty good since I was also running graphite, grafana, nginx, apache, MySQL, Chrome, Atom,&amp;nbsp;etc.).&lt;/p&gt;
&lt;p&gt;One thing I immediately noticed after enabling motion detection, though, is that there&amp;#8217;s no &lt;span class="caps"&gt;UI&lt;/span&gt; indication of motion events. To see motion events for a camera, you need to use the Calendar, Video List, or Power Viewer modals. The other thing I noticed immediately is that using the default &amp;#8220;indifference&amp;#8221; value, my outdoor camera was recording constantly. I tried adjusting this value on both cameras but it certainly wasn&amp;#8217;t scientific; the default indifference for a zone was &amp;#8220;0.0005&amp;#8221; so I tried increasing it (decreasing sensitivity) by powers of 10. The best I could get that way was a point where almost everything was recorded, and then another point where it never&amp;nbsp;triggered.&lt;/p&gt;
&lt;p&gt;After that experience, I turned to the &amp;#8220;Power Viewer&amp;#8221; which seemed like it might be able to solve this. The layout actually seems quite well done and useful, despite the fact that the Live View of the camera was only sporadically working for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/shinobi5.png"&gt;&lt;img alt="screenshot of Shinobi Power Viewer" src="/GFX/shinobi5_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main elements&amp;nbsp;are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Live View&lt;/strong&gt; - This only worked sporadically for me, and I was unable to get a screenshot of it. When it worked, it showed the live stream from the&amp;nbsp;camera.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timeline&lt;/strong&gt; - A relatively handy view of all recordings and motion events for the specified date range. It seems to default to two days, though I only had the system running and recording for an hour or so. The blue dots along the timeline represent recordings; clicking one of them brings up the recording and starts playing it. The red bars represent the count of motion detection events in each&amp;nbsp;recording.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recording&lt;/strong&gt; - Plays the selected recording along with displaying the&amp;nbsp;filename.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Playback Timer&lt;/strong&gt; - It&amp;#8217;s a simple playback timer for the currently-playing video. It&amp;#8217;s clickable and draggable to advance through the&amp;nbsp;video.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motion Meter&lt;/strong&gt; - The tooltip for this says &amp;#8220;Motion Meter&amp;#8221;, and the only clear documentation I could find on this says, &amp;#8220;When motion occurs a red bar will appear under your stream to indicate how much motion has happened.&amp;#8221; Some other documentation &lt;em&gt;implies&lt;/em&gt; that this should be the detected indifference value, presumably on a scale of zero to 100, but nothing explains that specifically. This also appeared to lag quite a bit behind the video and doesn&amp;#8217;t have a numeric output even on&amp;nbsp;hover.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Motion Confidence&lt;/strong&gt; - This is a graph over time (for the currently-playing recording) of &amp;#8220;Motion Confidence&amp;#8221;. I was unable to find any reference to this in the documentation and haven&amp;#8217;t yet received a response to my &lt;a href="https://forum.shinobi.video/topic/216/relationship-between-indifference-and-motion-confidence"&gt;forum post&lt;/a&gt; asking about it. The numeric definitely seems different from the &amp;#8220;Motion Meter&amp;#8221; to me, but I don&amp;#8217;t know what it&amp;nbsp;means.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point it seemed like Shinobi was the frontrunner in everything except motion detection, which it seemed to fail horribly at. There&amp;#8217;s a Noise Filter setting that I tried, but I couldn&amp;#8217;t find any clear documentation on how to tune Shinobi for motion thresholds and it certainly seemed to lack many of the advanced tuning features of &lt;code&gt;motion&lt;/code&gt; such as imprinting the number of changed pixels in the frame, debug images/videos with motion highlighted, adaptive thresholds or blob detection. I decided that I might as well explore &lt;code&gt;motion&lt;/code&gt; since I understand it and it&amp;#8217;s well documented, and come back to Shinobi later if I want&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Postscript:&lt;/strong&gt; Some of my other notes on&amp;nbsp;Shinobi:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;One feature I do like about Shinobi is the &amp;#8220;Delete Motionless&amp;#8221; toggle that apparently records all the time and then deletes recording segments that didn&amp;#8217;t have motion detected. This seems like a &lt;em&gt;very&lt;/em&gt; good idea and, if done right, could help with capturing the low-motion events leading up to an event that crosses the&amp;nbsp;threshold.&lt;/li&gt;
&lt;li&gt;There were some annoying timezone bugs, where the &lt;span class="caps"&gt;UI&lt;/span&gt; showed the time in my local timezone (including the clock in the upper right corner) but the filenames and Power Viewer were using&amp;nbsp;&lt;span class="caps"&gt;UTC&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="motion"&gt;&lt;a class="toclink" href="#motion"&gt;Motion&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve used the &lt;a href="https://motion-project.github.io/"&gt;Motion Project&lt;/a&gt; a few times over the years and had a pretty good impression of it - at one point I had it running motion detection with a 1080P webcam on an original Raspberry Pi Model B (700MHz &lt;span class="caps"&gt;ARM&lt;/span&gt; with &lt;span class="caps"&gt;512MB&lt;/span&gt; &lt;span class="caps"&gt;RAM&lt;/span&gt;). It&amp;#8217;s an established project (the git history goes back to 2005, but the initial commit is &amp;#8220;initial import&amp;#8221;), written in C and highly performant, and follows the Unix philosophy of doing one thing and doing it well. The project has been recently taken over by new developers and has a new home in the &lt;a href="https://github.com/Motion-Project"&gt;Motion-Project GitHub org&lt;/a&gt; but the previous maintainer&amp;#8217;s amazingly detailed and helpful wiki is still available at &lt;a href="http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome"&gt;http://www.lavrsen.dk/foswiki/bin/view/Motion/WebHome&lt;/a&gt;. Also note that I&amp;#8217;m not sure about the other projects listed here, but Motion uses luminance / intensity only to detect motion, i.e. no color&amp;nbsp;information.&lt;/p&gt;
&lt;p&gt;The main things that I remember about Motion from using it in the past (aside from feeling somewhat archaic though amazingly stable and fast)&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tuning of thresholds as a number of changed&amp;nbsp;pixels.&lt;/li&gt;
&lt;li&gt;For tuning, the ability to output &amp;#8220;debug&amp;#8221; images showing only the pixels that triggered motion&amp;nbsp;detection.&lt;/li&gt;
&lt;li&gt;Output as videos and/or &lt;span class="caps"&gt;JPEG&lt;/span&gt; snapshots, but it handles everything internally as still&amp;nbsp;frames.&lt;/li&gt;
&lt;li&gt;Ability to mask off certain parts of the frame using a manually-generated mask&amp;nbsp;image.&lt;/li&gt;
&lt;li&gt;Ability to watermark every frame with the number of changes pixels, for&amp;nbsp;debugging/tuning.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Lightswitch mode&amp;#8221; that automatically ignores massive changes in&amp;nbsp;brightness.&lt;/li&gt;
&lt;li&gt;Motion detection based on the largest contiguous region of changed pixels, so it&amp;#8217;s less effected by&amp;nbsp;wind/leaves/rain/etc.&lt;/li&gt;
&lt;li&gt;Support for multiple&amp;nbsp;cameras.&lt;/li&gt;
&lt;li&gt;Snapshots either on a regular interval automatically, or triggered by a&amp;nbsp;signal.&lt;/li&gt;
&lt;li&gt;Ability to execute arbitrary programs/scripts when events occur (&lt;em&gt;many&lt;/em&gt; events; motion detect start and end, pictures and movies being written, event start and end,&amp;nbsp;etc.)&lt;/li&gt;
&lt;li&gt;Built-in ability to write extremely detailed information to&amp;nbsp;MySQL/PostgreSQL/SQLite3&lt;/li&gt;
&lt;li&gt;Highly configurable picture/video paths/filenames and overlay of text on&amp;nbsp;images.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Apparently since I last looked at the project, a number of major new features have been introduced&amp;nbsp;including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Live streaming of incoming cam video via &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;&lt;span class="caps"&gt;MJPEG&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Motion tracking in the frame, and experimental control of tracking motion via pan/tilt camera&amp;nbsp;controls.&lt;/li&gt;
&lt;li&gt;Control via a simple web interface, even including the ability to change/tune many settings live from the web&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;Automatic/adaptive noise and threshold&amp;nbsp;control.&lt;/li&gt;
&lt;li&gt;Official support for both the RaspberryPi and &lt;span class="caps"&gt;MUSL&lt;/span&gt; LibC (i.e. Alpine&amp;nbsp;Linux)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The project also has wonderfully detailed documentation, as well as active &lt;span class="caps"&gt;IRC&lt;/span&gt; and mailing&amp;nbsp;lists.&lt;/p&gt;
&lt;p&gt;While Motion only has a very basic web interface for control, there are a number of more full-featured web UIs for it including the quite popular &lt;a href="https://github.com/ccrisan/motioneye"&gt;MotionEye&lt;/a&gt; that uses Python and&amp;nbsp;Tornado.&lt;/p&gt;
&lt;h2 id="final-choice"&gt;&lt;a class="toclink" href="#final-choice"&gt;Final&amp;nbsp;Choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After my frustrations with ZoneMinder, Kerberos.io, and Shinobi, I believe I&amp;#8217;m going to be going the minimalist route and using Motion with some sort of web &lt;span class="caps"&gt;UI&lt;/span&gt; for motion detection, recording, and review, and the cameras&amp;#8217; built-in &lt;span class="caps"&gt;RSTP&lt;/span&gt; stream for high-resolution live viewing. Given how long this post ended up being, I&amp;#8217;ll save the Motion setup and testing for my next&amp;nbsp;installment.&lt;/p&gt;</content><category term="amcrest"></category><category term="camera"></category><category term="security"></category><category term="surveillance"></category><category term="video"></category><category term="linux"></category><category term="IP camera"></category><category term="evaluation"></category></entry><entry><title>Amcrest IP Camera FirstÂ Impressions</title><link href="https://blog.jasonantman.com/2018/05/amcrest-ip-camera-first-impressions/" rel="alternate"></link><published>2018-05-06T20:13:00-04:00</published><updated>2018-05-06T20:13:00-04:00</updated><author><name>Jason Antman</name></author><id>tag:blog.jasonantman.com,2018-05-06:/2018/05/amcrest-ip-camera-first-impressions/</id><summary type="html">&lt;p&gt;My first impressions on interfacing with Amcrest &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;cameras&lt;/p&gt;</summary><content type="html">&lt;!--- remove this next line to disable Table of Contents --&gt;

&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#devices-and-purchase"&gt;Devices and&amp;nbsp;Purchase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#initial-setup"&gt;Initial&amp;nbsp;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chrome-app"&gt;Chrome&amp;nbsp;App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api-and-digest-auth"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; and Digest Auth&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#python-digest-auth-removing-proxy"&gt;Python Digest-Auth-Removing&amp;nbsp;Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#json-configuration-backups"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; Configuration&amp;nbsp;Backups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#api"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#alarms-events-initial-research"&gt;Alarms / Events - Initial Research&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#snmp"&gt;&lt;span class="caps"&gt;SNMP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#smtp"&gt;&lt;span class="caps"&gt;SMTP&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#system-logs"&gt;System&amp;nbsp;logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gpl-compliance"&gt;&lt;span class="caps"&gt;GPL&lt;/span&gt;&amp;nbsp;Compliance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#auto-maintain"&gt;Auto&amp;nbsp;Maintain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#status-and-next-steps"&gt;Status and Next&amp;nbsp;Steps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;I&amp;#8217;m going to be moving to a new area at the end of the month and will be leaving my dogs home alone during the days I work in the office - and my home unattended - on a regular basis for the first time. While the neighborhood I&amp;#8217;m moving to seems safe, I wanted some peace of mind about both the security of my new home and the well-being of my dogs when I&amp;#8217;m out. While I&amp;#8217;ve set up a &lt;a href="https://blog.jasonantman.com/2016/01/raspberry-pi-security-system/"&gt;&lt;span class="caps"&gt;DIY&lt;/span&gt; RaspberryPi-based security system&lt;/a&gt; in a past apartment, that won&amp;#8217;t help knowing that my dogs are doing &lt;span class="caps"&gt;OK&lt;/span&gt; (and the house I&amp;#8217;m moving to isn&amp;#8217;t wired for a security system). While I may look into setting up a security system in the future (likely based on &lt;a href="https://en.wikipedia.org/wiki/Z-Wave"&gt;Z-Wave&lt;/a&gt; wireless components), I decided that some &lt;span class="caps"&gt;IP&lt;/span&gt;-based surveillance cameras are the best way to achieve my short-term need. I recently bought some of them, and want to share my&amp;nbsp;experience.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; The next post in this series is up, &lt;a href="/2018/05/linux-surveillance-camera-software-evaluation"&gt;Linux Surveillance Camera Software Evaluation&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="devices-and-purchase"&gt;&lt;a class="toclink" href="#devices-and-purchase"&gt;Devices and&amp;nbsp;Purchase&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I started my search with the hardware compatibility lists of &lt;a href="http://www.lavrsen.dk/foswiki/bin/view/Motion/WorkingDevices"&gt;Motion&lt;/a&gt; and &lt;a href="https://wiki.zoneminder.com/Hardware_Compatibility_List"&gt;ZoneMinder&lt;/a&gt;, the most well-known (albeit rather aged) open source video motion detection projects. I figured that most likely I&amp;#8217;d be using one of these to detect and alert on motion; I&amp;#8217;ve used Motion before quite successfully but it is a daemon only whereas ZoneMinder offers a full web interface. The outcome of my research was that most decent modern &lt;span class="caps"&gt;IP&lt;/span&gt;-based surveillance cameras support the &lt;a href="https://en.wikipedia.org/wiki/ONVIF"&gt;&lt;span class="caps"&gt;ONVIF&lt;/span&gt;&lt;/a&gt; interoperability standard, and almost any camera that supports &lt;span class="caps"&gt;ONVIF&lt;/span&gt; and third-party clients (i.e. unencrypted video streams) should&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;I decided that I&amp;#8217;d get three initial cameras for some tests: an indoor camera with remote pan and tilt to keep an eye on the dogs and two outdoor fixed cameras, one wireless and one wired with Power over Ethernet (PoE) support. I currently have a very good 5GHz wireless access point (a &lt;a href="https://www.ubnt.com/airmax/nanostationm/"&gt;Uniquiti NanoStation M&lt;/a&gt;) and a serviceable but nine-year-old 2.4 GHz 802.11b/g Ubiquiti PicoStation 2. Unfortunately, I&amp;#8217;ve been unable to find &lt;em&gt;any&lt;/em&gt; reasonably-priced 5GHz &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;cameras.&lt;/p&gt;
&lt;p&gt;My initial desire was to get only 1080p cameras, but I decided to try a 960p wireless model given my aged access point. After a few hours of browsing on Amazon I settled on buying the following three cameras, all of which claimed &lt;span class="caps"&gt;ONVIF&lt;/span&gt; support and support for third-party video management&amp;nbsp;systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B01G1U4MVA/"&gt;&lt;span class="caps"&gt;SV3C&lt;/span&gt; V-B01-&lt;span class="caps"&gt;1080PL&lt;/span&gt;&lt;/a&gt; 1080P wired outdoor camera with PoE&amp;nbsp;support&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B01I00987C/"&gt;Amcrest &lt;span class="caps"&gt;IPM&lt;/span&gt;-723W&lt;/a&gt; 2.4GHz wireless 960P outdoor camera (shipped with latest firmware, &lt;code&gt;2.400.AC02.15.R,build:2017-07-31&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/gp/product/B0145OQTPG/"&gt;Amcrest &amp;#8220;ProHD&amp;#8221; &lt;span class="caps"&gt;IP2M&lt;/span&gt;-841B&lt;/a&gt; 2.4GHz (or wired) 1080p indoor pan/tilt camera (shipped with latest firmware, &lt;code&gt;2.520.AC00.18.R,build:2017-06-29&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of them support wired Ethernet in addition to WiFi. They&amp;#8217;re all highly reviewed on Amazon with a number of positive reviews mentioning Linux. My choice of the Amcrest cameras was based largely on a number of very positive reviews from other people using Linux and/or leveraging their APIs and on the availability of a detailed &lt;a href="https://support.amcrest.com/hc/en-us/articles/232310528-Amcrest-HTTP-API-SDK"&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; document&lt;/a&gt; on Amcrest&amp;#8217;s site. The Amcrest &lt;span class="caps"&gt;API&lt;/span&gt; document specifically mentioned &lt;span class="caps"&gt;HTTP&lt;/span&gt; Basic authentication, which I considered a plus since I could easily add the required headers in an Nginx reverse proxy and use my own authentication methods for remote&amp;nbsp;access.&lt;/p&gt;
&lt;p&gt;After unboxing the Amcrest cameras and experimenting with them a bit, I decided to return the &lt;span class="caps"&gt;SV3C&lt;/span&gt; camera unopened. It was clear to me that if I wanted to use Amcrest&amp;#8217;s &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;, it would make sense to stick with the cameras from one manufacturer. Since &lt;span class="caps"&gt;SV3C&lt;/span&gt; didn&amp;#8217;t even have any &lt;span class="caps"&gt;API&lt;/span&gt; documentation that I could find, Amcrest won. The rest of this post will discuss my initial exploration of the Amcrest&amp;nbsp;cameras.&lt;/p&gt;
&lt;h1 id="initial-setup"&gt;&lt;a class="toclink" href="#initial-setup"&gt;Initial&amp;nbsp;Setup&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;While Amcrest seemed to be well-reviewed, I&amp;#8217;m always very hesitant to put new devices on my network, especially if they&amp;#8217;re running opaque proprietary firmware. And even more so if they have &amp;#8220;cloud&amp;#8221; features (as Amcrest does) that imply remote access which I&amp;#8217;d need to trust the manufacturer to properly secure and allow me to disable. &lt;a href="https://blog.jessfraz.com/post/home-lab-is-the-dopest-lab/"&gt;Jess Frazelle&amp;#8217;s Home Lab blog post&lt;/a&gt;, along with some great reviews from my colleague &lt;a href="https://github.com/jniesen"&gt;jniesen&lt;/a&gt;, spurred me to plan replacing my almost-decade-old Ubiquiti access points with some new ones that support BSSIDs and 802.1q VLANs, but until I do I&amp;#8217;m still stuck with a single &lt;span class="caps"&gt;SSID&lt;/span&gt; and flat&amp;nbsp;network.&lt;/p&gt;
&lt;p&gt;So, my initial unboxing process for each camera was as&amp;nbsp;follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Plug in to my MacBook with a crossover cable and Wireshark running; power on the camera and record the wired Ethernet &lt;span class="caps"&gt;MAC&lt;/span&gt; address for the camera. Then power off the&amp;nbsp;camera.&lt;/li&gt;
&lt;li&gt;On my &lt;a href="http://www.vyos.io/"&gt;VyOS&lt;/a&gt; router, assign the camera&amp;#8217;s wired &lt;span class="caps"&gt;MAC&lt;/span&gt; a static &lt;span class="caps"&gt;IP&lt;/span&gt; and local&amp;nbsp;&lt;span class="caps"&gt;DNS&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Alter my firewall rules to reject all traffic from the camera to the &lt;span class="caps"&gt;WAN&lt;/span&gt;, so it can&amp;#8217;t phone home or send anything directly to the external&amp;nbsp;world.&lt;/li&gt;
&lt;li&gt;Plug the camera in to my switch and power it on. Wait a few minutes and then access the builtin &lt;span class="caps"&gt;HTTP&lt;/span&gt; web interface at the &lt;span class="caps"&gt;IP&lt;/span&gt; I&amp;nbsp;assigned.&lt;/li&gt;
&lt;li&gt;Log in with the default username/password (admin/admin) and change the&amp;nbsp;password.&lt;/li&gt;
&lt;li&gt;Browse through the &amp;#8220;setup&amp;#8221; portion of the &lt;span class="caps"&gt;UI&lt;/span&gt; and record some of the current/default settings and&amp;nbsp;information:&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Information&amp;#8221; -&amp;gt; &amp;#8220;Version&amp;#8221; - record all&amp;nbsp;versions&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Camera&amp;#8221; -&amp;gt; &amp;#8220;Video&amp;#8221; - record streaming and snapshot settings; change Overlay to the camera&amp;#8217;s hostname and the Sub Stream to &lt;span class="caps"&gt;MJPEG&lt;/span&gt;, &lt;span class="caps"&gt;VGA&lt;/span&gt;, 5&amp;nbsp;&lt;span class="caps"&gt;FPS&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Camera&amp;#8221; -&amp;gt; &amp;#8220;Audio&amp;#8221; (on ProHD) - record stream&amp;nbsp;information&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; &amp;#8220;&lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;IP&lt;/span&gt;&amp;#8221; - change hostname; record wireless &lt;span class="caps"&gt;MAC&lt;/span&gt;; disable&amp;nbsp;&lt;span class="caps"&gt;P2P&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; &amp;#8220;Connection&amp;#8221; - record all ports; ensure &lt;span class="caps"&gt;ONVIF&lt;/span&gt; authentication is&amp;nbsp;enabled&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; (&amp;#8220;&lt;span class="caps"&gt;DDNS&lt;/span&gt;&amp;#8221;, &amp;#8220;&lt;span class="caps"&gt;IP&lt;/span&gt; Filter&amp;#8221;, &amp;#8220;&lt;span class="caps"&gt;SMTP&lt;/span&gt;&amp;#8221;, &amp;#8220;UPnP&amp;#8221;) - ensure all are&amp;nbsp;disabled&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; &amp;#8220;&lt;span class="caps"&gt;SNMP&lt;/span&gt;&amp;#8221; (if present) - enable&amp;nbsp;v1&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Network&amp;#8221; -&amp;gt; (&amp;#8220;Bonjour&amp;#8221;, &amp;#8220;Multicast&amp;#8221;, &amp;#8220;802.1x&amp;#8221;, &amp;#8220;QoS&amp;#8221;, &amp;#8220;HTTPs&amp;#8221;) - ensure all are&amp;nbsp;disabled&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;System&amp;#8221; -&amp;gt; &amp;#8220;General&amp;#8221; -&amp;gt; &amp;#8220;Date &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Time&amp;#8221; - enable&amp;nbsp;&lt;span class="caps"&gt;NTP&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;System&amp;#8221; -&amp;gt; &amp;#8220;Export&amp;#8221; - export a configuration file and save&amp;nbsp;it.&lt;/li&gt;
&lt;li&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Event&amp;#8221; - disable all of them for&amp;nbsp;now&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that, I added the wireless &lt;span class="caps"&gt;MAC&lt;/span&gt; address for the camera to my access point&amp;#8217;s &lt;span class="caps"&gt;ACL&lt;/span&gt; and then set up a static &lt;span class="caps"&gt;IP&lt;/span&gt;, local &lt;span class="caps"&gt;DNS&lt;/span&gt;, and outbound traffic reject the same way I did for the wired &lt;span class="caps"&gt;MAC&lt;/span&gt;. I then configured the WiFi connection in the camera&amp;#8217;s Setup &lt;span class="caps"&gt;UI&lt;/span&gt;, ensured it connected to the network properly, and unplugged the wired&amp;nbsp;Ethernet.&lt;/p&gt;
&lt;h1 id="chrome-app"&gt;&lt;a class="toclink" href="#chrome-app"&gt;Chrome&amp;nbsp;App&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;One thing I noted in the web &lt;span class="caps"&gt;UI&lt;/span&gt; in Chrome is the high-res H.264 video stream was unavailable, displaying a &amp;#8220;Please click here to download and install the plug-in&amp;#8221; link. I was amazingly happy to find that this link brought me to the &lt;a href="https://chrome.google.com/webstore/detail/amcrest-web-view/oddndbjhpcpopbebhonolceinkbnheih?hl=en-US"&gt;Amcrest Web View&lt;/a&gt; Chrome App, which actually works with Linux. The Chrome App really just seems to wrap the existing web &lt;span class="caps"&gt;UI&lt;/span&gt; while providing the required plug-in, but it works fine in Chrome on Linux. I&amp;#8217;m vaguely concerned about the Chrome App being another data exfiltration or phone-home avenue, but for initial testing I was willing to take that risk. The App worked quite nicely, streaming near-realtime and very fluid, high-&lt;span class="caps"&gt;FPS&lt;/span&gt; images from both the 960P and 1080P cameras over WiFi, and gave me smooth, natural control of the pan and tilt for the ProHD&amp;nbsp;camera.&lt;/p&gt;
&lt;h1 id="api-and-digest-auth"&gt;&lt;a class="toclink" href="#api-and-digest-auth"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; and Digest&amp;nbsp;Auth&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Next I wanted to dive right into the documented &lt;span class="caps"&gt;CGI&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;, and had even prepared a few curl commands for the basics (according to the &lt;a href="https://support.amcrest.com/hc/en-us/articles/232310528-Amcrest-HTTP-API-SDK"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; document&lt;/a&gt; on Amcrest&amp;#8217;s site) before I even got the cameras. Unfortunately, they all failed with 401 Unauthorized errors. After some investigation and a trip to the &lt;a href="https://amcrest.com/forum/technical-discussion-f3/"&gt;Amcrest Technical Forums&lt;/a&gt;, I found that recent firmware versions dropped support for Basic authentication in favor of only Digest. This was confirmed by &lt;a href="https://amcrest.com/forum/technical-discussion-f3/cgi-sdk-no-longer-functioning-on-17r--t2401.html"&gt;multiple&lt;/a&gt; &lt;a href="https://amcrest.com/forum/technical-discussion-f3/basic-http-auth-not-working-after-firmware-update--t2771.html"&gt;threads&lt;/a&gt; &lt;a href="https://amcrest.com/forum/technical-discussion-f3/http-api-authentication-via-url-t3899.html"&gt;on&lt;/a&gt; &lt;a href="https://amcrest.com/forum/technical-discussion-f3/authentication-examples--t7128.html"&gt;the&lt;/a&gt; forum. This was quite problematic for my plans, since &lt;a href="https://en.wikipedia.org/wiki/Digest_access_authentication"&gt;Digest authentication&lt;/a&gt; is significantly more complicated than Basic and relies on &lt;span class="caps"&gt;MD5&lt;/span&gt; hashes generated on the client that include various fields sent in the headers of the server 401 response. In short, there doesn&amp;#8217;t seem to be any common reverse proxy (I checked Nginx, Apache, Lighttpd, and HAproxy) that supports Digest authentication to the backend/upstream. So my plans of wrapping the cameras in my own security (&lt;span class="caps"&gt;TLS&lt;/span&gt; and client certificate authentication in Nginx, with Nginx adding the appropriate Basic auth headers during the proxy process) weren&amp;#8217;t working out so well - the best I could get is a combination of the authentication I enabled in Nginx, plus Digest authentication to each&amp;nbsp;stream.&lt;/p&gt;
&lt;p&gt;I spent the better part of two afternoons and evenings looking into this and trying to develop a workaround. The &lt;a href="https://amcrest.com/forum/technical-discussion-f3/cgi-sdk-no-longer-functioning-on-17r--t2401.html"&gt;main Amcrest forum thread&lt;/a&gt; about this didn&amp;#8217;t have a whole lot of information other than many frustrated customers broken by the latest firmware upgrade (without even a corresponding &lt;span class="caps"&gt;API&lt;/span&gt; documentation update; the latest &lt;span class="caps"&gt;API&lt;/span&gt; docs still listed support for both Basic and Digest) and a few people who received unhelpful support responses. I opened my own support ticket about the problem, stating that I&amp;#8217;d purchased the cameras based on the &lt;span class="caps"&gt;API&lt;/span&gt; documentation and planned to integrate them with a system that only supports Basic authentication. I received a response the next day, stating in&amp;nbsp;part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am sorry for the bad information you got about our cameras. You are correct, Basic Authentication is no longer supported on our &lt;span class="caps"&gt;IP&lt;/span&gt; Cameras, &lt;span class="caps"&gt;NVR&lt;/span&gt;&amp;#8217;s and &lt;span class="caps"&gt;DVR&lt;/span&gt;&amp;#8217;s since latest firmware&amp;nbsp;updates.&lt;/p&gt;
&lt;p&gt;This was an intended decision as our developer decided to move away from Basic Authentication due to major security concern. Our devices will work only on Digest Authentication from now on. We did suggest our product management team and developers to re-enable Basic Authentication as some sort of &amp;#8220;optional&amp;#8221; feature able to be disabled by the user. However, this suggestion was&amp;nbsp;dismissed.&lt;/p&gt;
&lt;p&gt;The best situation for you at this point is to send back the cameras as, as stated, they won&amp;#8217;t work with Basic&amp;nbsp;Authentication.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It&amp;#8217;s worth pointing out at this point that the recent firmware versions for these cameras include &lt;span class="caps"&gt;HTTPS&lt;/span&gt; support, and even include support for either uploading your own &lt;span class="caps"&gt;TLS&lt;/span&gt; cert and key or generating a &lt;span class="caps"&gt;CSR&lt;/span&gt; on the camera and then uploading the signed certificate. &lt;span class="caps"&gt;TLS&lt;/span&gt; with Basic auth (i.e. &lt;span class="caps"&gt;API&lt;/span&gt; keys/tokens) is a widely accepted method in the world of public APIs, and would surely be sufficient for devices such as these cameras. In fact, Amcrest runs their own dynamic &lt;span class="caps"&gt;DNS&lt;/span&gt; service for (optional) remote access to cameras, so it should be relatively simple to leverage that and LetsEncrypt for automated certs. Instead - probably spurred on by the archaic &lt;span class="caps"&gt;ONVIF&lt;/span&gt; standard that specifies Digest authentication - they seem to be going the route of alleviating their &amp;#8220;major security concern&amp;#8221; by means of a 25-year-old authentication system based on &lt;span class="caps"&gt;MD5&lt;/span&gt; hashes, and likely quite easy to break offline given access to a successful authentication exchange and a &lt;span class="caps"&gt;GPU&lt;/span&gt;-based &lt;span class="caps"&gt;EC2&lt;/span&gt; instance (not to mention simple to&amp;nbsp;man-in-the-middle).&lt;/p&gt;
&lt;p&gt;So, being the obsessive person that I am, I started thinking about how to fix this. I went through the usual suspects for reverse proxying - Nginx, Apache, HAproxy, Lighttpd, etc. - and couldn&amp;#8217;t find any examples of existing solutions to handle Digest authentication for the upstream. While it would probably be &lt;em&gt;possible&lt;/em&gt;, most of my recent programming experience is in Python and Ruby with a handful of Groovy and &lt;span class="caps"&gt;JS&lt;/span&gt;, and none of those seemed to fit the bill. I spent a bit of time looking at simple &lt;span class="caps"&gt;HTTP&lt;/span&gt; proxy solutions in languages that I know (or at least sort-of know) and found the &lt;a href="https://github.com/nodejitsu/node-http-proxy"&gt;nodejitsu/node-http-proxy&lt;/a&gt; project. With a bit of experimentation I was able to get that working for the simple text-based &lt;span class="caps"&gt;API&lt;/span&gt; URLs but (as expected, looking at the source) it failed completely for the secondary &lt;span class="caps"&gt;MJPEG&lt;/span&gt; streams. I found and tried &lt;a href="https://github.com/legege/node-mjpeg-proxy"&gt;node-mjpeg-proxy&lt;/a&gt; next, but was unable to get it working&amp;nbsp;satisfactorily.&lt;/p&gt;
&lt;p&gt;After all of those experiments and research I decided that I should stop looking for an exsiting solution or magic bullet and go back to what I know best: Python. After only a few minutes more on Google, I stumbled on a complete gem in the form of a Flask snippet, &lt;a href="http://flask.pocoo.org/snippets/118/"&gt;Stream Proxy with Requests&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stream_with_context&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;path:url&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream_with_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_content&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt; &lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;req&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="python-digest-auth-removing-proxy"&gt;&lt;a class="toclink" href="#python-digest-auth-removing-proxy"&gt;Python Digest-Auth-Removing&amp;nbsp;Proxy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Starting with the above snippet using &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; and &lt;a href="http://docs.python-requests.org/en/master/"&gt;requests&lt;/a&gt; - two Python packages that I&amp;#8217;m quite familiar with - I was able to quickly add the Digest authentication option to the requests call and achieve a working, auth-less &lt;span class="caps"&gt;MJPEG&lt;/span&gt; stream from the camera. With a bit of tuning, I came up with a rough proof-of-concept that provided unauthenticated access to the &lt;span class="caps"&gt;MJPEG&lt;/span&gt; stream and &lt;span class="caps"&gt;CGI&lt;/span&gt;-based &lt;span class="caps"&gt;API&lt;/span&gt; (including snapshots and &lt;span class="caps"&gt;PTZ&lt;/span&gt; control) simultaneously via multiple workers. It&amp;#8217;s not amazing; running on my desktop the &lt;span class="caps"&gt;MJPEG&lt;/span&gt; stream suffers some pretty bad latency that gets even worse when other &lt;span class="caps"&gt;CGI&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; endpoints are used simultaneously (I suspect this may be a problem on the camera&amp;nbsp;itself).&lt;/p&gt;
&lt;p&gt;Note that this does not proxy either non-&lt;span class="caps"&gt;MJPEG&lt;/span&gt; streams (i.e. the high-resolution &lt;span class="caps"&gt;RSTP&lt;/span&gt; stream) or the built-in web &lt;span class="caps"&gt;UI&lt;/span&gt; itself (which relies on client-side javascript XMLHttpRequest and cookies for&amp;nbsp;login).&lt;/p&gt;
&lt;p&gt;For the time being I&amp;#8217;m not sure if I&amp;#8217;m even going to use this proxy, but for anyone who&amp;#8217;s interested, the code is &lt;a href="https://github.com/jantman/python-amcrest-noauth-proxy"&gt;on GitHub&lt;/a&gt; along with a ready-to-run &lt;a href="https://hub.docker.com/r/jantman/python-amcrest-noauth-proxy/"&gt;Docker image&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="json-configuration-backups"&gt;&lt;a class="toclink" href="#json-configuration-backups"&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt; Configuration&amp;nbsp;Backups&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;While looking into the Digest authentication changes, I used the configuration export/backup functionality (Export via the Setup web &lt;span class="caps"&gt;UI&lt;/span&gt;, or &lt;code&gt;/cgi-bin/Config.backup?action=All&lt;/code&gt; via the &lt;span class="caps"&gt;API&lt;/span&gt; for a more detailed config) to see if there was a chance that Digest/Basic was hidden somewhere in the config. It&amp;#8217;s not, but I was pleasantly surprised to see that the exported configuration file was plain and cleanly-deserializable &lt;span class="caps"&gt;JSON&lt;/span&gt; (even pretty-printed). This definitely makes it easier to back up configuration to a git repository and track changes over time, or make sweeping changes to defaults for provisioning new&amp;nbsp;cameras.&lt;/p&gt;
&lt;h1 id="api"&gt;&lt;a class="toclink" href="#api"&gt;&lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;For the majority of the last five-plus years of my career, I&amp;#8217;ve worked almost exclusively with software and generally with modern, well-known systems and services. Coming from a ReST-ful world, the Amcrest cameras&amp;#8217; &lt;span class="caps"&gt;API&lt;/span&gt; was a bit of a shock and trip back in time for me. While the current version (2.12) of the &lt;span class="caps"&gt;API&lt;/span&gt; documentation calls it a &amp;#8220;&lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&amp;#8221;, the filename of the previous version that I found (1.51) is much more accurate: &lt;a href="https://s3.amazonaws.com/amcrest-files/AMCREST_CGI_SDK_API.pdf"&gt;AMCREST_CGI_SDK_API.pdf&lt;/a&gt;. While functional, the &lt;span class="caps"&gt;API&lt;/span&gt; appears to be a minimum-effort project to wrap (likely existing) system tooling on the camera in some sort of &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. Some pertinent pieces of the &lt;span class="caps"&gt;API&lt;/span&gt; specification&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aside from &lt;span class="caps"&gt;RSTP&lt;/span&gt; streams, all paths are to &lt;span class="caps"&gt;CGI&lt;/span&gt; scripts - i.e. &lt;code&gt;/cgi-bin/mjpg/video.cgi&lt;/code&gt;, &lt;code&gt;/cgi-bin/configManager.cgi&lt;/code&gt;,&amp;nbsp;etc.&lt;/li&gt;
&lt;li&gt;Many of the paths use query parameters that sound like they map to command-line arguments, i.e. &lt;code&gt;/cgi-bin/configManager.cgi?action=getConfig&amp;amp;name=Snap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;While the &lt;span class="caps"&gt;API&lt;/span&gt; specification defines &lt;span class="caps"&gt;HTTP&lt;/span&gt; status codes including 200, 400, 404, and 500, it also &lt;em&gt;clearly&lt;/em&gt; states (with examples) that &amp;#8220;fits with syntax but an error occurs while the server handles it&amp;#8221; will result in a &lt;span class="caps"&gt;HTTP&lt;/span&gt; 200 with a body containing a plain text error&amp;nbsp;message.&lt;/li&gt;
&lt;li&gt;The &lt;span class="caps"&gt;API&lt;/span&gt; appears to use the &lt;span class="caps"&gt;POST&lt;/span&gt; verb for anything that uploads a file, and &lt;span class="caps"&gt;GET&lt;/span&gt; for everything else. URLs that result in configuration changes or pan/tilt/zoom commands are still &lt;span class="caps"&gt;GET&lt;/span&gt;&amp;nbsp;requests.&lt;/li&gt;
&lt;li&gt;For query parameters (which drive the majority of the &lt;span class="caps"&gt;API&lt;/span&gt;), various &lt;span class="caps"&gt;CGI&lt;/span&gt; paths use either logically-named parameters (e.g. &amp;#8220;channel&amp;#8221;, &amp;#8220;action&amp;#8221;, etc.) or generic ones (&amp;#8220;arg1&amp;#8221;, &amp;#8220;arg2&amp;#8221;, &amp;#8220;arg3&amp;#8221;,&amp;nbsp;etc.).&lt;/li&gt;
&lt;li&gt;While the &lt;span class="caps"&gt;JSON&lt;/span&gt; configuration file format was a welcome surprise, &lt;span class="caps"&gt;API&lt;/span&gt; endpoints that return textual responses (as opposed to image/video/audio) respond with line-based key/value pairs separated by equal&amp;nbsp;signs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I imagine that much of this is dictated by needing to support Amcrest&amp;#8217;s network video recorder products, and perhaps some of it is also dictated by their manufacturer Dahua (Amcrest&amp;#8217;s products seem to be running customized and branded Dahua software, and likely hardware too). While much of this &lt;span class="caps"&gt;API&lt;/span&gt; is simpler for me to work with than the &lt;span class="caps"&gt;SOAP&lt;/span&gt;- and &lt;span class="caps"&gt;WSDL&lt;/span&gt;-based &lt;span class="caps"&gt;ONVIF&lt;/span&gt; standard, I&amp;#8217;d still be much happier if the devices exposed a modern ReST/&lt;span class="caps"&gt;JSON&lt;/span&gt;&amp;nbsp;&lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;There &lt;em&gt;is&lt;/em&gt; a Python package, &lt;a href="http://python-amcrest.readthedocs.io/"&gt;python-amcrest&lt;/a&gt;, that claims to provide a native Python client for this &lt;span class="caps"&gt;CGI&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; but I haven&amp;#8217;t tried it&amp;nbsp;yet.&lt;/p&gt;
&lt;h1 id="alarms-events-initial-research"&gt;&lt;a class="toclink" href="#alarms-events-initial-research"&gt;Alarms / Events - Initial&amp;nbsp;Research&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;These cameras support a number of internal &amp;#8220;alarms&amp;#8221; for events such as motion detection (likely nowhere near as good as Motion or ZoneMinder), video loss, audio detection, failed logins, disk (optional &lt;span class="caps"&gt;SD&lt;/span&gt; card) missing, error or full, network disconnect or &lt;span class="caps"&gt;IP&lt;/span&gt; conflict, or external alarms (the ProHD has four analog relay input/output connections on the back that can be used for either external trigger inputs or outputs). I&amp;#8217;m not concerned with most of them and currently don&amp;#8217;t have &lt;span class="caps"&gt;SD&lt;/span&gt; cards in the cameras, but I am interested in the &amp;#8220;Video Tamper&amp;#8221; alarm that detects loss of picture such as when the lens is obstructed. So, I began a bit of research into what options were available for receiving these alarms. Of course I wasn&amp;#8217;t lucky enough to see a webhook or &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt;/&lt;span class="caps"&gt;POST&lt;/span&gt; delivery method, let alone &lt;span class="caps"&gt;SNS&lt;/span&gt; or &lt;span class="caps"&gt;SQS&lt;/span&gt;. The options for alarm handling are recording, triggering one of the relays (on the ProHD that supports them), taking a snapshot, sending email, or polling the &lt;span class="caps"&gt;API&lt;/span&gt; for alarm events. The ProHD also supposedly supports &lt;span class="caps"&gt;SNMP&lt;/span&gt; traps, though they&amp;#8217;re not explicitly listed as an event&amp;nbsp;action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Upon review of the &lt;span class="caps"&gt;API&lt;/span&gt; documentation, it appears that it&amp;#8217;s also possible to &amp;#8220;subscribe&amp;#8221; to events via &lt;span class="caps"&gt;HTTP&lt;/span&gt;/&lt;span class="caps"&gt;CGI&lt;/span&gt;. This &lt;span class="caps"&gt;API&lt;/span&gt; appears to be a &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; that responds with a &lt;code&gt;multipart/x-mixed-replace&lt;/code&gt; content-type and streams plaintext event descriptions to the client as they occur. The client must send keepalive data to the server every 1 to 60 seconds (helpfully, the doc states that the keepalive data can be the string &amp;#8220;keep&amp;nbsp;alive&amp;#8221;).&lt;/p&gt;
&lt;p&gt;Given those options, I decided that either &lt;span class="caps"&gt;SNMP&lt;/span&gt; or &amp;#8220;email&amp;#8221; (&lt;span class="caps"&gt;SMTP&lt;/span&gt;) would be the best bet for programmatically receiving the events and acting on&amp;nbsp;them.&lt;/p&gt;
&lt;h2 id="snmp"&gt;&lt;a class="toclink" href="#snmp"&gt;&lt;span class="caps"&gt;SNMP&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The latest firmware for the &lt;span class="caps"&gt;IPM&lt;/span&gt;-723W, &amp;#8220;15.R&amp;#8221;, doesn&amp;#8217;t appear to support &lt;span class="caps"&gt;SNMP&lt;/span&gt; at all; it&amp;#8217;s missing the &amp;#8220;Setup&amp;#8221; -&amp;gt; &amp;#8220;Network&amp;#8221; -&amp;gt; &amp;#8220;&lt;span class="caps"&gt;SNMP&lt;/span&gt;&amp;#8221; configuration that the ProHD running &amp;#8220;18.R&amp;#8221; software has. So it seems like &lt;span class="caps"&gt;SNMP&lt;/span&gt; isn&amp;#8217;t going to be a viable option for me but I wanted to explore it anyway. I enabled &lt;span class="caps"&gt;SNMP&lt;/span&gt; v1 with the default &amp;#8220;public&amp;#8221; read community and issued a quick &lt;code&gt;snmpwalk&lt;/code&gt;. There wasn&amp;#8217;t a whole lot aside from what I&amp;#8217;d expect to find on a typical Linux device (&lt;span class="caps"&gt;SNMP&lt;/span&gt;*-&lt;span class="caps"&gt;MIB&lt;/span&gt;, &lt;span class="caps"&gt;IF&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;, &lt;span class="caps"&gt;TCP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;, &lt;span class="caps"&gt;IP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;, etc.). The sum of the interesting parts&amp;nbsp;was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.10 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.1.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.11 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.1.2
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.12 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.13 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.2.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.14 = &lt;span class="caps"&gt;OID&lt;/span&gt;: SNMPv2-&lt;span class="caps"&gt;SMI&lt;/span&gt;::enterprises.1004849.2.2.2
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.15 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.16 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.17 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.18 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.19 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.20 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.21 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.22 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.23 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.24 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORID.25 = &lt;span class="caps"&gt;OID&lt;/span&gt;: ccitt.1
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.10 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- System oidVersionInfo
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.11 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- System oidProductInfo
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.12 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- System oidSysetmInfo
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.13 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- network oidNetworkPort
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.14 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Dahua &lt;span class="caps"&gt;SNMP&lt;/span&gt; Mib Module -- network oidTcpIpInfo
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.15 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: RegularStreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.16 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: MDStreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.17 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: AlarmStreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.18 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: Extra1StreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.19 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: VideoMotionInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.20 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: VideoLossInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.21 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: VideoBlindInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.22 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: LocalAlarmInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.23 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: NetworkAlarmTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.24 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: RecordMainStreamInfoTable
SNMPv2-&lt;span class="caps"&gt;MIB&lt;/span&gt;::sysORDescr.25 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: PhysicalVolumeInfoTable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It appears that there are two sets of custom MIBs exposed, one from their manufacturer Dahua and another presumably from Amcrest and claiming to be exposed at &amp;#8220;.0.1&amp;#8221; (ccitt.1). I&amp;#8217;ve been completely unable to get anything out of the Amcrest MIBs (sysORID&amp;#8217;s 15 through 25; ccitt.1) and have presumed them to be broken; the &lt;a href="https://amcrest.com/forum/technical-discussion-f3/snmp-t1045.html"&gt;one thread on the Amcrest forums&lt;/a&gt; about this seems to concur. For the Dahua OIDs, neither Amcrest nor Dahua appear to publish the MIBs but thanks to a &lt;a href="https://github.com/librenms/librenms/issues/8126"&gt;LibreNMS issue&lt;/a&gt;, &lt;a href="https://ipcamtalk.com/threads/snmp-mib.25434/"&gt;IPcamTalk forum thread&lt;/a&gt; and &lt;a href="https://www.reddit.com/r/homedefense/comments/7n0bhj/dahua_nvr_looking_for_snmp_mib_files/"&gt;reddit post&lt;/a&gt; I was able to find them. The information I got from walking that &lt;span class="caps"&gt;OID&lt;/span&gt; tree with the appropriate &lt;span class="caps"&gt;MIB&lt;/span&gt; from those links didn&amp;#8217;t prove terribly&amp;nbsp;useful:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::softwareRevision.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 2.520.&lt;span class="caps"&gt;AC00&lt;/span&gt;.18.R
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::hardwareRevision.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 1.00
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::videoChannel.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::alarmInput.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::alarmOutput.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::serialNumber.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: &lt;span class="caps"&gt;AMC00056485D24AAF8&lt;/span&gt;
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::systemVersion.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 2.520.0000.18, Build Date:2017-06-29
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::deviceType.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: &lt;span class="caps"&gt;IP2M&lt;/span&gt;-841B
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::deviceClass.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: &lt;span class="caps"&gt;IPC&lt;/span&gt;
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::deviceStatus.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::machineName.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: AMC00056_24AAF8
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::cpuUsage.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 70
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::lastestEvent.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: videoBlindEvent
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::encodeNo.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::tcpPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 37777
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::udpPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 37778
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::httpPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 80
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::rtspPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 554
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::maxConnectNum.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 10
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::httpsPort.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 443
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::getIpmode.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::macAddr.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 9c:8e:cd:xx:xx:xx
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::ipVersion.0 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::subnetMast.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 255.255.255.0
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::defaultGateway.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 192.168.0.1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::preferredDns.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 192.168.0.1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::alternateDns.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 1.0.0.1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::ipAddr.0 = &lt;span class="caps"&gt;STRING&lt;/span&gt;: 192.168.0.60
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::localAlarmIndex.1 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;span class="caps"&gt;DAHUA&lt;/span&gt;-&lt;span class="caps"&gt;SNMP&lt;/span&gt;-&lt;span class="caps"&gt;MIB&lt;/span&gt;::networkAlarmIndex.1 = &lt;span class="caps"&gt;INTEGER&lt;/span&gt;: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So&amp;#8230; nothing terribly interesting. I&amp;#8217;m planning on seeing what I can get from the &lt;span class="caps"&gt;SNMP&lt;/span&gt; traps, but since only one of my cameras supports them (and they&amp;#8217;re &lt;span class="caps"&gt;UDP&lt;/span&gt;) I&amp;#8217;m not planning on using them for actually receiving&amp;nbsp;events/alarms.&lt;/p&gt;
&lt;h2 id="smtp"&gt;&lt;a class="toclink" href="#smtp"&gt;&lt;span class="caps"&gt;SMTP&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With &lt;span class="caps"&gt;SNMP&lt;/span&gt; out of the running for receiving alarms, I turned to &lt;span class="caps"&gt;SMTP&lt;/span&gt;. The configuration page I was greeted with, as well as its pop-up help page, left me slightly confused and&amp;nbsp;unsettled:&lt;/p&gt;
&lt;p&gt;&lt;a href="/GFX/amcrest_smtp_config.png"&gt;&lt;img alt="screenshot of Amcrest camera SMTP configuration page and help pop-up" src="/GFX/amcrest_smtp_config_sm.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I finally muddled through the options and poor translation - checking the &amp;#8220;Login Anonymously&amp;#8221; checkbox directly above the &lt;span class="caps"&gt;SMTP&lt;/span&gt; username and password actually enables authentication, i.e. disables non-&lt;span class="caps"&gt;AUTH&lt;/span&gt;/anonymous &lt;span class="caps"&gt;SMTP&lt;/span&gt; - I found that support for anonymous &lt;span class="caps"&gt;SMTP&lt;/span&gt; (i.e. without &lt;span class="caps"&gt;AUTH&lt;/span&gt;) is completely broken. When setting unchecking the &amp;#8220;Login anonymously&amp;#8221; box (i.e. no &lt;span class="caps"&gt;AUTH&lt;/span&gt;), the &lt;span class="caps"&gt;UI&lt;/span&gt; displays the same &amp;#8220;Email test failed&amp;#8221; error message as with bad credentials, but (per Wireshark/tcpdump) it never actually sends &lt;em&gt;any&lt;/em&gt; traffic to the &lt;span class="caps"&gt;SMTP&lt;/span&gt; server at all. I found a &lt;a href="https://amcrest.com/forum/technical-discussion-f3/email-test-always-fails-brand-new-camera-t1104-s10.html"&gt;forum thread&lt;/a&gt; going back &lt;strong&gt;almost two years&lt;/strong&gt; confirming&amp;nbsp;this.&lt;/p&gt;
&lt;p&gt;I quickly hacked together a &lt;span class="caps"&gt;SMTP&lt;/span&gt; server that accepts any credentials and prints the message to &lt;span class="caps"&gt;STDOUT&lt;/span&gt; (based on &lt;a href="https://github.com/bcoe/secure-smtpd"&gt;secure-smtpd&lt;/a&gt;), pointed the camera&amp;#8217;s &lt;span class="caps"&gt;SMTP&lt;/span&gt; settings to it, and then threw a black shirt over the lens of the camera. Within a minute or so, I got the following message via my dummy &lt;span class="caps"&gt;SMTP&lt;/span&gt;&amp;nbsp;server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Date: Sun, 06 May 2018 15:28:45 -0600
From: &amp;lt;&amp;gt;
To: &amp;lt;jason@jasonantman.com&amp;gt;
Subject: =?&lt;span class="caps"&gt;UTF&lt;/span&gt;-8?B?SVBDIE1lc3NhZ2U=?=
&lt;span class="caps"&gt;MIME&lt;/span&gt;-Version: 1.0
Content-type: multipart/mixed;boundary=&amp;quot;======DAHUA_TECH======&amp;quot;

This is a multi-part message in &lt;span class="caps"&gt;MIME&lt;/span&gt; format.

--======DAHUA_TECH======
Content-Type: text/plain;
        charset=&lt;span class="caps"&gt;UTF&lt;/span&gt;-8
Content-Transfer-Encoding: base64

QWxhcm0gRXZlbnQ6IFRhbXBlciBEZXRlY3QNCkFsYXJtIElucHV0IENoYW5uZWw6IDENCkFsYXJt
IFN0YXJ0IFRpbWUoRC9NL1kgSDpNOlMpOiAwNi8wNS8yMDE4IDE1OjI4OjQwDQpBbGFybSBEZXZp
Y2UgTmFtZTogQU1DMDAwNTZfMjRBQUY4DQpBbGFybSBOYW1lOiANCklQIEFkZHJlc3M6IDE5Mi4x
NjguMC42MA0K



--======DAHUA_TECH======
Content-Type: application/octet-stream;
        name=&amp;quot;20180506152840423ch01.jpg&amp;quot;
Content-Disposition: attachment;
        filename=&amp;quot;20180506152840423ch01.jpg&amp;quot;
Content-Transfer-Encoding: base64
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The second attachment is a full 1920x1080 snapshot of the video. I was a bit confused to see the &lt;span class="caps"&gt;UTF&lt;/span&gt;-8 base64-encoded subject, but the base64-decoded Subject is &amp;#8220;&lt;span class="caps"&gt;IPC&lt;/span&gt; Message&amp;#8221; and body text&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Alarm Event: Tamper Detect
Alarm Input Channel: 1
Alarm Start Time(D/M/Y H:M:S): 06/05/2018 15:28:40
Alarm Device Name: AMC00056_24AAF8
Alarm Name:
&lt;span class="caps"&gt;IP&lt;/span&gt; Address: 192.168.0.60
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the only alarm/event I really care about is loss of picture, and motion detection software should be able to handle the same task, I&amp;#8217;m going to completely ignore the alarm/event features for now and focus on the camera solely as a video&amp;nbsp;source.&lt;/p&gt;
&lt;h1 id="system-logs"&gt;&lt;a class="toclink" href="#system-logs"&gt;System&amp;nbsp;logs&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The cameras keep rudimentary &amp;#8220;system logs&amp;#8221; which include events (e.g. video tamper/video loss) as well as login/logout from the web &lt;span class="caps"&gt;UI&lt;/span&gt; as well as &lt;span class="caps"&gt;API&lt;/span&gt;, configuration saves, and &amp;#8220;Set Time&amp;#8221; events which perplex me as they show web &lt;span class="caps"&gt;UI&lt;/span&gt; client IPs as the source. These logs are available via a searchable table in the web &lt;span class="caps"&gt;UI&lt;/span&gt;, as well as &lt;span class="caps"&gt;CGI&lt;/span&gt; access to either page through logs filtered by date/time or return a &amp;#8220;log backup&amp;#8221; file of all logs between a given start and end time. Unfortunately, they don&amp;#8217;t support syslog or any other remote log&amp;nbsp;aggregation.&lt;/p&gt;
&lt;h1 id="gpl-compliance"&gt;&lt;a class="toclink" href="#gpl-compliance"&gt;&lt;span class="caps"&gt;GPL&lt;/span&gt;&amp;nbsp;Compliance&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Between the &lt;span class="caps"&gt;SNMP&lt;/span&gt; output and nmap results, as well as some other information exposed in the documentation and user interface, I&amp;#8217;m certain that these devices are running Linux and &lt;a href="https://www.ffmpeg.org/"&gt;FFmpeg&lt;/a&gt; (LGPLv2). I&amp;#8217;ve also seen some things that make it highly likely that they&amp;#8217;re also running &lt;a href="https://busybox.net/"&gt;busybox&lt;/a&gt; (GPLv2) and the other common embedded Linux utilities. However, I was unable to find any open source license information or source code offer in the packaging and printed documentation that came with either camera, or on Amcrest&amp;#8217;s website or user documentation. I&amp;#8217;ve posted a &lt;a href="https://amcrest.com/forum/technical-discussion-f3/source-code-availability--t8163.html"&gt;thread&lt;/a&gt; in Amcrest&amp;#8217;s technical discussion forums inquiring about this but don&amp;#8217;t expect much response from them. If I have time, I may try downloading one of the firmware images and doing some simple tests like running it through &lt;code&gt;strings&lt;/code&gt; to see if I can spot any well-known copyright headers. But as far as I can&amp;nbsp;tell,&lt;/p&gt;
&lt;h1 id="auto-maintain"&gt;&lt;a class="toclink" href="#auto-maintain"&gt;Auto&amp;nbsp;Maintain&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The cameras both came out-of-the-box with the &amp;#8220;Auto maintain&amp;#8221; feature enabled, which&amp;#8230; reboots the cameras automatically once a week. By default, on Thursday mornings just after 3am&amp;nbsp;local.&lt;/p&gt;
&lt;p&gt;Having spent some time in the past developing embedded Linux network devices, this does &lt;em&gt;not&lt;/em&gt; give me a terribly confident feeling about the&amp;nbsp;software.&lt;/p&gt;
&lt;h1 id="status-and-next-steps"&gt;&lt;a class="toclink" href="#status-and-next-steps"&gt;Status and Next&amp;nbsp;Steps&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;To wrap up, I currently have two Amcrest &lt;span class="caps"&gt;IP&lt;/span&gt; cameras running on my home network; one looking out the front window, and one (indoor pan/tilt) overlooking my dogs&amp;#8217; crates. Now that I have them configured for the basics, I&amp;#8217;m going to attempt to ignore Amcrest&amp;#8217;s irritating software and focus on the cameras solely as video sources. My next steps - hopefully in a follow-up post not too long from now - will&amp;nbsp;include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evaluation of Linux-based video surveillance recording/streaming/motion detection software, and choosing one to use. This will likely come down to choosing between something with an existing multi-camera web interface (ZoneMinder, or perhaps one of the newer variants) or something to handle motion detection only (Motion, or a modern variant) and cobbling together a simple web &lt;span class="caps"&gt;UI&lt;/span&gt; for streaming and event&amp;nbsp;viewing.&lt;/li&gt;
&lt;li&gt;Experimenting with using &lt;span class="caps"&gt;ONVIF&lt;/span&gt; instead of the &lt;span class="caps"&gt;CGI&lt;/span&gt;&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;Expermenting with FFmpeg or something else to restream the video instead of trying to remove authentication in a&amp;nbsp;proxy.&lt;/li&gt;
&lt;li&gt;Possibly using &lt;a href="http://python-amcrest.readthedocs.io/"&gt;python-amcrest&lt;/a&gt; as a wrapper around the &lt;span class="caps"&gt;CGI&lt;/span&gt;&amp;nbsp;interface.&lt;/li&gt;
&lt;li&gt;Figuring out a system to notify me of important events such as motion, video loss, or connectivity loss to a&amp;nbsp;camera.&lt;/li&gt;
&lt;li&gt;The cameras support &lt;span class="caps"&gt;SD&lt;/span&gt; cards and a built-in simple &lt;span class="caps"&gt;DVR&lt;/span&gt; feature. I may get cards for them and configure them to record on network connection loss, just as a&amp;nbsp;test.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; The next post in this series is up, &lt;a href="/2018/05/linux-surveillance-camera-software-evaluation"&gt;Linux Surveillance Camera Software Evaluation&lt;/a&gt;.&lt;/p&gt;</content><category term="amcrest"></category><category term="camera"></category><category term="security"></category><category term="surveillance"></category><category term="video"></category></entry></feed>