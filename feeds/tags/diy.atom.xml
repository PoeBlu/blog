<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog - DIY</title><link href="https://blog.jasonantman.com/" rel="alternate"></link><link href="https://blog.jasonantman.com/feeds/tags/diy.atom.xml" rel="self"></link><id>https://blog.jasonantman.com/</id><updated>2018-12-31T21:25:00-05:00</updated><entry><title>Twilio Programmable Wireless PPP Proxy DockerÂ Image</title><link href="https://blog.jasonantman.com/2018/12/twilio-programmable-wireless-ppp-proxy-docker-image/" rel="alternate"></link><published>2018-12-31T21:25:00-05:00</published><updated>2018-12-31T21:25:00-05:00</updated><author><name>Jason Antman</name></author><id>tag:blog.jasonantman.com,2018-12-31:/2018/12/twilio-programmable-wireless-ppp-proxy-docker-image/</id><summary type="html">&lt;p&gt;Docker container with &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S) proxy to Twilio Programmable Wirless &lt;span class="caps"&gt;PPP&lt;/span&gt; cellular&amp;nbsp;connection.&lt;/p&gt;</summary><content type="html">&lt;div class="alert alert-warning" role="alert"&gt;&lt;strong&gt;Notice/Disclaimer:&lt;/strong&gt; The information I provide on home automation/security and surveillance is based on what I&amp;#8217;ve set up for myself based on a balance of cost, ease of use, and security, and should be considered for hobby purposes only. My current system and code has grown organically over time and is not how I&amp;#8217;d approach this if I started over from scratch. My code and system has a few obvious vulnerabilities and probably some non-obvious ones as well; I humbly but sincerely ask that you do not attempt to exploit these. I highly recommend that anyone implementing a similar system - especially if you also publish the details of it - have undocumented backup systems/devices. Finally, the systems that I describe are intended to provide some protection against or notification of crimes of opportunity, not targeted attacks. Please keep in mind that none of this is intended to protect against someone who targets &lt;em&gt;me&lt;/em&gt; specifically (and takes the time to research me) as opposed to my home at random.&lt;/div&gt;

&lt;p&gt;While my &lt;a href="/2018/12/aws-reinvent-2018-my-experience-and-recommendations-for-next-time/"&gt;trip to the &lt;span class="caps"&gt;AWS&lt;/span&gt; re:Invent conference last month&lt;/a&gt; resulted in a giant pile of swag from the expo, by far the most interesting of it was from the communications company &lt;a href="https://www.twilio.com"&gt;Twilio&lt;/a&gt; that gave me a &lt;span class="caps"&gt;SIM&lt;/span&gt; card for their &lt;a href="https://www.twilio.com/wireless"&gt;Programmable Wireless&lt;/a&gt; service (as well as something else that will be the topic of at least one future post). Programmable Wireless is really cool: for $3 per &lt;span class="caps"&gt;SIM&lt;/span&gt; and $3 per month (in &lt;strong&gt;single unit&lt;/strong&gt; quantity) I get a 2G/3G/4G &lt;span class="caps"&gt;SIM&lt;/span&gt; card with &lt;span class="caps"&gt;20MB&lt;/span&gt; of monthly data. That&amp;#8217;s not much data in the world of smartphones, but it&amp;#8217;s more than enough for many IoT or embedded use cases. More importantly, the &lt;span class="caps"&gt;SIM&lt;/span&gt; is also tied to your Twilio account that provides customizable rate plans (data rates, quotas, and roaming configuration) and detailed bi-hourly breakdowns of upload and download transfer, as well as &lt;a href="https://www.twilio.com/docs/usage/api"&gt;ReST APIs&lt;/a&gt; to manage everything and retrieve usage information and &lt;a href="https://www.twilio.com/docs/wireless"&gt;wonderful documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, at re:Invent one of the Twilio folks was telling me about their new Programmable Wireless service and the low costs even for a single &lt;span class="caps"&gt;SIM&lt;/span&gt;, and it occurred to me that this would be the perfect solution for an out-of-band notification solution for my &lt;a href="/2018/08/home-automation-and-security-system-overview/"&gt;home automation and security system&lt;/a&gt; (&lt;a href="/tags/security/index.html"&gt;blog posts in the &amp;#8220;security&amp;#8221; category&lt;/a&gt;). I&amp;#8217;ve done quite a bit this year with automation and security for my house, as well as video surveillance. I&amp;#8217;ve handled a lot of reasonable failure scenarios including power outage but, while my &lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T fiber connection has been remarkably reliable so far, loss of connectivity was the one major issue I didn&amp;#8217;t have a working solution for. My needs in the case of a loss of connectivity are somewhat different from the normal day-to-day; it&amp;#8217;s a rare enough condition that I&amp;#8217;m not really concerned with getting massive collections of surveillance camera still images like usual, but just a simple alert when connectivity is lost or restored, or if the alarm is triggered when my primary Internet connection is offline. Within those constraints it seemed like Programmable Wireless would be perfect for my needs, especially at the $3 &lt;span class="caps"&gt;USD&lt;/span&gt;/month price tag for a one-off personal&amp;nbsp;project.&lt;/p&gt;
&lt;p&gt;A few weeks ago, before going out of state for a week, I purchased the Huawei E397u-53 unlocked &lt;span class="caps"&gt;USB&lt;/span&gt; 4G &lt;span class="caps"&gt;LTE&lt;/span&gt; modem on &lt;a href="https://www.twilio.com/docs/wireless/tutorials/compatible-hardware"&gt;Twilio&amp;#8217;s compatible hardware list&lt;/a&gt; from &lt;a href="https://www.amazon.com/gp/product/B01M0JY15V/"&gt;Amazon&lt;/a&gt; and started work on the project. At first I spun my wheels for quite a while trying to figure out a way to handle the insane routing that I wanted in Linux: route everything out the default gateway (my &lt;span class="caps"&gt;LAN&lt;/span&gt;, going to my router and out the &lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T Fiber uplink) when it&amp;#8217;s working, but when the &lt;span class="caps"&gt;AT&lt;/span&gt;&amp;amp;T link is down, route only certain &amp;#8220;special&amp;#8221; traffic through the &lt;span class="caps"&gt;USB&lt;/span&gt; modem. After a bunch of thinking in circles and researching - and digging into all sorts of ugly stuff like policy-based routing - I resorted to posting a question on Twitter. Luckily a brilliant engineer who I used to work with &lt;a href="https://twitter.com/j_metzmeier/status/1076234692167454721"&gt;pointed me in the right direction&lt;/a&gt; with Docker. After thinking through his suggestion for a comparatively short amount of time, I hit on the solution that I&amp;#8217;m currently&amp;nbsp;using.&lt;/p&gt;
&lt;p&gt;My solution was to run a lightweight &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S) proxy server (&lt;a href="https://tinyproxy.github.io/"&gt;tinyproxy&lt;/a&gt;) inside a Docker container, with the container running in privileged mode and the &lt;span class="caps"&gt;PPP&lt;/span&gt; connection managed inside the container. Since it&amp;#8217;s running in privileged mode, the Docker container has full access to the host devices including the &lt;span class="caps"&gt;USB&lt;/span&gt; modem. When the container starts it launches &lt;a href="https://en.wikipedia.org/wiki/Point-to-Point_Protocol_daemon"&gt;pppd&lt;/a&gt; which establishes the &lt;span class="caps"&gt;PPP&lt;/span&gt; link over the cellular modem, sets a new default route over the link, and then starts tinyproxy (adding some other routes to the &lt;span class="caps"&gt;LAN&lt;/span&gt; as needed). The container exposes port 8888 for tinyproxy, which allows &lt;span class="caps"&gt;HTTP&lt;/span&gt;(S) traffic to be routed over the cellular link just by using the container as a proxy. I handle the failover component at the application level, by attempting to send data over the default route a certain number of times and then falling back to the proxy if all attempts failed (&lt;a href="https://github.com/jantman/home-automation-configs/commit/2cf9eb933969f7527786393703e91f0a32538deb"&gt;example commit&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;My solution to this is still very rough around the edges and shows all the unfortunate signs of being thrown together in a single rushed evening, but the &lt;a href="https://hub.docker.com/r/jantman/twilio-ppp-proxy"&gt;jantman/twilio-ppp-proxy Docker image&lt;/a&gt; and corresponding &lt;a href="https://github.com/jantman/docker-twilio-ppp-proxy"&gt;GitHub repo&lt;/a&gt; are available for anyone who would like to use them; I hope to polish them up a bit in the near future. While my needs are somewhat specific, I hope this will be of assistance to anyone else who wants the ability to easily proxy certain traffic over a Twilio Programmable Wireless link while preserving their existing&amp;nbsp;routing.&lt;/p&gt;
&lt;p&gt;Most importantly, many many thanks to the folks at the Twilio booth at re:Invent (I really, really wish I remembered the name of the person I spoke to) for discussing their services with me and giving me the &lt;span class="caps"&gt;SIM&lt;/span&gt; card that got this project&amp;nbsp;started!&lt;/p&gt;</content><category term="twilio"></category><category term="wireless"></category><category term="cellular"></category><category term="4G"></category><category term="DIY"></category><category term="security"></category><category term="reliability"></category><category term="alarm"></category></entry></feed>