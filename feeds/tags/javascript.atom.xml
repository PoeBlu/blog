<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Antman's Blog</title><link href="http://newblog.jasonantman.com/" rel="alternate"></link><link href="http://newblog.jasonantman.com/feeds/tags/javascript.atom.xml" rel="self"></link><id>http://newblog.jasonantman.com/</id><updated>2010-08-26T08:10:00-04:00</updated><entry><title>Documentation generation for web apps - PHP and JavaScript</title><link href="http://newblog.jasonantman.com/2010/08/documentation-generation-for-web-apps-php-and-javascript/" rel="alternate"></link><updated>2010-08-26T08:10:00-04:00</updated><author><name>admin</name></author><id>tag:newblog.jasonantman.com,2010-08-26:2010/08/documentation-generation-for-web-apps-php-and-javascript/</id><summary type="html">&lt;p&gt;Recently I&amp;#8217;ve been making some changes to a relatively complex ePCR
(electronic patient care report) program that I wrote for the &lt;a href="http://www.midlandparkambulance.com"&gt;ambulance
corps&lt;/a&gt;. It&amp;#8217;s a web application
(available only on our &lt;span class="caps"&gt;LAN&lt;/span&gt;, of course) written in &lt;span class="caps"&gt;PHP&lt;/span&gt;, with a relatively
large chunk of custom javascript to provide Ajax/&lt;span class="caps"&gt;DHTML&lt;/span&gt; functions. Most
of the &lt;span class="caps"&gt;PHP&lt;/span&gt; code was already documented and processed with
&lt;a href="http://www.phpdoc.org/"&gt;phpDocumentor&lt;/a&gt; (phpdoc) to generate &lt;span class="caps"&gt;API&lt;/span&gt;
documentation. However, since so much of the functionality is
&lt;span class="caps"&gt;DHTML&lt;/span&gt;-based, there was a lot of looking back to the JavaScript source to
figure out what was called&amp;nbsp;where.&lt;/p&gt;
&lt;p&gt;My search for a true multi-language documentation generator was
relatively fruitless. There&amp;#8217;s
&lt;a href="http://www.stack.nl/~dimitri/doxygen/"&gt;doxygen&lt;/a&gt; but that needed a Perl
helper script for javascript files. Since virtually all of the code,
both &lt;span class="caps"&gt;PHP&lt;/span&gt; and JavaScript, is purely procedural, I was really only
concerned about docblocks and the functions they&amp;nbsp;precede.&lt;/p&gt;
&lt;p&gt;Luckily, it occurred to me that JavaScript is pretty close in syntax to
&lt;span class="caps"&gt;PHP&lt;/span&gt;, and I tend to write them with exactly the same style. A little
research showed that phpdoc can more or less handle javascript code,
with a few&amp;nbsp;caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code needs to parse as &lt;span class="caps"&gt;PHP&lt;/span&gt;, so things like inline functions mess
    it&amp;nbsp;up.&lt;/li&gt;
&lt;li&gt;The default phpDocumentor ini file doesn&amp;#8217;t recognize files with
    &lt;code&gt;.js&lt;/code&gt; extensions.&lt;/li&gt;
&lt;li&gt;The files need to have a &amp;lt;?php at the&amp;nbsp;top.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Noting this, I wrote a small script that iterates through a directory of
&lt;code&gt;.js&lt;/code&gt; files, parses them line by line, pulls out only the function
declarations (which, hopefully, don&amp;#8217;t also have code on the same line)
and docblocks, and writes the output (with a &amp;lt;?php at the top) to a
same-named file in a different&amp;nbsp;directory.&lt;/p&gt;
&lt;p&gt;The script obviously requires phpdoc to be installed, and also requires
you to edit the phpDocumentor.ini file (installed with &lt;span class="caps"&gt;PEAR&lt;/span&gt; on my system
at &lt;code&gt;/usr/share/php5/PEAR/data/PhpDocumentor/phpDocumentor.ini&lt;/code&gt;) and add
a &amp;#8220;js&amp;#8221; line to the &lt;code&gt;[_phpDocumentor_phpfile_exts]&lt;/code&gt; section to get phpdoc
to recognize &lt;code&gt;*.js&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;I was easily able to integrate this with a Makefile rule and create a
single set of cross-linked phpdoc &lt;span class="caps"&gt;API&lt;/span&gt; docs including both &lt;span class="caps"&gt;JS&lt;/span&gt; and &lt;span class="caps"&gt;PHP&lt;/span&gt;
files. I also added explicit package names (like &amp;#8220;-&lt;span class="caps"&gt;PHP&lt;/span&gt;&amp;#8221; and &amp;#8220;-&lt;span class="caps"&gt;JS&lt;/span&gt;&amp;#8221;) to
keep things separated a&amp;nbsp;little.&lt;/p&gt;
&lt;p&gt;The script can be found at:
&lt;a href="https://github.com/jantman/misc-scripts/blob/master/js2phpdoc.php"&gt;https://github.com/jantman/misc-scripts/blob/master/js2phpdoc.php&lt;/a&gt;.
It&amp;#8217;s (obviously) free for any use, provided that you follow the license
terms (leave copyrights intact, send modifications back to me, and
update the changelog if you modify&amp;nbsp;it).&lt;/p&gt;
&lt;p&gt;My Makefile rule (which uses a temp directory to both keep the generated
files separate from the source and keep the file paths as seen by phpdoc
the same as the actual&amp;nbsp;source):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nf"&gt;.&lt;span class="caps"&gt;PHONY&lt;/span&gt;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;docs&lt;/span&gt;

&lt;span class="nf"&gt;docs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        mkdir -p temp/js
        bin/js2phpdoc.php js/ temp/js/
        cp -r inc temp/
        cp *.php temp/
        phpdoc -c docs/default.ini
        rm -Rf temp
&lt;/pre&gt;&lt;/div&gt;</summary><category term="documentation"></category><category term="javascript"></category><category term="PHP"></category><category term="web programming"></category></entry><entry><title>JavaScript and Emacs, and updates</title><link href="http://newblog.jasonantman.com/2008/07/javascript-and-emacs-and-updates/" rel="alternate"></link><updated>2008-07-01T11:09:00-04:00</updated><author><name>admin</name></author><id>tag:newblog.jasonantman.com,2008-07-01:2008/07/javascript-and-emacs-and-updates/</id><summary type="html">&lt;p&gt;Well, thankfully, summer classes are almost over (tomorrow is the last
class). I have a big paper to write for one of them, due at the worst
time possible - July 5th. The day after what is, probably, one of the
busiest days of the year for the &lt;a href="http://www.midlandparkambulance.com"&gt;ambulance
corps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In follow-ups and&amp;nbsp;news:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://tuxostat.jasonantman.com"&gt;tuxostat&lt;/a&gt; has been running for
    nearly a month in my apartment, and appears stable, albeit missing
    many planned features, and with a sub-optimal interface (and no &lt;span class="caps"&gt;SNMP&lt;/span&gt;&amp;nbsp;yet).&lt;/li&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.tuxtruck.org"&gt;TuxTruck&lt;/a&gt; is still on the back&amp;nbsp;burner.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;I&amp;#8217;ve been playing around with the idea of writing a new electronic
    patient care report system for the ambulance corps, to replace our
    current three-year-old system (written in &lt;span class="caps"&gt;VB&lt;/span&gt; .&lt;span class="caps"&gt;NET&lt;/span&gt; and running on
    Windows). It would probably be coded in Python, with a
    wxWindows/&lt;a href="http://www.wxpython.org/"&gt;wxPython&lt;/a&gt; &lt;span class="caps"&gt;GUI&lt;/span&gt;. I&amp;#8217;ll start on a
    small demo version, but would like it to be fully modular, and
    eventually form a codebase for &lt;a href="http://www.openepcr.org"&gt;OpenEPCR&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Anyway, I&amp;#8217;ve been doing a lot of work for my Building Data-Driven
Websites class (well, alternate assignments, but still a lot of work).
The latest project was an Ajax/&lt;span class="caps"&gt;DHTML&lt;/span&gt; calendar. Needless to say, this involved a lot of JavaScript work. To
make it worse, I used a fair amount of sample code to get an idea of how
to do things, and way too many of the snippets out there on the &amp;#8216;net are
in formats that are quite unfriendly for pasting into an Emacs console&amp;nbsp;window.&lt;/p&gt;
&lt;p&gt;So, I happened to come by &lt;a href="http://steve-yegge.blogspot.com/"&gt;Steve Yegge&amp;#8217;s
blog&lt;/a&gt;, with a posting on &lt;a href="http://steve-yegge.blogspot.com/2008/03/js2-mode-new-javascript-mode-for-emacs.html"&gt;his
JavaScript mode for
Emacs&lt;/a&gt;.
Not only does it seem cool, but it was also the only one I could find
that does syntax highlighting and sane indentation (important for copied
code snippets). So, I grabbed it from &lt;a href="http://code.google.com/p/js2-mode/"&gt;Google
Code&lt;/a&gt; and -&amp;nbsp;viola!&lt;/p&gt;</summary><category term="ajax"></category><category term="call report"></category><category term="dhtml"></category><category term="javascript"></category><category term="pcr"></category><category term="tuxostat"></category><category term="tuxtruck"></category></entry></feed>