<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Jason Antman's Blog - Puppet</title><link>https://blog.jasonantman.com/</link><description></description><lastBuildDate>Sat, 19 Sep 2015 11:09:00 -0400</lastBuildDate><item><title>Puppetlabs Beaker SUTs with GUI / Non-Headless</title><link>https://blog.jasonantman.com/2015/09/puppetlabs-beaker-suts-with-gui--non-headless/</link><description>&lt;p&gt;How to enable the &lt;span class="caps"&gt;GUI&lt;/span&gt; / disable headless mode on a puppetlabs Beaker&amp;nbsp;&lt;span class="caps"&gt;SUT&lt;/span&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Antman</dc:creator><pubDate>Sat, 19 Sep 2015 11:09:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2015-09-19:/2015/09/puppetlabs-beaker-suts-with-gui--non-headless/</guid><category>puppet</category><category>beaker</category><category>sut</category><category>rspec</category><category>virtualbox</category><category>headless</category><category>GUI</category></item><item><title>Puppet facter facts for syslog daemon type and version, symantec netbackup</title><link>https://blog.jasonantman.com/2012/08/puppet-facter-facts-for-syslog-daemon-type-and-version-symantec-netbackup/</link><description>&lt;p&gt;I have a few more custom facts that I&amp;#8217;ve added to my
&lt;a href="https://github.com/jantman/puppet-facter-facts"&gt;puppet-facter-facts&lt;/a&gt;
github&amp;nbsp;repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/puppet-facter-facts/blob/master/syslog_bin.rb"&gt;syslog_bin&lt;/a&gt;,
    &lt;a href="https://github.com/jantman/puppet-facter-facts/blob/master/syslog_type.rb"&gt;syslog_type&lt;/a&gt;,
    and
    &lt;a href="https://github.com/jantman/puppet-facter-facts/blob/master/syslog_version.rb"&gt;syslog_version&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;tell the absolute path to the &lt;em&gt;running&lt;/em&gt; syslog binary, its short
name (basename), and its version as a string. Currently only know
about &lt;code&gt;/sbin/syslogd&lt;/code&gt; and &lt;code&gt;/sbin/rsyslogd&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jantman/puppet-facter-facts/blob/master/has_netbackup.rb"&gt;has_netbackup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;tests …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Sat, 25 Aug 2012 11:33:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-08-25:/2012/08/puppet-facter-facts-for-syslog-daemon-type-and-version-symantec-netbackup/</guid><category>facter</category><category>nbu</category><category>netbackup</category><category>puppet</category><category>rsyslog</category><category>syslog</category></item><item><title>Puppet facter fact for all applied classes, returned as a CSV list</title><link>https://blog.jasonantman.com/2012/08/puppet-facter-fact-for-all-applied-classes-returned-as-a-csv-list/</link><description>&lt;p&gt;I&amp;#8217;m unfortunatey stuck, at least for the time being, using flat-file
manifests to configure my puppet nodes. Without an &lt;span class="caps"&gt;ENC&lt;/span&gt;, it&amp;#8217;s pretty
difficult to get a good ovewview of what classes are used on each node,
and what nodes use a given class. I know I could write …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 22 Aug 2012 07:05:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-08-22:/2012/08/puppet-facter-fact-for-all-applied-classes-returned-as-a-csv-list/</guid><category>classes</category><category>csv</category><category>fact</category><category>facter</category><category>node</category><category>puppet</category></item><item><title>Puppet facter fact for last applied configuration version</title><link>https://blog.jasonantman.com/2012/08/puppet-facter-fact-for-last-applied-configuration-version/</link><description>&lt;p&gt;For anyone else who sets the Puppet &lt;code&gt;config_version&lt;/code&gt; paramater to return
the current &lt;span class="caps"&gt;SVN&lt;/span&gt; or Git version of your configuration, here&amp;#8217;s a fact that
grabs that version (by parsing the cached &lt;span class="caps"&gt;YAML&lt;/span&gt; catalog) and sets it as a
fact called &amp;#8220;catalog_config_version&amp;#8221;. It can then be used for
sanity-checking your …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Tue, 21 Aug 2012 08:55:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-08-21:/2012/08/puppet-facter-fact-for-last-applied-configuration-version/</guid><category>config_version</category><category>fact</category><category>facter</category><category>puppet</category></item><item><title>Patch to Puppet Dashboard 1.2.10 to show arbitrary facts in the main node table</title><link>https://blog.jasonantman.com/2012/08/patch-to-puppet-dashboard-1-2-10-to-show-arbitrary-facts-in-the-main-node-table/</link><description>&lt;p&gt;We use &lt;a href="http://puppetlabs.com/puppet/related-projects/dashboard/"&gt;Puppet
Dashboard&lt;/a&gt; at
work to view the status of our puppet nodes. While it&amp;#8217;s very handy,
there&amp;#8217;s one feature I really wanted: the ability to show the value of
arbitrary puppet facts in the main node table on the home page.
Specifically, the facts we use …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Sat, 11 Aug 2012 10:34:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-08-11:/2012/08/patch-to-puppet-dashboard-1-2-10-to-show-arbitrary-facts-in-the-main-node-table/</guid><category>dashboard</category><category>facts</category><category>puppet</category><category>ruby</category><category>sysadmin</category></item><item><title>Python script to find dependency cycles in GraphViz dot files</title><link>https://blog.jasonantman.com/2012/03/python-script-to-find-dependency-cycles-in-graphviz-dot-files/</link><description>&lt;p&gt;Using &lt;a href="http://www.graphviz.org/"&gt;GraphViz&lt;/a&gt; to describe configurations is
relatively popular in the software and systems architecture world; the
simple text-based format makes it quiet simple, and the directed graph
(dot file) is a simple method to store a graph of information flow or
component relationships. &lt;a href="http://puppetlabs.com"&gt;Puppet&lt;/a&gt; includes
builtin support for &lt;a href="http://docs.puppetlabs.com/guides/faq.html#how-do-i-use-puppets-graphing-support"&gt;generating dot …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 28 Mar 2012 22:05:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-03-28:/2012/03/python-script-to-find-dependency-cycles-in-graphviz-dot-files/</guid><category>dot</category><category>graph</category><category>graphviz</category><category>puppet</category><category>python</category></item><item><title>The state of Puppet External Node Classifiers</title><link>https://blog.jasonantman.com/2012/02/the-state-of-puppet-external-node-classifiers/</link><description>&lt;p&gt;&lt;strong&gt;Update November 2013&lt;/strong&gt;: This post has brought an amazing amount of
traffic to my blog, probably because it still seems to be one of the
only &lt;span class="caps"&gt;ENC&lt;/span&gt; comparisons out there. Both Dashboard (and Puppet Enterprise
Console) and The Foreman have changed quite a bit since I wrote this.
Foreman has …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Sun, 26 Feb 2012 12:45:00 -0500</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-02-26:/2012/02/the-state-of-puppet-external-node-classifiers/</guid><category>dashboard</category><category>foreman</category><category>node classifier</category><category>puppet</category></item><item><title>Puppet Syntax Highlighting with GeSHi</title><link>https://blog.jasonantman.com/2012/01/puppet-syntax-highlighting-with-geshi/</link><description>&lt;p&gt;This blog is run on wordpress, and I also do quite a bit in &lt;span class="caps"&gt;PHP&lt;/span&gt;, so I&amp;#8217;m
familiar with the &lt;a href="http://qbnz.com/highlighter/"&gt;GeSHi&lt;/a&gt; syntax
highlighter. It&amp;#8217;s &lt;span class="caps"&gt;PHP&lt;/span&gt;-based, and can run both as a Wordpress plugin
(&lt;a href="http://wordpress.org/extend/plugins/wp-syntax/"&gt;&lt;span class="caps"&gt;WP&lt;/span&gt;-Syntax&lt;/a&gt;) and as a
&lt;span class="caps"&gt;PHP&lt;/span&gt; module. It also works quite well with the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 11 Jan 2012 12:32:00 -0500</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2012-01-11:/2012/01/puppet-syntax-highlighting-with-geshi/</guid><category>GeSHi</category><category>mediawiki</category><category>PHP</category><category>puppet</category><category>wordpress</category></item><item><title>Puppet problems with hostname in autosign.conf - Invalid pattern</title><link>https://blog.jasonantman.com/2009/10/puppet-problems-with-hostname-in-autosignconf-invalid-pattern/</link><description>&lt;p&gt;In playing with Puppet (0.24.8 on clients and server) today (well,
building a new host) I came by a strange error when I ran puppet on the&amp;nbsp;client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;err: Could not request certificate: Certificate retrieval failed: Invalid pattern css-storemanager
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The thing that was so strange is that &amp;#8220;css-storemanager …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 14 Oct 2009 14:45:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2009-10-14:/2009/10/puppet-problems-with-hostname-in-autosignconf-invalid-pattern/</guid><category>autosign.conf</category><category>hostname</category><category>puppet</category></item><item><title>Building a Rebuild-able Site</title><link>https://blog.jasonantman.com/2009/05/building-a-rebuild-able-site/</link><description>&lt;p&gt;At $&lt;span class="caps"&gt;WORK&lt;/span&gt;, my group runs about two dozen servers that provide services
for over 60,000 users. They&amp;#8217;re a mix of Windows and Linux, with some old
Solaris stuff thrown in there. The one thing they have in common is
they&amp;#8217;re all hand-built, hand-configured, and old. They&amp;#8217;ve …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">admin</dc:creator><pubDate>Wed, 06 May 2009 08:42:00 -0400</pubDate><guid isPermaLink="false">tag:blog.jasonantman.com,2009-05-06:/2009/05/building-a-rebuild-able-site/</guid><category>backup</category><category>configuration</category><category>kickstart</category><category>linux</category><category>puppet</category><category>recovery</category><category>work</category></item></channel></rss>